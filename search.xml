<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ajax</title>
      <link href="/2023/01/02/Ajax/"/>
      <url>/2023/01/02/Ajax/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-Ajax（Web数据交互）"><a href="#简介-Ajax（Web数据交互）" class="headerlink" title="简介 Ajax（Web数据交互）"></a>简介 Ajax（Web数据交互）</h1><span id="more"></span><h2 id="服务器的基本概念"><a href="#服务器的基本概念" class="headerlink" title="服务器的基本概念"></a>服务器的基本概念</h2><blockquote><p>了解服务器的基本概念与初识Ajax</p></blockquote><h3 id="客户端与服务器"><a href="#客户端与服务器" class="headerlink" title="客户端与服务器"></a>客户端与服务器</h3><ul><li>服务器<br>上网过程中，负责<strong>存放和对外提供资源</strong>的电脑，叫做服务器。</li><li>客户端<br>上网过程中，负责<strong>获取和消费资源</strong>的电脑，叫做客户端。<br><img src="/images/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF.png"></li></ul><h3 id="URL地址"><a href="#URL地址" class="headerlink" title="URL地址"></a>URL地址</h3><h4 id="URL地址的概念"><a href="#URL地址的概念" class="headerlink" title="URL地址的概念"></a>URL地址的概念</h4><blockquote><p>URL（全称是UniformResourceLocator）中文叫统一资源定位符，用于标识互联网上每个资源的唯一存放位置。浏览器只有通过URL地址，才能正确定位资源的存放位置，从而成功访问到对应的资源。</p></blockquote><p>常见的URL举例：<br><a href="http://www.baidu.com/">http://www.baidu.com</a><br><a href="http://www.taobao.com/">http://www.taobao.com</a></p><h4 id="URL地址的组成部分"><a href="#URL地址的组成部分" class="headerlink" title="URL地址的组成部分"></a>URL地址的组成部分</h4><p>URL地址一般由三部组成：<br>① 客户端与服务器之间的通信协议<br>② 存有该资源的服务器名称<br>③ 资源在服务器上具体的存放位置<br><img src="/images/URL组成.png" width="600"></p><h3 id="了解Ajax"><a href="#了解Ajax" class="headerlink" title="了解Ajax"></a>了解Ajax</h3><blockquote><p>Ajax 的全称是 Asynchronous Javascript And XML（异步 JavaScript 和 XML）。</p></blockquote><p>在网页中利用 XMLHttpRequest 对象和服务器进行数据交互的方式，就是Ajax。<br>Ajax能让我们轻松实现网页与服务器之间的数据交互。<br><img src="/images/Ajax.png" width="600"></p><h3 id="jQuery中的Ajax"><a href="#jQuery中的Ajax" class="headerlink" title="jQuery中的Ajax"></a>jQuery中的Ajax</h3><blockquote><p>浏览器中提供的 XMLHttpRequest 用法比较复杂，所以 jQuery 对 XMLHttpRequest 进行了封装，提供了一系列 Ajax 相关的函数，极大地降低了 Ajax 的使用难度</p></blockquote><p>jQuery 中发起 Ajax 请求最常用的三个方法如下：</p><ul><li>$.get()</li><li>$.post()</li><li>$.ajax()</li></ul><h4 id="get-函数的语法"><a href="#get-函数的语法" class="headerlink" title="$.get()函数的语法"></a>$.get()函数的语法</h4><blockquote><p>jQuery 中 $.get() 函数的功能单一，专门用来发起 get 请求，从而将服务器上的资源请求到客户端来进行使用。</p></blockquote><p>$.get() 函数的语法如下：</p><pre class="line-numbers language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数名</th><th>参数类型</th><th>是否必选</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>string</td><td>是</td><td>要请求的资源地址</td></tr><tr><td>date</td><td>object</td><td>否</td><td>请求资源期间要携带(发送到服务器)的参数</td></tr><tr><td>callback</td><td>function</td><td>否</td><td>请求成功时的回调函数,响应发回来的数据</td></tr></tbody></table><ul><li><p>$.get()发起不带参数的请求<br>使用 $.get() 函数发起不带参数的请求时，直接提供请求的 URL 地址和请求成功之后的回调函数即可，示例代码如下：</p><pre class="line-numbers language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://www.liulongbin.top:3006/api/getbooks'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 这里的 res 是服务器返回的数据</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>$.get()发起带参数的请求<br>使用 $.get() 函数发起带参数的请求时，示例代码如下：</p><pre class="line-numbers language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://www.liulongbin.top:3006/api/getbooks'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//请求id为1的数据</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="post-函数的语法"><a href="#post-函数的语法" class="headerlink" title="$.post()函数的语法"></a>$.post()函数的语法</h4><blockquote><p>jQuery 中 $.post() 函数的功能单一，专门用来发起 post 请求，从而向服务器提交数据。</p></blockquote><p>$.post() 函数的语法如下：</p><pre class="line-numbers language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数名</th><th>参数类型</th><th>是否必选</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>string</td><td>是</td><td>提交数据的地址</td></tr><tr><td>date</td><td>object</td><td>否</td><td>要提交的数据</td></tr><tr><td>callback</td><td>function</td><td>否</td><td>数据提交成功时的回调函数</td></tr></tbody></table><p>使用 $post() 向服务器提交数据的示例代码如下：</p><pre class="line-numbers language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>   <span class="token string">'http://www.liulongbin.top:3006/api/addbook'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 请求的URL地址</span>   <span class="token punctuation">{</span> bookname<span class="token punctuation">:</span> <span class="token string">'水浒传'</span><span class="token punctuation">,</span> author<span class="token punctuation">:</span> <span class="token string">'施耐庵'</span><span class="token punctuation">,</span> publisher<span class="token punctuation">:</span> <span class="token string">'上海图书出版社'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 提交的数据</span>   <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 回调函数</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 这里的 res 是服务器返回的数据</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ajax-函数的语法"><a href="#ajax-函数的语法" class="headerlink" title="$.ajax()函数的语法"></a>$.ajax()函数的语法</h4><blockquote><p>相比于 $.get() 和 $.post() 函数，jQuery 中提供的 $.ajax() 函数，是一个功能比较综合的函数，它允许我们对 Ajax 请求进行更详细的配置。</p></blockquote><p>$.ajax() 函数的基本语法如下：</p><pre class="line-numbers language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   type<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 请求的方式，例如 GET 或 POST</span>   url<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 请求的 URL 地址</span>   data<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 这次请求要携带的数据</span>   success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 请求成功之后的回调函数</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用$.ajax()发起GET请求<pre class="line-numbers language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 请求的方式</span> url<span class="token punctuation">:</span> <span class="token string">'http://www.liulongbin.top:3006/api/getbooks'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 请求的 URL 地址</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 这次请求要携带的数据</span> success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 请求成功之后的回调函数</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用$.ajax()发起POST请求<br>使用 $.ajax() 发起 POST 请求时，只需要将 type 属性的值设置为 ‘POST’ 即可：<pre class="line-numbers language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 请求的方式</span> url<span class="token punctuation">:</span> <span class="token string">'http://www.liulongbin.top:3006/api/addbook'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 请求的 URL 地址</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 要提交给服务器的数据</span>    bookname<span class="token punctuation">:</span> <span class="token string">'水浒传'</span><span class="token punctuation">,</span>    author<span class="token punctuation">:</span> <span class="token string">'施耐庵'</span><span class="token punctuation">,</span>    publisher<span class="token punctuation">:</span> <span class="token string">'上海图书出版社'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 请求成功之后的回调函数</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><blockquote><p>使用 Ajax 请求数据时，被请求的 URL 地址，就叫做数据接口（简称接口）。同时，每个接口必须有请求方式。</p></blockquote><h4 id="接口测试工具"><a href="#接口测试工具" class="headerlink" title="接口测试工具"></a>接口测试工具</h4><p>为了验证接口能否被正常被访问，我们常常需要使用接口测试工具，来对数据接口进行检测。<br>好处：接口测试工具能让我们在<strong>不写任何代码</strong>的情况下，对接口进行<strong>调用</strong>和<strong>测试</strong>。<br>访问 PostMan 的官方下载网址 <a href="https://www.getpostman.com/downloads/%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%89%80%E9%9C%80%E7%9A%84%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F%E5%90%8E%EF%BC%8C%E7%9B%B4%E6%8E%A5%E5%AE%89%E8%A3%85%E5%8D%B3%E5%8F%AF%E3%80%82">https://www.getpostman.com/downloads/，下载所需的安装程序后，直接安装即可。</a><br>GET使用步骤：</p><ol><li>选择请求的方式</li><li>填写请求的URL地址</li><li>填写请求的参数</li><li>点击 Send 按钮发起 GET 请求</li><li>查看服务器响应的结果</li></ol><img src="/images/Postgetmanget.png" width="700"><p>POST使用步骤：</p><ol><li>选择请求的方式</li><li>填写请求的URL地址</li><li>选择 Body 面板并勾选<strong>数据格式</strong></li><li>填写要发送到服务器的数据</li><li>点击 Send 按钮发起 POST 请求</li><li>查看服务器响应的结果</li></ol><img src="/images/Postgetmanpost.png" width="700"><h4 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h4><blockquote><p>接口文档，顾名思义就是接口的说明文档，它是我们调用接口的依据。好的接口文档包含了对接口URL，参数以及输出内容的说明，我们参照接口文档就能方便的知道接口的作用，以及接口如何进行调用。</p></blockquote><p>接口文档可以包含很多信息，也可以按需进行精简，不过，一个合格的接口文档，应该包含以下6项内容，从而为接口的调用提供依据：</p><ol><li><strong>接口名称</strong>：用来标识各个接口的简单说明，如登录接口，获取图书列表接口等。</li><li><strong>接口URL</strong>：接口的<strong>调用地址</strong>。</li><li><strong>调用方式</strong>：接口的调用方式，如 <strong>GET</strong> 或 <strong>POST</strong>。</li><li><strong>参数格式</strong>：接口需要传递的参数，每个参数必须包含<strong>参数名称</strong>、<strong>参数类型</strong>、<strong>是否必选</strong>、<strong>参数说明</strong>这4项内容。</li><li><strong>响应格式</strong>：接口的返回值的详细描述，一般包含<strong>数据名称</strong>、<strong>数据类型</strong>、<strong>说明</strong>3项内容。</li><li>返回示例（可选）：通过对象的形式，例举服务器返回数据的结构。</li></ol><img src="/images/接口文档-1.png" width="700"><img src="/images/接口文档-2.png" width="700"><img src="/images/接口文档-3.png" width="700"><h2 id="form表单与模板引擎"><a href="#form表单与模板引擎" class="headerlink" title="form表单与模板引擎"></a>form表单与模板引擎</h2><h3 id="form表单的基本使用"><a href="#form表单的基本使用" class="headerlink" title="form表单的基本使用"></a>form表单的基本使用</h3><blockquote><p>表单在网页中主要负责数据采集功能。HTML中的form标签，就是用于采集用户输入的信息，并通过form标签的提交操作，把采集到的信息提交到服务器端进行处理。</p></blockquote><h4 id="表单的组成部分"><a href="#表单的组成部分" class="headerlink" title="表单的组成部分"></a>表单的组成部分</h4><p>表单由三个基本部分组成：</p><ul><li><p>表单标签</p></li><li><p>表单域</p></li><li><p>表单按钮<br>表单域：包含了文本框、密码框、隐藏域、多行文本框、复选框、单选框、下拉选择框和文件上传框等。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span> /**表单标签**/   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email_or_mobile<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>//表单域   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remember_me<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>//表单按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="form标签的属性"><a href="#form标签的属性" class="headerlink" title="form标签的属性"></a>form标签的属性</h4><p>form标签用来采集数据，form标签的属性则是用来规定如何把采集到的数据发送到服务器。</p><img src="/images/form属性.png" width="600"><ul><li><p>action<br>action 属性用来规定当提交表单时，<strong>向何处发送表单数据</strong>。<br>action 属性的值应该是后端提供的一个 URL 地址，这个 URL 地址专门负责接收表单提交过来的数据。<br>当 form表单在未指定 action 属性值的情况下，action 的默认值为当前页面的 URL 地址。<br> <strong>注意</strong>：当提交表单后，页面会立即跳转到 action 属性指定的 URL 地址</p></li><li><p>target<br>target 属性用来规定在何处打开 action URL。<br>它的可选值有5个，默认情况下，target 的值是 _self，表示在相同的框架中打开 action URL。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>_blank</td><td>新窗口打开</td></tr><tr><td>_self</td><td>默认，在相同的框架打开</td></tr><tr><td>_parent</td><td>在父框架集中打开(很少用)</td></tr><tr><td>_top</td><td>在整个窗口打开(很少用)</td></tr><tr><td>framename</td><td>在指定框架打开(很少用)</td></tr></tbody></table></li><li><p>method<br>method 属性用来规定以何种方式把表单数据提交到 action URL。<br>它的可选值有两个，分别是 get 和 post。<br>默认情况下，method 的值为 get，表示通过URL地址的形式，把表单数据提交到 action URL。<br> <strong>注意</strong>：<br> get 方式适合用来提交少量的、简单的数据。<br> post 方式适合用来提交大量的、复杂的、或包含文件上传的数据。<br> 在实际开发中，form表单的 post 提交方式用的最多，很少用 get。例如登录、注册、添加数据等表单操作，都需要使用 post 方式来提交表单。</p></li><li><p>enctype<br>enctype 属性用来规定在<strong>发送表单数据之前如何对数据进行编码</strong>。<br>它的可选值有三个，默认情况下，enctype 的值为 application/x-www-form-urlencoded，表示在发送前编码所有的字符。</p></li></ul><img src="/images/form-enctype.png" width="600"><p>   <strong>注意</strong>：<br>   在涉及到<strong>文件上传</strong>的操作时，<strong>必须</strong>将 enctype 的值设置为 <strong>multipart/form-data</strong><br>   如果表单的提交不涉及到文件上传操作，则直接将 enctype 的值设置为 application/x-www-form-urlencoded 即可！</p><ul><li>表单的同步提交及缺点<br>通过点击 submit 按钮，触发表单提交的操作，从而使页面跳转到 action URL 的行为，叫做表单的同步提交。</li></ul><p><strong>缺点</strong>：</p><ol><li>form表单同步提交后，整个页面会发生<strong>跳转</strong>，跳转到 action URL 所指向的地址，用户体验很差。</li><li>form表单同步提交后，<strong>页面之前的状态和数据会丢失</strong>。<br>解决方案：表单只负责采集数据，Ajax 负责将数据提交到服务器</li></ol><h3 id="通过Ajax提交表单数据"><a href="#通过Ajax提交表单数据" class="headerlink" title="通过Ajax提交表单数据"></a>通过Ajax提交表单数据</h3><h4 id="监听表单提交事件"><a href="#监听表单提交事件" class="headerlink" title="监听表单提交事件"></a>监听表单提交事件</h4><p>在 jQuery 中，可以使用如下两种方式，监听到表单的提交事件：</p><ul><li>方式1<pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#form1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'监听到了表单的提交事件'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>方式2<pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#form1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'监听到了表单的提交事件'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="阻止表单默认提交行为"><a href="#阻止表单默认提交行为" class="headerlink" title="阻止表单默认提交行为"></a>阻止表单默认提交行为</h4><p>当监听到表单的提交事件以后，可以调用事件对象的 event.preventDefault() 函数，来阻止表单的提交和页面的跳转，示例代码如下：</p><ul><li>方式1<pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#form1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 阻止表单的提交和页面的跳转</span> e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//阻止默认行为</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>方式2<pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#form1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 阻止表单的提交和页面的跳转</span> e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="快速获取表单中的数据"><a href="#快速获取表单中的数据" class="headerlink" title="快速获取表单中的数据"></a>快速获取表单中的数据</h4><p>为了简化表单中数据的获取操作，jQuery 提供了 <strong>serialize()</strong> 函数，其语法格式如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>示例<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#form1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//阻止默认行为</span> <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//输出标准的查询字符串：</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>注意：serialize()返回的是表单标准的<strong>查询字符串</strong> 在使用 serialize() 函数快速获取表单数据时，必须为每个表单元素添加 <strong>name</strong> 属性！</li></ul><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><blockquote><p>模板引擎，顾名思义，它可以根据程序员指定的模板结构和数据，自动生成一个完整的HTML页面。</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> rows <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>$<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 循环拼接字符串</span>    rows<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'&lt;li class="list-group-item">'</span><span class="token operator">+</span> item<span class="token punctuation">.</span>content <span class="token operator">+</span><span class="token string">'&lt;span class="badge cmt-date">评论时间：'</span><span class="token operator">+</span> item<span class="token punctuation">.</span>time <span class="token operator">+</span><span class="token string">'&lt;/span>&lt;span class="badge cmt-person">评论人：'</span><span class="token operator">+</span> item<span class="token punctuation">.</span>username <span class="token operator">+</span><span class="token string">'&lt;/span>&lt;/li>'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#cmt-list'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>rows<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 渲染列表的UI结构</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码是通过字符串拼接的形式，来渲染UI结构。<br>如果UI结构比较复杂，则拼接字符串的时候需要格外注意引号之前的嵌套。且一旦需求发生变化，修改起来也非常麻烦。<br><strong>模板引擎的好处</strong>:</p><ol><li>减少了字符串的拼接操作</li><li>使代码结构更清晰</li><li>使代码更易于阅读与维护</li></ol><h5 id="art-template模板引擎"><a href="#art-template模板引擎" class="headerlink" title="art-template模板引擎"></a>art-template模板引擎</h5><blockquote><p>art-template 是一个简约、超快的模板引擎。中文官网首页为 <a href="http://aui.github.io/art-template/zh-cn/index.html">http://aui.github.io/art-template/zh-cn/index.html</a></p></blockquote><p>在浏览器中访问 <a href="http://aui.github.io/art-template/zh-cn/docs/installation.html">http://aui.github.io/art-template/zh-cn/docs/installation.html</a> 页面，找到下载链接后，鼠标右键，选择“链接另存为”，将 art-template 下载到本地，然后，通过 script标签加载到网页上进行使用。</p><ul><li>art-template的使用步骤</li></ul><ol><li>导入 art-template</li><li>定义数据</li><li>定义模板</li><li>调用 template 函数</li><li>渲染HTML结构</li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 1. 导入模板引擎 --></span><span class="token comment" spellcheck="true">&lt;!-- 在 window 全局，多一个函数，叫做 template('模板的Id', 需要渲染的数据对象) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>template-web.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 3.定义模板 --></span><span class="token comment" spellcheck="true">&lt;!-- 3.1 模板的 HTML 结构，必须定义到 script 中 type必须为text/html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{ {name} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--{ { } }是占位符 用于放数据name--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{ {age} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 2.定义数据 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">   <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>      name <span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span>      age<span class="token punctuation">:</span> <span class="token number">20</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//4. 调用template函数,id值tpl不需要#</span>   <span class="token keyword">var</span> str <span class="token operator">=</span>  <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'tpl'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 5.渲染html结构</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#container'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>art-template标准语法<br>art-template 提供了 { { } } 这种语法格式，在 { { } } 内可以进行变量输出，或循环数组等操作，这种 { { } } 语法在 art-template 中被称为标准语法。</p><ul><li><p>标准语法 - 输出</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span> <span class="token punctuation">{</span>value<span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token punctuation">{</span>obj<span class="token punctuation">.</span>key<span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token punctuation">{</span>obj<span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token punctuation">{</span>a <span class="token operator">?</span> b <span class="token punctuation">:</span> c<span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token punctuation">{</span>a <span class="token operator">||</span> b<span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token punctuation">{</span>a <span class="token operator">+</span> b<span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 { { } } 语法中，可以进行变量的输出、对象属性的输出、三元表达式输出、逻辑或输出、加减乘除等表达式以文本形式输出。</p></li><li><p>标准语法 – 原文输出</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span> <span class="token punctuation">{</span>@ value <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token punctuation">{</span>@ test<span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//显示h3格式的“测试原文输出”</span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token string">'&lt;h3>测试原文输出&lt;/h3>'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果要输出的 value 值中，包含了 HTML 标签结构，则需要使用<strong>原文输出</strong>语法，才能保证 HTML 标签<strong>正常渲染</strong>。</p></li><li><p>标准语法 – 条件输出<br>如果要实现条件输出，则可以在 { { } } 中使用 if … else if … /if 的方式，进行按需输出</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token keyword">if</span> value<span class="token punctuation">}</span> <span class="token punctuation">}</span> 按需输出的内容 <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token keyword">if</span> v1<span class="token punctuation">}</span> <span class="token punctuation">}</span> 按需输出的内容 <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token keyword">else</span> <span class="token keyword">if</span> v2<span class="token punctuation">}</span> <span class="token punctuation">}</span> 按需输出的内容 <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token keyword">if</span> flag <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断flag的值</span> 我是<span class="token number">1</span><span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token keyword">else</span> flag <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>    我是<span class="token number">2</span><span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>标准语法 – 循环输出<br>如果要实现循环输出，则可以在  内，通过 each 语法循环数组，当前循环的索引使用 $ index 进行访问，当前的循环项使用 $ value 进行访问</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span> <span class="token punctuation">{</span>each arr<span class="token punctuation">}</span> <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//$index 表示循环下标 $value 表示循环的值</span>   <span class="token punctuation">{</span> <span class="token punctuation">{</span>$index<span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span>$value<span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token operator">/</span>each<span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//循环输出</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/html"</span> id<span class="token operator">=</span><span class="token string">"tpl-user"</span><span class="token operator">></span> <span class="token operator">&lt;</span>ul<span class="token operator">></span>      <span class="token punctuation">{</span> <span class="token punctuation">{</span>each hobby<span class="token punctuation">}</span> <span class="token punctuation">}</span>         <span class="token operator">&lt;</span>li<span class="token operator">></span>索引号：<span class="token punctuation">{</span> <span class="token punctuation">{</span>$index<span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>索引值：<span class="token punctuation">{</span> <span class="token punctuation">{</span>$value<span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token operator">/</span>each<span class="token punctuation">}</span> <span class="token punctuation">}</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>   <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>      hobby<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'吃饭'</span>，<span class="token string">'睡觉'</span><span class="token punctuation">]</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//调用 template 函数,id值tpl不需要#</span>   <span class="token keyword">var</span> htmlStr <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'tpl-user'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//渲染html页面</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>标准语法 – 过滤器</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span> <span class="token punctuation">{</span>value <span class="token operator">|</span> filterName<span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//value相当于是filterName的实参</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>过滤器语法类似管道操作符，它的上一个输出作为下一个输入。<br>定义过滤器的基本语法如下：</p><pre class="line-numbers language-js"><code class="language-js">template<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>imports<span class="token punctuation">.</span>filterName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*return处理的结果*/</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//处理时间</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/html"</span> id<span class="token operator">=</span><span class="token string">"tpl"</span><span class="token operator">></span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span> <span class="token punctuation">{</span>nowtime <span class="token operator">|</span> defeFormat<span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>template<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>imports<span class="token punctuation">.</span>defeFormat <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> year <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token keyword">var</span> month <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">var</span> day <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token keyword">return</span> year <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> day<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>nowtime<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> str  <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'tpl'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//调用template函数,id值tpl不需要#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="模板引擎实现原理"><a href="#模板引擎实现原理" class="headerlink" title="模板引擎实现原理"></a>模板引擎实现原理</h4><h5 id="正则与字符串操作"><a href="#正则与字符串操作" class="headerlink" title="正则与字符串操作"></a>正则与字符串操作</h5><ul><li><p>基本语法<br>exec() 函数用于检索字符串中的正则表达式的匹配。<br>如果字符串中有匹配的值，则返回该匹配值，否则返回 null。</p><pre class="line-numbers language-js"><code class="language-js">RegExpObject<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例代码如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex">/o/</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出的结果["o", index: 4, input: "hello", groups: undefined]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>分组<br>正则表达式中 ( ) 包起来的内容表示一个分组，可以通过分组来提取自己想要的内容，示例代码如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'&lt;div>我是{ {name} }&lt;/div>'</span><span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex">/{ {([a-zA-Z]+)} }/</span><span class="token keyword">var</span> patternResult <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>patternResult<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 得到 name 相关的分组信息</span><span class="token comment" spellcheck="true">//分组0为{ { name} } 分组1为name</span><span class="token comment" spellcheck="true">// ["{ {name} }", "name", index: 7, input: "&lt;div>我是{ {name} }&lt;/div>", groups: undefined]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>字符串的replace函数<br>replace() 函数用于在字符串中用一些字符替换另一些字符，返回值为替换后的新字符串，没有匹配到返回null，语法格式如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">'123456'</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 得到的 result 的值为字符串 'abc456'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例代码如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'&lt;div>我是{ {name} }&lt;/div>'</span><span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex">/{ {([a-zA-Z]+)} }/</span><span class="token keyword">var</span> patternResult <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>patternResult<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> patternResult<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// replace 函数返回值为替换后的新字符串</span><span class="token comment" spellcheck="true">// 输出的内容是：&lt;div>我是name&lt;/div></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用while循环replace</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'&lt;div>我是{{name}},今年{{ age}}岁,今天好{{  happy }}&lt;/div>'</span><span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token operator">/</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\s<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span>Z<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span>\s<span class="token operator">*</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span> <span class="token comment" spellcheck="true">//\s* 匹配空白字符</span><span class="token keyword">var</span> pat <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">while</span><span class="token punctuation">(</span>pat <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>pat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>pat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//输出 &lt;div>我是name，今年age岁了,今天好happy&lt;/div></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p> replace替换为真值</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'&lt;div>我是{{name}},今年{{ age}}岁&lt;/div>'</span><span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex">/{{\s*([a-zA-Z]+)\s*}}/</span><span class="token keyword">var</span> pat <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">while</span><span class="token punctuation">(</span>pat <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>pat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>data<span class="token punctuation">[</span>pat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//输出 &lt;div>我是张三，今年20岁&lt;/div></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="实现简易的模板引擎"><a href="#实现简易的模板引擎" class="headerlink" title="实现简易的模板引擎"></a>实现简易的模板引擎</h5><ul><li>1.实现步骤</li></ul><ol><li>定义模板结构</li><li>预调用模板引擎</li><li>封装 template 函数</li><li>导入并使用自定义的模板引擎</li></ol><ul><li><p>2.定义模板结构</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 定义模板结构 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tpl-user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"> <span class="token operator">&lt;</span>div<span class="token operator">></span>姓名：<span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span>div<span class="token operator">></span>年龄：<span class="token punctuation">{</span><span class="token punctuation">{</span> age <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span>div<span class="token operator">></span>性别：<span class="token punctuation">{</span><span class="token punctuation">{</span>  gender<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span>div<span class="token operator">></span>住址：<span class="token punctuation">{</span><span class="token punctuation">{</span>address  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>3.预调用模板引擎</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"> <span class="token comment" spellcheck="true">// 定义数据</span> <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">,</span> gender<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'北京顺义马坡'</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 调用模板函数</span> <span class="token keyword">var</span> htmlStr <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'tpl-user'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 渲染HTML结构</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'user-box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> htmlStr</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>4.封装template函数</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">template</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> str <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML  <span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex">/{{\s*([a-zA-Z]+)\s*}}/</span>  <span class="token keyword">var</span> pattResult <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pattResult <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>pattResult<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>pattResult<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> str<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>5.导入并使用自定义的模板引擎</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>自定义模板引擎<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 导入自定义的模板引擎 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/template.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Ajax加强"><a href="#Ajax加强" class="headerlink" title="Ajax加强"></a>Ajax加强</h2><h3 id="XMLHttpRequest的基本使用"><a href="#XMLHttpRequest的基本使用" class="headerlink" title="XMLHttpRequest的基本使用"></a>XMLHttpRequest的基本使用</h3><blockquote><p>XMLHttpRequest（简称 xhr）是浏览器提供的 Javascript 对象，通过它，可以<strong>请求服务器上的数据资源</strong>。之前所学的 jQuery 中的 Ajax 函数，就是基于 xhr 对象封装出来的</p></blockquote><p><img src="/images/XMLHttpRequest.png"></p><ul><li>1.使用xhr发起GET请求<br>步骤：</li></ul><ol><li>创建&nbsp;xhr&nbsp;对象</li><li>调用&nbsp;xhr.open()&nbsp;函数</li><li>调用&nbsp;xhr.send()&nbsp;函数</li><li>监听&nbsp;xhr.onreadystatechange&nbsp;事件<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. 创建 XHR 对象</span><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 调用 open 函数，指定 请求方式 与 URL地址</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'http://www.liulongbin.top:3006/api/getbooks'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3. 调用 send 函数，发起 Ajax 请求</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 4. 监听 onreadystatechange 事件</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 4.1 监听 xhr 对象的请求状态 readyState ；与服务器响应的状态 status</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//固定写法</span>     <span class="token comment" spellcheck="true">// 4.2 打印服务器响应回来的数据</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li><p>2.了解xhr对象的readyState属性<br>XMLHttpRequest 对象的 readyState 属性，用来表示当前 Ajax 请求所处的状态。每个 Ajax 请求必然处于以下状态中的一个：</p><table><thead><tr><th>值</th><th>状态</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>UNSENT</td><td>XMLHttpRequest 对象已被创建，但尚未调用 open方法。</td></tr><tr><td>1</td><td>OPENED</td><td>open()&nbsp;方法已经被调用。</td></tr><tr><td>2</td><td>HEADERS_RECEIVED</td><td>send() 方法已经被调用，响应头也已经被接收。</td></tr><tr><td>3</td><td>LOADING</td><td>数据接收中，此时 response 属性中已经包含部分数据。</td></tr><tr><td>4</td><td>DONE</td><td>Ajax 请求完成，这意味着数据传输已经彻底完成或失败。</td></tr></tbody></table></li><li><p>3.使用xhr发起带参数的GET请求<br>使用 xhr 对象发起带参数的 GET 请求时，只需在调用 xhr.open 期间，为 URL 地址指定参数即可：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ...省略不必要的代码</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'http://www.liulongbin.top:3006/api/getbooks?id=1'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ...省略不必要的代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这种在 URL 地址后面拼接的参数，叫做<strong>查询字符串</strong>。</p></li><li><p>4.查询字符串<br>定义：查询字符串（URL 参数）是指在 URL 的末尾加上用于向服务器发送信息的字符串（变量）。<br>格式：将英文的 <strong>?</strong> 放在URL 的末尾，然后再加上 <strong>参数＝值</strong> ，想加上多个参数的话，使用 <strong>&amp;</strong> 符号进行分隔。以这个形式，可以将想要发送给服务器的数据添加到 URL 中。</p><pre><code>// 不带参数的 URL 地址http://www.liulongbin.top:3006/api/getbooks// 带一个参数的 URL 地址http://www.liulongbin.top:3006/api/getbooks?id=1// 带两个参数的 URL 地址http://www.liulongbin.top:3006/api/getbooks?id=1&amp;bookname=西游记</code></pre><p>无论使用 $.ajax()，还是使用 $.get()，又或者直接使用 xhr 对象发起 GET 请求，当需要携带参数的时候，本质上，都是直接将参数以查询字符串的形式，追加到 URL 地址的后面，发送到服务器的。</p><pre class="line-numbers language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 等价于</span>$<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'url?name=zs&amp;age=20'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span> method<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span> url<span class="token punctuation">:</span> <span class="token string">'url'</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span> success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 等价于</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span> method<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span> url<span class="token punctuation">:</span> <span class="token string">'url?name=zs&amp;age=20'</span><span class="token punctuation">,</span> success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>5.URL编码与解码<br>URL 地址中，只允许出现英文相关的字母、标点符号、数字，因此，在 URL 地址中不允许出现中文字符。<br>如果 URL 中需要包含中文这样的字符，则必须对中文字符进行<strong>编码</strong>（转义）。<br> <strong>URL编码的原则</strong>：使用安全的字符（没有特殊用途或者特殊意义的可打印字符）去表示那些不安全的字符。<br> URL编码原则的通俗理解：使用<strong>英文字符</strong>去表示<strong>非英文字符</strong>，每个中文会转为三组编码</p><pre class="line-numbers language-js"><code class="language-js"><span class="token string">'http://www.liulongbin.top:3006/api/getbooks?id=1&amp;bookname=西游记'</span><span class="token comment" spellcheck="true">// 经过 URL 编码之后，URL地址变成了如下格式：</span><span class="token string">'http://www.liulongbin.top:3006/api/getbooks?id=1&amp;bookname=%E8%A5%BF%E6%B8%B8%E8%AE%B0'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>浏览器提供了 URL 编码与解码的 API，分别是：</p><ol><li>encodeURI()  编码的函数</li><li>decodeURI()  解码的函数<pre class="line-numbers language-js"><code class="language-js"><span class="token function">encodeURI</span><span class="token punctuation">(</span><span class="token string">'黑马程序员'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出字符串  %E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98</span><span class="token function">decodeURI</span><span class="token punctuation">(</span><span class="token string">'%E9%BB%91%E9%A9%AC'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出字符串  黑马</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>由于浏览器会自动对 URL 地址进行编码操作，因此，大多数情况下，程序员不需要关心 URL 地址的编码与解码操作。</li></ol></li><li><p>6.使用xhr发起POST请求<br>步骤：</p><ol><li>创建&nbsp;xhr&nbsp;对象</li><li>调用&nbsp;xhr.open()&nbsp;函数</li><li>设置&nbsp;<strong>Content-Type&nbsp;属性</strong>（固定写法）</li><li>调用&nbsp;xhr.send()&nbsp;函数，同时指定要发送的数据</li><li>监听&nbsp;xhr.onreadystatechange&nbsp;事件<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. 创建 xhr 对象</span><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 调用 open()</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'http://www.liulongbin.top:3006/api/addbook'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3. 设置 Content-Type 属性（固定写法）</span>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 4. 调用 send()，同时将数据以查询字符串的形式，提交给服务器</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'bookname=水浒传&amp;author=施耐庵&amp;publisher=天津图书出版社'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 5. 监听 onreadystatechange 事件</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul><h3 id="数据交换"><a href="#数据交换" class="headerlink" title="数据交换"></a>数据交换</h3><blockquote><p>数据交换格式，就是服务器端与客户端之间进行<strong>数据传输与交换</strong>的格式。</p></blockquote><p>前端领域，经常提及的两种数据交换格式分别是 XML 和 JSON。其中 XML 用的非常少，所以，我们重点要学习的数据交换格式就是 JSON。</p><h4 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h4><blockquote><p>XML 的英文全称是 EXtensible Markup Language，即<strong>可扩展标记语言</strong>。因此，XML 和 HTML 类似，也是一种标记语言。</p></blockquote><ul><li><p>XML格式</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span><span class="token punctuation">></span></span>ls<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>to</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span><span class="token punctuation">></span></span>zs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heading</span><span class="token punctuation">></span></span>通知<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heading</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>晚上开会<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>note</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>XML和HTML的区别<br>XML 和 HTML 虽然都是标记语言，但是，它们两者之间没有任何的关系。</p><ul><li>HTML 被设计用来描述网页上的<strong>内容</strong>，是<strong>网页内容的载体</strong></li><li>XML 被设计用来<strong>传输和存储数据</strong>，是<strong>数据的载体</strong></li></ul></li><li><p>XML的缺点</p><ul><li>XML 格式臃肿，和数据无关的代码多，体积大，传输效率低</li><li>在 Javascript 中解析 XML 比较麻烦</li></ul></li></ul><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><blockquote><p>JSON 的英文全称是 JavaScript Object Notation，即“JavaScript 对象表示法”。简单来讲，JSON 就是 <strong>Javascript 对象和数组的字符串表示法</strong>，它使用文本表示一个 JS 对象或数组的信息，因此，<strong>JSON 的本质是字符串</strong>。</p></blockquote><p><strong>作用</strong>：JSON 是一种轻量级的文本数据交换格式，在作用上类似于 XML，专门用于<strong>存储和传输数据</strong>，但是 JSON 比 XML 更小、更快、更易解析。<br><strong>现状</strong>：JSON 是在 2001 年开始被推广和使用的数据格式，到现今为止，JSON 已经成为了<strong>主流的数据交换格式</strong>。</p><ul><li><p>JSON的两种结构<br> <strong>对象结构</strong>：对象结构在 JSON 中表示为 { } 括起来的内容。数据结构为 { key: value, key: value, … } 的键值对结构。其中，key 必须是使用<strong>英文的双引号</strong>包裹的字符串，value 的数据类型可以是<strong>数字、字符串、布尔值、null、数组、对象</strong>6种类型。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span> //属性都要用双引号包括 <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"zs"</span><span class="token punctuation">,</span> <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token property">"gender"</span><span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token property">"address"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span> <span class="token property">"hobby"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"吃饭"</span><span class="token punctuation">,</span> <span class="token string">"睡觉"</span><span class="token punctuation">,</span> <span class="token string">"打豆豆"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">"others"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"mobile"</span><span class="token operator">:</span><span class="token number">12345678910</span> <span class="token punctuation">,</span> <span class="token property">"email"</span><span class="token operator">:</span><span class="token string">"123@qq.com"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>数组结构</strong>：数组结构在 JSON 中表示为 [ ] 括起来的内容。数据结构为 [ “java”, “javascript”, 30, true … ] 。数组中数据的类型可以是<strong>数字、字符串、布尔值、null、数组、对象</strong>6种类型。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">[</span> <span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"python"</span><span class="token punctuation">,</span> <span class="token string">"php"</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300.5</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token null">null</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"zs"</span><span class="token punctuation">,</span> <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ls"</span><span class="token punctuation">,</span> <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token string">"苹果"</span><span class="token punctuation">,</span> <span class="token string">"榴莲"</span><span class="token punctuation">,</span> <span class="token string">"椰子"</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>JSON语法注意事项</p><ol><li>属性名必须使用双引号包裹</li><li>字符串类型的值必须使用双引号包裹</li><li>JSON 中不允许使用单引号表示字符串</li><li>JSON 中<strong>不能写注释</strong></li><li>JSON 的最外层必须是对象或数组格式</li><li>不能使用 undefined 或函数作为 JSON 的值</li></ol><p> <strong>JSON 的作用</strong>：在计算机与网络之间存储和传输数据<br> <strong>JSON 的本质</strong>：用<strong>字符串</strong>来表示 Javascript 对象*数据或数组数据</p></li><li><p>JSON和JS对象的关系<br>JSON 是 JS 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，<strong>本质是一个字符串</strong>。例如：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//这是一个对象</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token string">'World'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这是一个 JSON 字符串，本质是一个字符串</span><span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token string">'{"a": "Hello", "b": "World"}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>JSON和JS对象的互转<br>要实现从 JSON 字符串转换为 JS 对象，使用 JSON.parse() 方法：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'{"a": "Hello", "b": "World"}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//结果是 {a: 'Hello', b: 'World'}</span><span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token string">'{"a": "Hello", "b": "World"}'</span><span class="token keyword">var</span> obj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//结果是 {a: 'Hello', b: 'World'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>要实现从 JS 对象转换为 JSON 字符串，使用 JSON.stringify() 方法：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token string">'World'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//结果是 '{"a": "Hello", "b": "World"}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>序列化和反序列化</p><ol><li>把数据对象转换为字符串的过程，叫做<strong>序列化</strong>，例如：调用 JSON.stringify() 函数的操作，叫做 JSON 序列化。</li><li>把字符串转换为数据对象的过程，叫做<strong>反序列化</strong>，例如：调用 JSON.parse() 函数的操作，叫做 JSON 反序列化。</li></ol></li></ul><h3 id="封装自己的Ajax函数"><a href="#封装自己的Ajax函数" class="headerlink" title="封装自己的Ajax函数"></a>封装自己的Ajax函数</h3><ul><li><p>1.要实现的效果</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 1. 导入自定义的ajax函数库 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./itheima.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">   <span class="token comment" spellcheck="true">// 2. 调用自定义的 itheima 函数，发起 Ajax 数据请求</span>   <span class="token function">itheima</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      method<span class="token punctuation">:</span> <span class="token string">'请求类型'</span><span class="token punctuation">,</span>      url<span class="token punctuation">:</span> <span class="token string">'请求地址'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 请求参数对象 */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 成功的回调函数</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 打印数据</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>2.定义options参数选项<br>itheima() 函数是我们自定义的 Ajax 函数，它接收一个配置对象作为参数，配置对象中可以配置如下属性：</p><ol><li>method   请求的类型</li><li>url           请求的 URL 地址</li><li>data        请求携带的数据</li><li>success   请求成功之后的回调函数</li></ol></li><li><p>3.处理data参数<br>需要把 data 对象，转化成查询字符串的格式，从而提交给服务器，因此提前定义 resolveData 函数如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 处理 data 参数 * @param {data} 需要发送到服务器的数据 * @returns {string} 返回拼接好的查询字符串 name=zs&amp;age=10 */</span><span class="token keyword">function</span> <span class="token function">resolveData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>4.定义itheima函数<br>在 itheima() 函数中，需要创建 xhr 对象，并监听 onreadystatechange 事件：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">itheima</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 拼接查询字符串</span>  <span class="token keyword">var</span> qs <span class="token operator">=</span> <span class="token function">resolveData</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 监听请求状态改变的事件</span>  xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> result <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>      options<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>5.判断请求的类型<br>不同的请求类型，对应 xhr 对象的不同操作，因此需要对请求类型进行 if … else … 的判断：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'GET'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 发起 GET 请求</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>method<span class="token punctuation">,</span> options<span class="token punctuation">.</span>url <span class="token operator">+</span> <span class="token string">'?'</span> <span class="token operator">+</span> qs<span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'POST'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 发起 POST 请求</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>method<span class="token punctuation">,</span> options<span class="token punctuation">.</span>url<span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>qs<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>6.发起请求<br>发起get请求</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">itheima</span><span class="token punctuation">(</span><span class="token punctuation">{</span>method<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>url<span class="token punctuation">:</span> <span class="token string">'http://www.liulongbin.top:3006/api/getbooks'</span><span class="token punctuation">,</span>data<span class="token punctuation">:</span> <span class="token punctuation">{</span>  id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发起post请求</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">itheima</span><span class="token punctuation">(</span><span class="token punctuation">{</span> method<span class="token punctuation">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span> url<span class="token punctuation">:</span> <span class="token string">'http://www.liulongbin.top:3006/api/addbook'</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    bookname<span class="token punctuation">:</span> <span class="token string">'水浒传'</span><span class="token punctuation">,</span>    author<span class="token punctuation">:</span> <span class="token string">'施耐庵'</span><span class="token punctuation">,</span>    publisher<span class="token punctuation">:</span> <span class="token string">'北京图书出版社'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="XMLHttpRequest-Level2的新特性"><a href="#XMLHttpRequest-Level2的新特性" class="headerlink" title="XMLHttpRequest Level2的新特性"></a>XMLHttpRequest Level2的新特性</h3><h4 id="认识XMLHttpRequest-Level2"><a href="#认识XMLHttpRequest-Level2" class="headerlink" title="认识XMLHttpRequest Level2"></a>认识XMLHttpRequest Level2</h4><ul><li>旧版XMLHttpRequest的缺点<ol><li>只支持文本数据的传输，无法用来读取和上传文件</li><li>传送和接收数据时，没有进度信息，只能提示有没有完成</li></ol></li><li>XMLHttpRequest Level2的新功能<ol><li>可以设置 HTTP 请求的时限</li><li>可以使用 FormData 对象管理表单数据</li><li>可以上传文件</li><li>可以获得数据传输的进度信息</li></ol></li></ul><h4 id="设置HTTP请求时限"><a href="#设置HTTP请求时限" class="headerlink" title="设置HTTP请求时限"></a>设置HTTP请求时限</h4><p>有时，Ajax 操作很耗时，而且无法预知要花多少时间。如果网速很慢，用户可能要等很久。新版本的 XMLHttpRequest 对象，增加了 <strong>timeout</strong> 属性，可以设置 HTTP 请求的时限：</p><pre class="line-numbers language-js"><code class="language-js">xhr<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">3000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的语句，将最长等待时间设为 3000 毫秒。过了这个时限，就自动停止HTTP请求。与之配套的还有一个 <strong>timeout事件</strong>，用<strong>ontimeout</strong>来指定回调函数：</p><pre class="line-numbers language-js"><code class="language-js"> xhr<span class="token punctuation">.</span>ontimeout <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'请求超时！'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="FormData对象管理表单数据"><a href="#FormData对象管理表单数据" class="headerlink" title="FormData对象管理表单数据"></a>FormData对象管理表单数据</h4><blockquote><p>Ajax 操作往往用来提交表单数据。为了方便表单处理，HTML5 新增了一个 FormData 对象</p></blockquote><p>模拟表单操作：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. 新建 FormData 对象</span><span class="token keyword">var</span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 为 FormData 添加表单项</span>fd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'uname'</span><span class="token punctuation">,</span> <span class="token string">'zs'</span><span class="token punctuation">)</span>fd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'upwd'</span><span class="token punctuation">,</span> <span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3. 创建 XHR 对象</span><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 4. 指定请求类型与URL地址</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'http://www.liulongbin.top:3006/api/formdata'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 5. 直接提交 FormData 对象，这与提交网页表单的效果，完全一样</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>FormData对象也可以用来获取网页表单的值，示例代码如下：</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 获取表单元素</span> <span class="token keyword">var</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#form1'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 监听表单元素的 submit 事件</span> form<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 根据 form 表单创建 FormData 对象，会自动将表单数据填充到 FormData 对象中</span>     <span class="token keyword">var</span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span>     <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'http://www.liulongbin.top:3006/api/formdata'</span><span class="token punctuation">)</span>     xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span>     xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h4><blockquote><p>新版 XMLHttpRequest 对象，不仅可以发送文本信息，还可以上传文件。</p></blockquote><p>实现步骤：</p><ol><li>定义 UI 结构</li><li>验证是否选择了文件</li><li>向 FormData 中追加文件</li><li>使用 xhr 发起上传文件的请求</li><li>监听 onreadystatechange 事件</li></ol><ul><li><p>1.定义UI结构</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 1. 文件选择框 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 2. 上传按钮 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnUpload<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上传文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 3. 显示上传到服务器上的图片 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>800<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>2.验证是否选择了文件</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. 获取上传文件的按钮</span><span class="token keyword">var</span> btnUpload <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#btnUpload'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 为按钮添加 click 事件监听</span>btnUpload<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 3. 获取到选择的文件列表</span> <span class="token keyword">var</span> files <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#file1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>files <span class="token keyword">if</span> <span class="token punctuation">(</span>files<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'请选择要上传的文件！'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// ...后续业务逻辑</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>3.向FormData中追加文件</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. 创建 FormData 对象</span><span class="token keyword">var</span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 向 FormData 中追加文件</span>fd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'avatar'</span><span class="token punctuation">,</span> files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>4.使用 xhr 发起上传文件的请求</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. 创建 xhr 对象</span><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 调用 open 函数，指定请求类型与URL地址。其中，请求类型必须为 POST</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'http://www.liulongbin.top:3006/api/upload/avatar'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3. 发起请求</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>5.监听onreadystatechange事件</p><pre class="line-numbers language-js"><code class="language-js">xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//转化为对象</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 上传文件成功</span>    <span class="token comment" spellcheck="true">// 将服务器返回的图片地址，设置为 &lt;img> 标签的 src 属性</span>    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://www.liulongbin.top:3006'</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>url  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 上传文件失败</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="显示文件上传进度"><a href="#显示文件上传进度" class="headerlink" title="显示文件上传进度"></a>显示文件上传进度</h4><blockquote><p>新版本的 XMLHttpRequest 对象中，可以通过监听 <strong>xhr.upload.onprogress</strong> 事件，来获取到文件的上传进度</p></blockquote><p>语法格式如下：</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 创建 XHR 对象</span> <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 监听 xhr.upload 的 onprogress 事件</span> xhr<span class="token punctuation">.</span>upload<span class="token punctuation">.</span>onprogress <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// e.lengthComputable 是一个布尔值，表示当前上传的资源是否具有可计算的长度</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>lengthComputable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// e.loaded 已传输的字节</span>        <span class="token comment" spellcheck="true">// e.total  需传输的总字节</span>        <span class="token keyword">var</span> percentComplete <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>loaded <span class="token operator">/</span> e<span class="token punctuation">.</span>total<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>1.导入需要的库<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./lib/bootstrap.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./lib/jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>2.基于Bootstrap渲染进度条<pre class="line-numbers language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!-- 进度条 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>progress<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">0</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>progress-bar progress-bar-info progress-bar-striped active<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>percent<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0%</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        0%      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>3.监听上传进度的事件<pre class="line-numbers language-js"><code class="language-js">xhr<span class="token punctuation">.</span>upload<span class="token punctuation">.</span>onprogress <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>lengthComputable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 1. 计算出当前上传进度的百分比</span> <span class="token keyword">var</span> percentComplete <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>loaded <span class="token operator">/</span> e<span class="token punctuation">.</span>total<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#percent'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 2. 设置进度条的宽度</span>    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">,</span> <span class="token string">'width:'</span> <span class="token operator">+</span> percentComplete <span class="token operator">+</span> <span class="token string">'%'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 3. 显示当前的上传进度百分比</span>    <span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>percentComplete <span class="token operator">+</span> <span class="token string">'%'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>4.监听上传完成的事件<pre class="line-numbers language-js"><code class="language-js">xhr<span class="token punctuation">.</span>upload<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#percent'</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// 移除上传中的类样式</span>       <span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// 添加上传完成的类样式</span>       <span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'progress-bar progress-bar-success'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="jQuery高级用法"><a href="#jQuery高级用法" class="headerlink" title="jQuery高级用法"></a>jQuery高级用法</h3><h4 id="jQuery实现文件上传"><a href="#jQuery实现文件上传" class="headerlink" title="jQuery实现文件上传"></a>jQuery实现文件上传</h4><ul><li><p>1.定义UI结构</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 导入 jQuery --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./lib/jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 文件选择框 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 上传文件按钮 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnUpload<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>2.验证是否选择了文件</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btnUpload'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 1. 将 jQuery 对象转化为 DOM 对象，并获取选中的文件列表</span>   <span class="token keyword">var</span> files <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#file1'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>files   <span class="token comment" spellcheck="true">// 2. 判断是否选择了文件</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>files<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'请选择文件后再上传！'</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p> 3.向FormData中追加文件</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 向 FormData 中追加文件</span><span class="token keyword">var</span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'avatar'</span><span class="token punctuation">,</span> files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>4.使用jQuery发起上传文件的请求</p><pre class="line-numbers language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span> method<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span> url<span class="token punctuation">:</span> <span class="token string">'http://www.liulongbin.top:3006/api/upload/avatar'</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> fd<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 不修改 Content-Type 属性，使用 FormData 默认的 Content-Type 值</span> contentType<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 不对 FormData 中的数据进行 url 编码，而是将 FormData 数据原样发送到服务器</span> processData<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="jQuery实现loading效果"><a href="#jQuery实现loading效果" class="headerlink" title="jQuery实现loading效果"></a>jQuery实现loading效果</h4><ul><li>ajaxStart(callback)<br>Ajax 请求<strong>开始</strong>时，执行 ajaxStart 函数。可以在 ajaxStart 的 callback 中显示 loading 效果，示例代码如下：<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 自 jQuery 版本 1.8 起，该方法只能被附加到文档</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ajaxStart</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#loading'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>注意： $(document).ajaxStart() 函数<strong>会监听当前文档内所有的 Ajax 请求</strong>。</li><li>ajaxStop(callback)<br>Ajax 请求<strong>结束</strong>时，执行 ajaxStop 函数。可以在 ajaxStop 的 callback 中隐藏 loading 效果，示例代码如下：<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 自 jQuery 版本 1.8 起，该方法只能被附加到文档</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ajaxStop</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#loading'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><blockquote><p>Axios 是专注于<strong>网络数据请求</strong>的库，相比于原生的 XMLHttpRequest 对象，axios 简单易用，相比于 jQuery，axios 更加<strong>轻量化</strong>，只专注于<strong>网络数据请求</strong></p></blockquote><ul><li><p>axios发起GET请求<br>axios 发起 get 请求的语法：</p><pre class="line-numbers language-js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> params<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*参数*/</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体的请求示例如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 请求的 URL 地址</span><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">'http://www.liulongbin.top:3006/api/get'</span><span class="token comment" spellcheck="true">// 请求的参数对象</span><span class="token keyword">var</span> paramsObj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 调用 axios.get() 发起 GET 请求</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> params<span class="token punctuation">:</span> paramsObj <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// res.data 是服务器返回的数据</span> <span class="token keyword">var</span> result <span class="token operator">=</span> res<span class="token punctuation">.</span>data console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>axios发起POST请求<br>axios 发起 post 请求的语法：</p><pre class="line-numbers language-js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*参数*/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体的请求示例如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 请求的 URL 地址</span><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">'http://www.liulongbin.top:3006/api/post'</span><span class="token comment" spellcheck="true">// 要提交到服务器的数据</span><span class="token keyword">var</span> dataObj <span class="token operator">=</span> <span class="token punctuation">{</span> location<span class="token punctuation">:</span> <span class="token string">'北京'</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'顺义'</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 调用 axios.post() 发起 POST 请求</span>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> dataObj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// res.data 是服务器返回的数据</span> <span class="token keyword">var</span> result <span class="token operator">=</span> res<span class="token punctuation">.</span>data console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>直接使用axios发起请求<br>axios 也提供了类似于 jQuery 中 $.ajax() 的函数，语法如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span> method<span class="token punctuation">:</span> <span class="token string">'请求类型'</span><span class="token punctuation">,</span> url<span class="token punctuation">:</span> <span class="token string">'请求的URL地址'</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* POST数据 */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> params<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* GET参数 */</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//直接使用axios发起GET请求</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span> method<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span> url<span class="token punctuation">:</span> <span class="token string">'http://www.liulongbin.top:3006/api/get'</span><span class="token punctuation">,</span> params<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// GET 参数要通过 params 属性提供</span>    name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span>         age<span class="token punctuation">:</span> <span class="token number">20</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//直接使用axios发起POST请求</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span> method<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span> url<span class="token punctuation">:</span> <span class="token string">'http://www.liulongbin.top:3006/api/post'</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// POST 数据要通过 data 属性提供</span>    bookname<span class="token punctuation">:</span> <span class="token string">'程序员的自我修养'</span><span class="token punctuation">,</span>         price<span class="token punctuation">:</span> <span class="token number">666</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="跨域与JSONP"><a href="#跨域与JSONP" class="headerlink" title="跨域与JSONP"></a>跨域与JSONP</h2><h3 id="同源策略和跨域"><a href="#同源策略和跨域" class="headerlink" title="同源策略和跨域"></a>同源策略和跨域</h3><ul><li>同源策略</li></ul><blockquote><p>如果两个页面的<strong>协议</strong>，<strong>域名</strong>和<strong>端口</strong>都相同，则两个页面具有<strong>相同的源</strong>。<br>同源策略（英文全称 Same origin policy）是<strong>浏览器</strong>提供的一个<strong>安全功能</strong>。</p></blockquote><p>MDN 官方给定的概念：同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。<br>通俗的理解：浏览器规定，A 网站的 JavaScript，不允许和<strong>非同源</strong>的网站 C 之间，进行资源的交互，例如：</p><ol><li>无法读取非同源网页的 Cookie、LocalStorage 和 IndexedDB</li><li>无法接触非同源网页的 DOM</li><li>无法向非同源地址发送 Ajax 请求</li></ol><ul><li>跨域</li></ul><blockquote><p>同源指的是两个 URL 的协议、域名、端口一致，反之，则是跨域</p></blockquote><p>出现跨域的根本原因：<strong>浏览器的同源策略</strong>不允许非同源的 URL 之间进行资源的交互。<br>网页：<a href="http://www.test.com/index.html">http://www.test.com/index.html</a><br>接口：<a href="http://www.api.com/userlist">http://www.api.com/userlist</a><br><img src="/images/%E8%B7%A8%E5%9F%9F.png"><br>注意：浏览器允许发起跨域请求，但是，跨域请求回来的数据，会被浏览器拦截，无法被页面获取到！<br>现如今，实现跨域数据请求，最主要的两种解决方案，分别是 <strong>JSONP</strong> 和 <strong>CORS</strong>。<br>JSONP：出现的早，兼容性好（兼容低版本IE）。是前端程序员为了解决跨域问题，被迫想出来的一种<strong>临时解决方案</strong>。缺点是<strong>只支持 GET 请求</strong>，不支持 POST 请求。<br>CORS：出现的较晚，它是 W3C 标准，属于跨域 Ajax 请求的<strong>根本解决</strong>方案。支持 GET 和 POST 请求。缺点是不兼容某些低版本的浏览器</p><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><blockquote><p>JSONP (JSON with Padding) 是 JSON 的一种“使用模式”，可用于解决主流浏览器的跨域数据访问的问题。</p></blockquote><ul><li><p>JSONP的实现原理<br>由于<strong>浏览器同源策略</strong>的限制，网页中<strong>无法通过 Ajax 请求非同源的接口数据</strong>。但是 script标签不受浏览器同源策略的影响，可以通过 src 属性，请求非同源的 js 脚本。<br>因此，JSONP 的实现原理，就是通过 script 标签的 src 属性，请求跨域的数据接口，并通过<strong>函数调用</strong>的形式，接收跨域接口响应回来的数据</p></li><li><p>简单的JSONP<br>定义一个 success 回调函数：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"> <span class="token keyword">function</span> <span class="token function">success</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'获取到了data数据：'</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 script 标签，请求接口数据：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://ajax.frontend.itheima.net:3006/api/jsonp?callback<span class="token punctuation">=</span>success&amp;name<span class="token punctuation">=</span>zs&amp;age<span class="token punctuation">=</span>20<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>JSONP的缺点<br>由于 JSONP 是通过 script 标签的 src 属性，来实现跨域数据获取的，所以，JSONP 只支持 GET 数据请求，不支持 POST 请求。<br>注意：<strong>JSONP 和 Ajax</strong> 之间没有任何关系，不能把 JSONP 请求数据的方式叫做 Ajax，因为 JSONP 没有用到 XMLHttpRequest 这个对象。</p></li><li><p>jQuery中的JSONP<br>jQuery 提供的 $.ajax() 函数，除了可以发起真正的 Ajax 数据请求之外，还能够发起 JSONP 数据请求，例如</p><pre class="line-numbers language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//?参数的方式添加参数</span>  url<span class="token punctuation">:</span> <span class="token string">'http://ajax.frontend.itheima.net:3006/api/jsonp?name=zs&amp;age=20'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 如果要使用 $.ajax() 发起 JSONP 请求，必须指定 datatype 为 jsonp</span>  dataType<span class="token punctuation">:</span> <span class="token string">'jsonp'</span><span class="token punctuation">,</span>  success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下，使用 jQuery 发起 JSONP 请求，会自动携带一个 <strong>callback=jQueryxxx</strong> 的参数，jQueryxxx 是随机生成的一个回调函数名称。</p></li><li><p>自定义参数及回调函数名称<br>在使用 jQuery 发起 JSONP 请求时，如果想要自定义 JSONP 的<strong>参数</strong>以及<strong>回调函数</strong>名称，可以通过如下两个参数来指定：</p><pre class="line-numbers language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span> <span class="token string">'http://ajax.frontend.itheima.net:3006/api/jsonp?name=zs&amp;age=20'</span><span class="token punctuation">,</span>  dataType<span class="token punctuation">:</span> <span class="token string">'jsonp'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 发送到服务端的参数名称，默认值为 callback</span>  jsonp<span class="token punctuation">:</span> <span class="token string">'callback'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 自定义的回调函数名称，默认值为 jQueryxxx 格式</span>  jsonpCallback<span class="token punctuation">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span>  success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>jQuery中JSONP的实现过程<br>jQuery 中的 JSONP，也是通过 script 标签的 src 属性实现跨域数据访问的，只不过，jQuery 采用的是<strong>动态创建和移除</strong> script 标签的方式，来发起 JSONP 数据请求。</p></li></ul><ol><li>在<strong>发起 JSONP 请求</strong>的时候，<strong>动态</strong>向 header 中 append 一个 script 标签；</li><li>在 <strong>JSONP 请求成功</strong>以后，动态从 header 中移除刚才 append 进去的 script 标签；</li></ol><h3 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h3><h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><blockquote><p><strong>防抖策略</strong>（debounce）是当事件被触发后，<strong>延迟 n 秒</strong>后再<strong>执行回调</strong>，如果在<strong>这 n 秒内事件又被触发</strong>，则<strong>重新计时</strong>。</p></blockquote><p><strong>比如</strong>：<br>用户在输入框中连续输入一串字符时，可以通过防抖策略，只在输入完后，才执行查询的请求，这样可以有效减少请求次数，节约请求资源；<br><img src="/images/%E9%98%B2%E6%8A%96.png"></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>                    <span class="token comment" spellcheck="true">// 1. 防抖动的 timer</span><span class="token keyword">function</span> <span class="token function">debounceSearch</span><span class="token punctuation">(</span>keywords<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 2. 定义防抖的函数</span>   timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 发起 JSONP 请求</span>   <span class="token function">getSuggestList</span><span class="token punctuation">(</span>keywords<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#ipt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 3. 在触发 keyup 事件时，立即清空 timer</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// ...省略其他代码</span>   <span class="token function">debounceSearch</span><span class="token punctuation">(</span>keywords<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4><blockquote><p><strong>节流策略</strong>（throttle），顾名思义，可以减少一段时间内事件的触发频率。</p></blockquote><p><strong>应用场景</strong>：</p><ol><li>鼠标连续不断地触发某事件（如点击），只在单位时间内只触发一次；</li><li>懒加载时要监听计算滚动条的位置，但不必每次滑动都触发，可以降低计算的频率，而不必去浪费 CPU 资源；</li></ol><p><strong>节流阀</strong>：</p><ol><li>节流阀为空，表示可以执行下次操作；不为空，表示不能执行下次操作。</li><li>当前操作执行完，必须将节流阀重置为空，表示可以执行下次操作了。</li><li>每次执行操作前，必须先判断节流阀是否为空。</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> angel <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#angel'</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">// 1.预定义一个 timer 节流阀</span>  <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 3.判断节流阀是否为空，如果不为空，则证明距离上次执行间隔不足16毫秒</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span>angel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'left'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>pageX <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'top'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>pageY <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">)</span>      timer <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">// 2.当设置了鼠标跟随效果后，清空 timer 节流阀，方便下次开启延时器</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>总结防抖和节流的区别<ul><li>防抖：如果事件被频繁触发，防抖能保证<strong>只有最有一次触发生效</strong>！前面 N 多次的触发都会被忽略！</li><li>节流：如果事件被频繁触发，节流能够<strong>减少事件触发的频率</strong>，因此，节流是<strong>有选择性</strong>地执行一部分事件！</li></ul></li></ul><h2 id="HTTP协议加强"><a href="#HTTP协议加强" class="headerlink" title="HTTP协议加强"></a>HTTP协议加强</h2><h3 id="HTTP协议简介"><a href="#HTTP协议简介" class="headerlink" title="HTTP协议简介"></a>HTTP协议简介</h3><h4 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h4><blockquote><p>通信，就是<strong>信息的传递和交换</strong>。</p></blockquote><p>通信三要素：</p><ol><li>通信的<strong>主体</strong></li><li>通信的<strong>内容</strong></li><li>通信的<strong>方式</strong></li></ol><p>案例：<strong>服务器</strong>把<strong>传智专修学院的简介</strong>通过<strong>响应</strong>的方式发送给<strong>客户端浏览器</strong>。<br>其中，<br>通信的<strong>主体</strong>是<strong>服务器和客户端浏览器</strong>；<br>通信的<strong>内容</strong>是<strong>传智专修学院的简介</strong>；<br>通信的<strong>方式</strong>是<strong>响应</strong>；</p><h4 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h4><blockquote><p><strong>通信协议</strong>（Communication Protocol）是指通信的双方完成通信所<strong>必须遵守</strong>的<strong>规则和约定</strong>。<br>通俗的理解：通信双方<strong>采用约定好的格式</strong>来发送和接收消息，这种<strong>事先约定好的通信格式，就叫做通信协议</strong>。</p></blockquote><p>互联网中的通信协议<br>客户端与服务器之间要实现<strong>网页内容</strong>的传输，则通信的双方必须遵守<strong>网页内容的传输协议</strong>。<br><strong>网页内容</strong>又叫做<strong>超文本</strong>，因此<strong>网页内容的传输协议</strong>又叫做<strong>超文本传输协议</strong>（HyperText Transfer Protocol） ，简称<strong>HTTP 协议</strong>。</p><h4 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h4><blockquote><p><strong>HTTP 协议</strong>即超文本传送协议 (HyperText Transfer Protocol) ，它规定了客户端与服务器之间进行网页内容传输时，所必须遵守的传输格式。</p></blockquote><p>例如：</p><ol><li><strong>客户端</strong>要以HTTP协议要求的格式把数据<strong>提交</strong>到<strong>服务器</strong></li><li><strong>服务器</strong>要以HTTP协议要求的格式把内容<strong>响应</strong>给<strong>客户端</strong></li></ol><ul><li>HTTP协议的交互模型<br>HTTP 协议采用了 请求/响应 的交互模型。<br><img src="/images/HTTP%E5%8D%8F%E8%AE%AE.png"></li></ul><h3 id="HTTP请求消息"><a href="#HTTP请求消息" class="headerlink" title="HTTP请求消息"></a>HTTP请求消息</h3><blockquote><p>由于 HTTP 协议属于客户端浏览器和服务器之间的通信协议。因此，<strong>客户端发起的请求</strong>叫做<strong>HTTP 请求</strong>，<strong>客户端发送到服务器的消息</strong>，叫做 <strong>HTTP 请求消息</strong>。</p></blockquote><p>HTTP请求消息的组成部分:<br>HTTP 请求消息由<strong>请求行</strong>（request line）、<strong>请求头部</strong>（ header ） 、<strong>空行</strong> 和 <strong>请求体</strong> 4 个部分组成。<br><img src="/images/HTTP%E8%AF%B7%E6%B1%82%E6%B6%88%E6%81%AF.png"></p><ul><li><p>请求行<br> <strong>请求行</strong>由<strong>请求方式</strong>、<strong>URL</strong> 和 <strong>HTTP 协议版本</strong> 3 个部分组成，他们之间使用空格隔开。</p></li><li><p>请求头部<br> <strong>请求头部</strong>用来描述<strong>客户端的基本信息</strong>，从而把客户端相关的信息告知服务器。比如：User-Agent 用来说明当前是什么类型的浏览器；Content-Type 用来描述发送到服务器的数据格式；Accept 用来描述客户端能够接收什么类型的返回内容；Accept-Language 用来描述客户端期望接收哪种人类语言的文本内容。<br> 常见的请求头字段<br><img src="/images/HTTP%E8%AF%B7%E6%B1%82%E5%A4%B4%E9%83%A8.png"></p></li><li><p>空行<br>最后一个请求头字段的后面是一个<strong>空行</strong>，通知服务器<strong>请求头部至此结束</strong>。<br>请求消息中的空行，用来分隔<strong>请求头部</strong>与<strong>请求体</strong>。</p></li><li><p>请求体<br>请求体中存放的，是要通过 POST 方式提交到服务器的数据。<br><img src="/images/HTTP%E8%AF%B7%E6%B1%82%E4%BD%93.png"></p></li></ul><p><strong>注意</strong>：只有 POST 请求才有请求体，GET 请求没有请求体！</p><h3 id="HTTP响应消息"><a href="#HTTP响应消息" class="headerlink" title="HTTP响应消息"></a>HTTP响应消息</h3><blockquote><p><strong>响应消息</strong>就是<strong>服务器响应给客户端的消息内容</strong>，也叫作<strong>响应报文</strong>。</p></blockquote><p>HTTP响应消息的组成部分:<br>HTTP响应消息由<strong>状态行</strong>、<strong>响应头部</strong>、<strong>空行</strong> 和 <strong>响应体</strong> 4 个部分组成，如下图所示：<br><img src="/images/HTTP%E6%B6%88%E6%81%AF%E5%93%8D%E5%BA%94.png"></p><ul><li>状态行<br> <strong>状态行</strong>由 <strong>HTTP 协议版本</strong>、<strong>状态码</strong>和<strong>状态码的描述文本</strong> 3 个部分组成，他们之间使用空格隔开</li><li>响应头部<br> <strong>响应头部</strong>用来描述<strong>服务器的基本信息</strong>。响应头部由多行 <strong>键/值对</strong> 组成，每行的键和值之间用英文的冒号分隔。<br> 关于更多响应头字段的描述，可以查看 MDN 官方文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers</a></li><li>空行<br> 在最后一个响应头部字段结束之后，会紧跟一个<strong>空行</strong>，用来通知客户端<strong>响应头部至此结束</strong>。<br> 响应消息中的空行，用来分隔<strong>响应头部</strong>与<strong>响应体</strong>。</li><li>响应体<br> 响应体中存放的，是服务器响应给客户端的资源内容。</li></ul><h3 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h3><blockquote><p>HTTP 请求方法，属于 HTTP 协议中的一部分，请求方法的作用是：用来表明<strong>要对服务器上的资源执行的操作</strong>。最常用的请求方法是 GET 和 POST。</p></blockquote><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>GET</td><td>(查询)发送请求来获得服务器上的资源，请求体中不会包含请求数据，请求数据放在协议头中。</td></tr><tr><td>2</td><td>POST</td><td>(新增)向服务器提交资源（例如提交表单或上传文件）。数据被包含在请求体中提交给服务器。</td></tr><tr><td>3</td><td>PUT</td><td>(修改)向服务器提交资源，并使用提交的新资源，替换掉服务器对应的旧资源。</td></tr><tr><td>4</td><td>DELETE</td><td>(删除)请求服务器删除指定的资源。</td></tr><tr><td>5</td><td>HEAD    HEAD</td><td>方法请求一个与 GET 请求的响应相同的响应，但没有响应体。</td></tr><tr><td>6</td><td>OPTIONS</td><td>获取http服务器支持的http请求方法，允许客户端查看服务器的性能，比如ajax跨域时的预检等。</td></tr><tr><td>7</td><td>CONNECT</td><td>建立一个到由目标资源标识的服务器的隧道。</td></tr><tr><td>8</td><td>TRACE</td><td>沿着到目标资源的路径执行一个消息环回测试，主要用于测试或诊断。</td></tr><tr><td>9</td><td>PATCH</td><td>是对 PUT 方法的补充，用来对已知资源进行局部更新 。</td></tr></tbody></table><h3 id="HTTP响应状态代码"><a href="#HTTP响应状态代码" class="headerlink" title="HTTP响应状态代码"></a>HTTP响应状态代码</h3><blockquote><p><strong>HTTP 响应状态码</strong>（HTTP Status Code），也属于 HTTP 协议的一部分，<strong>用来标识响应的状态</strong>。</p></blockquote><p>响应状态码会随着响应消息一起被发送至客户端浏览器，浏览器根据服务器返回的响应状态码，就能知道这次 HTTP 请求的结果是成功还是失败了。</p><ul><li><p>HTTP响应状态码的组成及分类<br>HTTP 状态码由<strong>三个十进制数字</strong>组成，<strong>第一个十进制数字</strong>定义了<strong>状态码的类型</strong>，后两个数字用来对状态码进行细分。<br>HTTP 状态码共分为 5 种类型：<br><img src="/images/HTTP%E7%8A%B6%E6%80%81%E6%A8%A1%E5%9E%8B.png"><br>完整的 HTTP 响应状态码，可以参考 MDN 官方文档 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status</a></p><ul><li><p>2** 成功相关的响应状态码<br>2** 范围的状态码，表示服务器已成功接收到请求并进行处理。常见的 2** 类型的状态码如下：</p><table><thead><tr><th>状态码</th><th>状态码英文名称</th><th>中文描述</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>请求成功。一般用于 GET 与 POST 请求</td></tr><tr><td>201</td><td>Created</td><td>已创建。成功请求并创建了新的资源，通常用于 POST 或 PUT 请求</td></tr></tbody></table></li><li><p>3** 重定向相关的响应状态码<br>3** 范围的状态码，表示表示服务器要求客户端重定向，需要客户端进一步的操作以完成资源的请求。常见的 3** 类型的状态码如下：</p><table><thead><tr><th>状态码</th><th>状态码英文名称</th><th>中文描述</th></tr></thead><tbody><tr><td>301</td><td>Moved Permanently</td><td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td>302</td><td>Found</td><td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td>304</td><td>Not Modified</td><td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源（响应消息中不包含响应体）。客户端通常会缓存访问过的资源。</td></tr></tbody></table></li><li><p>4** 客户端错误相关的响应状态码<br>4** 范围的状态码，表示客户端的请求有非法内容，从而导致这次请求失败。常见的 4** 类型的状态码如下：</p><table><thead><tr><th>状态码</th><th>状态码英文名称</th><th>中文描述</th></tr></thead><tbody><tr><td>400</td><td></td><td>Bad Request</td></tr><tr><td>401</td><td></td><td>Unauthorized</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器已经理解请求，但是拒绝执行它。</td></tr><tr><td>404</td><td>Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）。</td></tr><tr><td>408</td><td>Request Timeout</td><td>请求超时。服务器等待客户端发送的请求时间过长，超时。</td></tr></tbody></table></li><li><p>5** 服务端错误相关的响应状态码<br>5** 范围的状态码，表示服务器未能正常处理客户端的请求而出现意外错误。常见的 5** 类型的状态码如下：</p><table><thead><tr><th>状态码</th><th>状态码英文名称</th><th>中文描述</th></tr></thead><tbody><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误，无法完成请求。</td></tr><tr><td>501</td><td>Not Implemented</td><td>服务器不支持该请求方法，无法完成请求。只有 GET 和 HEAD 请求方法是要求每个服务器必须支持的，其它请求方法在不支持的服务器上会返501</td></tr><tr><td>503</td><td>Service Unavailable</td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。</td></tr></tbody></table></li></ul></li></ul><blockquote><p>参考<a href="https://www.bilibili.com/video/BV1zs411h74a?p=1">黑马程序员AJAX零基础到精通_整合Git核心内容全套教程</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 数据交互 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> 异步编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery</title>
      <link href="/2022/12/10/jQuery/"/>
      <url>/2022/12/10/jQuery/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-JavaScript库—jQuery"><a href="#简介-JavaScript库—jQuery" class="headerlink" title="简介 JavaScript库—jQuery"></a>简介 JavaScript库—jQuery</h1><span id="more"></span><blockquote><p>jQuery是一个优秀的<strong>JavaScript库</strong>，是一个凭借简洁的语法和跨平台的兼容性，极大地简化了JavaScript开发人员遍历HTML文档，操作DOM，执行动画和开发Ajax的操作。jQuery封装了很多<strong>预定义的对象和函数</strong>。其理念：<strong>write less,do more</strong>.</p></blockquote><h2 id="jQuery-入门"><a href="#jQuery-入门" class="headerlink" title="jQuery 入门"></a>jQuery 入门</h2><h3 id="jQuery-概述"><a href="#jQuery-概述" class="headerlink" title="jQuery 概述"></a>jQuery 概述</h3><h4 id="JavaScript-库"><a href="#JavaScript-库" class="headerlink" title="JavaScript 库"></a>JavaScript 库</h4><blockquote><p>JavaScript库：即 library，是一个封装好的特定的集合（方法和函数）。从封装一大堆函数的角度理解库，就是在这个库中，封装了很多预先定义好的函数在里面，比如动画animate、hide、show，比如获取元素等</p></blockquote><ul><li>常见的JavaScript 库</li></ul><ol><li>jQuery</li><li>Prototype</li><li>YUI</li><li>Dojo</li><li>Ext JS</li><li>移动端的zepto<br>这些库都是对原生 JavaScript 的封装，内部都是用 JavaScript 实现的，我们主要学习的是 jQuery。</li></ol><h4 id="jQuery-的概念"><a href="#jQuery-的概念" class="headerlink" title="jQuery 的概念"></a>jQuery 的概念</h4><blockquote><p>jQuery 是一个快速、简洁的 JavaScript 库，其设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。</p></blockquote><p>j 就是 JavaScript；   Query 查询； 意思就是查询js，把js中的DOM操作做了封装，我们可以快速的查询使用里面的功能。<br>jQuery 封装了 JavaScript 常用的功能代码，优化了<strong>DOM 操作、事件处理、动画设计和 Ajax 交互</strong>。<br>学习<strong>jQuery本质</strong>： 就是<strong>学习调用这些函数（方法）</strong>。<br>jQuery 出现的目的是加快前端人员的开发速度，我们可以非常方便的调用和使用它，从而提高开发效率。</p><p><img src="/images/jQuery.png" alt="jQuery和原生JavaScript比较"></p><ul><li><strong>优点</strong></li><li>轻量级。核心文件才几十kb，不会影响页面加载速度</li><li>跨浏览器兼容。基本兼容了现在主流的浏览器</li><li>链式编程、隐式迭代</li><li>对事件、样式、动画支持，大大简化了DOM操作</li><li>支持<strong>插件扩展</strong>开发。有着丰富的第三方的插件，例如：树形菜单、日期控件、轮播图等</li><li>免费、开源</li></ul><h3 id="jQuery-的基本使用"><a href="#jQuery-的基本使用" class="headerlink" title="jQuery 的基本使用"></a>jQuery 的基本使用</h3><h4 id="jQuery-的下载"><a href="#jQuery-的下载" class="headerlink" title="jQuery 的下载"></a>jQuery 的下载</h4><blockquote><p>官网地址： <a href="https://jquery.com/">https://jquery.com/</a></p></blockquote><p>版本：</p><ul><li>1x ：兼容 IE 678 等低版本浏览器， 官网不再更新</li><li>2x ：不兼容 IE 678 等低版本浏览器， 官网不再更新</li><li>3x ：不兼容 IE 678 等低版本浏览器， 是官方主要更新维护的版本<br>各个版本的下载：<a href="https://code.jquery.com/">https://code.jquery.com/</a></li></ul><h4 id="jQuery-的使用步骤"><a href="#jQuery-的使用步骤" class="headerlink" title="jQuery 的使用步骤"></a>jQuery 的使用步骤</h4><ol><li> 引入 jQuery 文件<br>将下载的jQuery文件引入到html中</li><li>使用即可<pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="jQuery-的入口函数"><a href="#jQuery-的入口函数" class="headerlink" title="jQuery 的入口函数"></a>jQuery 的入口函数</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  此处是页面DOM加载完成的入口</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此处是页面 DOM 加载完成的入口</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>等着 DOM 结构渲染完毕即可执行内部代码，不必等到所有外部资源加载完成，jQuery 帮我们完成了封装。</li><li>相当于原生 js 中的 DOMContentLoaded。</li><li>不同于原生 js 中的 load 事件是等页面文档、外部的 js 文件、css文件、图片加载完毕才执行内部代码。</li><li> 更推荐使用第二种方式。</li></ol><h4 id="jQuery-的顶级对象"><a href="#jQuery-的顶级对象" class="headerlink" title="jQuery 的顶级对象 $"></a>jQuery 的顶级对象 $</h4><ol><li>$ 是 jQuery 的别称，在代码中可以使用 jQuery 代替 $，但一般为了方便，通常都直接使用 $ 。<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//jQuery 和 $ 是等价的 </span><span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>$ 是jQuery 的顶级对象， 相当于原生JavaScript中的 window。把元素利用$包装成jQuery对象，就可以调用jQuery 的方法。</li></ol><h4 id="jQuery-对象和-DOM-对象"><a href="#jQuery-对象和-DOM-对象" class="headerlink" title="jQuery 对象和 DOM 对象"></a>jQuery 对象和 DOM 对象</h4><p><strong>jQuery 对象和 DOM 对象介绍</strong></p><ol><li>用原生 JS 获取来的对象就是 DOM 对象</li><li>jQuery 方法获取的元素就是 jQuery 对象</li><li>jQuery 对象本质是：利用$对DOM 对象包装后产生的对象（<strong>伪数组</strong>形式存储）</li></ol><p><strong>注意：</strong><br>只有 jQuery 对象才能使用 jQuery 方法，DOM 对象则使用原生的 JavaScirpt 方法</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//DOM对象： 用原生 JS 获取来的对象就是 DOM 对象</span><span class="token keyword">var</span> myDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//jQuery对象： jQuery 方法获取的元素就是 jQuery 对象</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//jQuery对象只能用jQuery方法 DOM对象只能用原生的JavaScript属性和方法 不能混用</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>jQuery 对象和 DOM 对象转换<br>DOM 对象与 jQuery 对象之间是可以相互转换的。<br>因为原生js 比 jQuery 更大，原生的一些属性和方法 jQuery没有给我们封装. 要想使用这些属性和方法需要把jQuery对象转换为DOM对象才能使用。</li></ul><ol><li>DOM 对象转换为 jQuery 对象： $(DOM对象)<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//(1) 我们直接获取视频，得到就是jQuery对象</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'video'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//(2)我们已经使用原生js 获取过来 DOM对象</span><span class="token keyword">var</span> myvideo <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'video'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span>myvideo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//jquery里面没有play 这个方法   </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>jQuery 对象转换为 DOM 对象（两种方式）<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//myvideo.play();</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//index 是索引号</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//index 是索引号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="jQuery-常见API"><a href="#jQuery-常见API" class="headerlink" title="jQuery 常见API"></a>jQuery 常见API</h2><h3 id="jQuery-选择器"><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a>jQuery 选择器</h3><blockquote><p>原生 JS 获取元素方式很多，很杂，而且兼容性情况不一致，因此 jQuery 给我们做了封装，使获取元素统一标准</p></blockquote><h4 id="jQuery-基础选择器"><a href="#jQuery-基础选择器" class="headerlink" title="jQuery 基础选择器"></a>jQuery 基础选择器</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>“选择器”<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//  里面选择器直接写 CSS 选择器即可，但是要加引号 </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>ID选择器</td><td>$(“#id”)</td><td>获取指定ID的元素</td></tr><tr><td>全选选择器</td><td>$(“*”)</td><td>匹配所有元素</td></tr><tr><td>类选择器</td><td>$(“.class”)</td><td>获取同一类class的元素</td></tr><tr><td>标签选择器</td><td>$(“div”)</td><td>获取同一类标签的所有元素</td></tr><tr><td>并集选择器</td><td>$(“div,p,li”)</td><td>选取多个元素</td></tr><tr><td>交集选择器</td><td>$(“li.current”)</td><td>交集元素</td></tr></tbody></table><h4 id="jQuery-层级选择器"><a href="#jQuery-层级选择器" class="headerlink" title="jQuery 层级选择器"></a>jQuery 层级选择器</h4><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>子代选择器</td><td>$(“ul&gt;li”)</td><td>使用&gt;号，获取亲儿子层级的元素；不会获取孙子级的元素</td></tr><tr><td>后代选择器</td><td>$(“ul li”)</td><td>使用空格，表示后代选择器，获取ul下的所有li元素，包括孙子级等</td></tr></tbody></table><h4 id="隐式迭代（重要）"><a href="#隐式迭代（重要）" class="headerlink" title="隐式迭代（重要）"></a>隐式迭代（重要）</h4><blockquote><p>遍历内部 DOM 元素（伪数组形式存储）的过程就叫做隐式迭代。</p></blockquote><p>简单理解：给匹配到的所有元素进行循环遍历，执行相应的方法，而不用我们再进行循环，简化我们的操作，方便我们调用。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//所有div进行循环遍历，执行相应的方法</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'属性'</span><span class="token punctuation">,</span> <span class="token string">'值'</span><span class="token punctuation">)</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//所有的div标签背景都会改变   </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="jQuery-筛选选择器"><a href="#jQuery-筛选选择器" class="headerlink" title="jQuery 筛选选择器"></a>jQuery 筛选选择器</h4><table><thead><tr><th>语法</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>:frist</td><td>$(“ul li:frist”)</td><td>获取<strong>第一</strong>个li元素</td></tr><tr><td>:last</td><td>$(“ul li:last”)</td><td>获取<strong>最后</strong>一个li元素</td></tr><tr><td>:eq(index)</td><td>$(“ul li:eq(2)”)</td><td>获取到的li元素中，选择索引号为2的元素</td></tr><tr><td>:odd</td><td>$(“ul li:odd”)</td><td>获取到的li元素中，选择索引号<strong>为奇数</strong>的元素</td></tr><tr><td>:even</td><td>$(“ul li:even”)</td><td>获取到的li元素中，选择索引号为<strong>偶数</strong>的元素</td></tr></tbody></table><h4 id="jQuery-筛选方法-重点"><a href="#jQuery-筛选方法-重点" class="headerlink" title="jQuery 筛选方法(重点)"></a>jQuery 筛选方法(重点)</h4><table><thead><tr><th>语法</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>parent()</td><td>$(“li”).parent()</td><td>查找父元素,<strong>最近一级</strong>的父元素</td></tr><tr><td>children(selecter)</td><td>$(“ul”).children(“li”)</td><td>相当于$(“ul&gt;li”),最近一级</td></tr><tr><td>find(selecter)</td><td>$(“ul”).find(“li”)</td><td>相当于$(“ul li”),后代选择器</td></tr><tr><td>siblings(selector)</td><td>$(“.frist”).siblings(“li”)</td><td>查找兄弟节点，不包括自身</td></tr><tr><td>nextAll([expr])</td><td>$(“.frist”).nextAll()</td><td>选择当前元素之<strong>后</strong>的所有同辈元素</td></tr><tr><td>prevAll([expr])</td><td>$(“.frist”).prevAll()</td><td>选择当前元素之<strong>前</strong>的所有同辈元素</td></tr><tr><td>hasClass</td><td>$(“div”).addClass(‘.current’)</td><td>检查当前元素是否有某个特定的类，如果有，返回true</td></tr><tr><td>eq(index)</td><td>$(“li”).eq(2)</td><td>相当于$(“li:eq(2)”),index从0开始，index可以直接是变量</td></tr></tbody></table><h4 id="jQuery-里面的排他思想"><a href="#jQuery-里面的排他思想" class="headerlink" title="jQuery 里面的排他思想"></a>jQuery 里面的排他思想</h4><blockquote><p>想要多选一的效果，排他思想：当前元素设置样式，其余的兄弟元素清除样式。</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1.隐式迭代给所有的元素都绑定点击事件</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//2.当前元素改变背景颜色</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3.其余的兄弟元素去掉背景颜色 隐式迭代</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="链式编程"><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h4><blockquote><p>链式编程是为了节省代码量，看起来更优雅。</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//链式编程</span><span class="token comment" spellcheck="true">//当前元素颜色变为红色 其兄弟元素颜色为无</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sibling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>使用链式编程一定注意是哪个对象执行样式</strong></p><h3 id="jQuery-样式操作"><a href="#jQuery-样式操作" class="headerlink" title="jQuery 样式操作"></a>jQuery 样式操作</h3><h4 id="操作-css-方法"><a href="#操作-css-方法" class="headerlink" title="操作 css 方法"></a>操作 css 方法</h4><blockquote><p>jQuery 可以使用 css 方法来修改简单元素样式； 也可以操作类，修改多个样式。</p></blockquote><ul><li>参数只写属性名，则是返回属性值<pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回color的属性值 带有单位</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>参数是<strong>属性名，属性值</strong>，逗号分隔，是设置一组样式，属性必须加引号，值如果是<strong>数字可以不用跟单位和引号</strong><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置color的属性值为red 属性一定要加引号</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>参数可以是<strong>对象形式</strong>，方便设置多组样式。属性名和属性值用<strong>冒号</strong>隔开， 属性可以不用加引号<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//属性和属性值冒号隔开 属性值不是数值需要加引号</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span><span class="token string">"white"</span><span class="token punctuation">,</span><span class="token string">"font-size"</span><span class="token punctuation">:</span><span class="token string">"20px"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token string">"color"</span><span class="token punctuation">:</span><span class="token string">"white"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//属性之间逗号隔开</span>  <span class="token string">"font-size"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  <span class="token string">"backgroundColor"</span><span class="token punctuation">:</span><span class="token string">"red"</span> <span class="token comment" spellcheck="true">//复合属性采用驼峰命名法</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="设置类样式方法"><a href="#设置类样式方法" class="headerlink" title="设置类样式方法"></a>设置类样式方法</h4><blockquote><p>修改的样式比较多，可以在css中创建一个类，作用等同于以前的 classList，可以操作类样式， 注意操作类里面的<strong>参数不要加点</strong>。</p></blockquote><ul><li>添加类<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//不会影响其他的类</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"current"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类名不要加点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>删除类<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//不会影响其他的类</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"current"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类名不要加点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>切换类<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//不会影响其他的类</span><span class="token comment" spellcheck="true">//div没有current类则添加 有则去除current类</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClas</span><span class="token punctuation">(</span><span class="token string">"current"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类名不要加点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="类操作与className区别"><a href="#类操作与className区别" class="headerlink" title="类操作与className区别"></a>类操作与className区别</h4><blockquote><p>原生 JS 中 className 会覆盖元素原先里面的类名。<br>jQuery 里面类操作只是对指定类进行操作，不影响原先的类名</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// var one = document.querySelector(".one");</span><span class="token comment" spellcheck="true">// one.className = "two";</span><span class="token comment" spellcheck="true">// $(".one").addClass("two");  这个addClass相当于追加类名 不影响以前的类名</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".one"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="jQuery-效果"><a href="#jQuery-效果" class="headerlink" title="jQuery 效果"></a>jQuery 效果</h3><p>jQuery 给我们封装了很多动画效果，最为常见的如下:<br><img src="/images/jQuery%E6%95%88%E6%9E%9C.png"></p><h4 id="显示隐藏效果"><a href="#显示隐藏效果" class="headerlink" title="显示隐藏效果"></a>显示隐藏效果</h4><h5 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h5><ol><li>显示语法规范<pre class="line-numbers language-js"><code class="language-js"><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">,</span><span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>显示参数<br>（1）参数都可以省略， 无动画直接显示。<br>（2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。<br>（3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。<br>（4）fn:  回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ol><h5 id="隐藏"><a href="#隐藏" class="headerlink" title="隐藏"></a>隐藏</h5><ol><li>隐藏语法规范<pre class="line-numbers language-js"><code class="language-js"><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">,</span><span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>隐藏参数<br>（1）参数都可以省略， 无动画直接显示。<br>（2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。<br>（3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。<br>（4）fn:  回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ol><h5 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h5><ol><li>切换语法规范<pre class="line-numbers language-js"><code class="language-js"><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">,</span><span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>切换参数<br>（1）参数都可以省略， 无动画直接显示。<br>（2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。<br>（3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。<br>（4）fn:  回调函数，在动画完成时执行的函数，每个元素执行一次。<br>建议：平时一般不带参数，直接显示隐藏即可。</li></ol><h4 id="滑动效果"><a href="#滑动效果" class="headerlink" title="滑动效果"></a>滑动效果</h4><h5 id="下滑"><a href="#下滑" class="headerlink" title="下滑"></a>下滑</h5><ol><li>下滑效果语法规范<pre class="line-numbers language-js"><code class="language-js"><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">,</span><span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>下滑效果参数<br>（1）参数都可以省略。<br>（2）speed:三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。<br>（3）easing:(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。<br>（4）fn:  回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ol><h5 id="上滑"><a href="#上滑" class="headerlink" title="上滑"></a>上滑</h5><ol><li>上滑效果语法规范<pre class="line-numbers language-js"><code class="language-js"><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">,</span><span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>上滑效果参数<br>（1）参数都可以省略。<br>（2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。<br>（3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。<br>（4）fn:  回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ol><h5 id="切换-1"><a href="#切换-1" class="headerlink" title="切换"></a>切换</h5><ol><li>滑动切换效果语法规范<pre class="line-numbers language-js"><code class="language-js"><span class="token function">slideToggle</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">,</span><span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>滑动切换效果参数<br>（1）参数都可以省略。<br>（2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。<br>（3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。<br>（4）fn:  回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ol><h4 id="淡入淡出效果"><a href="#淡入淡出效果" class="headerlink" title="淡入淡出效果"></a>淡入淡出效果</h4><h5 id="淡入"><a href="#淡入" class="headerlink" title="淡入"></a>淡入</h5><ol><li>淡入效果语法规范<pre class="line-numbers language-js"><code class="language-js"><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">,</span><span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 淡入 fadeIn()</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>淡入效果参数<br>（1）参数都可以省略。<br>（2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。<br>（3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。<br>（4）fn:  回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ol><h5 id="淡出"><a href="#淡出" class="headerlink" title="淡出"></a>淡出</h5><ol><li>淡出效果语法规范<pre class="line-numbers language-js"><code class="language-js"><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">,</span><span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 淡出 fadeOut()</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>淡出效果参数<br>（1）参数都可以省略。<br>（2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。<br>（3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。<br>（4）fn:  回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ol><h5 id="切换-2"><a href="#切换-2" class="headerlink" title="切换"></a>切换</h5><ol><li>切换效果语法规范<pre class="line-numbers language-js"><code class="language-js"><span class="token function">fadeToggle</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">,</span><span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 淡入淡出切换 fadeToggle()</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeToggle</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>切换效果参数<br>（1）参数都可以省略。<br>（2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。<br>（3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。<br>（4）fn:  回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ol><h5 id="调整不透明度"><a href="#调整不透明度" class="headerlink" title="调整不透明度"></a>调整不透明度</h5><ol><li>渐进方式调整到指定的不透明度<pre class="line-numbers language-js"><code class="language-js"><span class="token function">fadeTo</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>speed<span class="token punctuation">]</span><span class="token punctuation">,</span>opacity<span class="token punctuation">,</span><span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//  修改透明度 fadeTo() 这个速度和透明度要必须写</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeTo</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>效果参数<br>（1）<strong>opacity 透明度必须写，取值 0~1 之间</strong>。<br>（2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。<strong>必须写</strong><br>（3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。<br>（4）fn:  回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ol><h4 id="自定义动画-animate"><a href="#自定义动画-animate" class="headerlink" title="自定义动画 animate"></a>自定义动画 animate</h4><ol><li>语法<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//params 属性 用对象 ，speed 时间，fn是动画结束后的执行函数</span><span class="token function">animate</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span><span class="token punctuation">[</span>speed<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//属性设置可以用对象的方法</span> left<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> top<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> opacity<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token number">4</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>参数<br>（1）<strong>params: 想要更改的样式属性，以对象形式传递，必须写。 属性名可以不用带引号， 如果是复合属性则需要采取驼峰命名法 borderLeft。其余参数都可以省略</strong>。<br>（2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。<br>（3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。<br>（4）fn:  回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ol><h4 id="事件切换"><a href="#事件切换" class="headerlink" title="事件切换"></a>事件切换</h4><p>hover([over],[out]);</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. 事件切换 hover 就是鼠标经过和离开的复合写法</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".nav>li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hover</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//经过函数</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//离开函数</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2. 事件切换 hover  如果只写一个函数，那么鼠标经过和鼠标离开都会触发这个函数</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".nav>li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hover</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（1）over:鼠标移到元素上要触发的函数（相当于mouseenter）<br>（2）out:鼠标移出元素要触发的函数（相当于mouseleave）<br>（3）如果只写一个函数，则鼠标经过和离开都会触发它</p><h4 id="动画队列及其停止排队方法"><a href="#动画队列及其停止排队方法" class="headerlink" title="动画队列及其停止排队方法"></a>动画队列及其停止排队方法</h4><ol><li>动画或效果队列<br>动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行。</li><li>停止排队<pre class="line-numbers language-js"><code class="language-js"><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  必须写在动画的前面</span><span class="token comment" spellcheck="true">//停止上一个动画不管有没有出现完</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>(1）stop() 方法用于停止动画或效果。<br>(2)  注意： stop() 写到动画或者效果的前面， 相当于停止结束上一次的动画。</li></ol><h3 id="jQuery-属性操作"><a href="#jQuery-属性操作" class="headerlink" title="jQuery 属性操作"></a>jQuery 属性操作</h3><h4 id="元素固有属性值-prop"><a href="#元素固有属性值-prop" class="headerlink" title="元素固有属性值 prop()"></a>元素固有属性值 prop()</h4><blockquote><p>所谓元素固有属性就是元素本身自带的属性，比如 a元素里面的 href ，比如 input元素里面的 type。</p></blockquote><ol><li>获取属性语法<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//element.prop("属性名") 获取元素固有的属性值</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"属性"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取到a的href属性</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>设置属性语法<pre class="line-numbers language-js"><code class="language-js"><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"属性"</span><span class="token punctuation">,</span> <span class="token string">"属性值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给a设置title属性 属性值为我们都挺好</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"我们都挺好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="元素自定义属性值-attr"><a href="#元素自定义属性值-attr" class="headerlink" title="元素自定义属性值 attr()"></a>元素自定义属性值 attr()</h4><blockquote><p>用户自己给元素添加的属性，我们称为自定义属性。 比如给 div 添加 index =“1”。</p></blockquote><ol><li>获取属性语法<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//元素的自定义属性 我们通过 attr()</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"属性"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 类似原生 getAttribute()</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>设置属性语法<pre class="line-numbers language-js"><code class="language-js"><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"属性"</span><span class="token punctuation">,</span> <span class="token string">"属性值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 类似原生 setAttribute()</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>该方法也可以获取 H5 自定义属性</li></ol><h4 id="数据缓存-data"><a href="#数据缓存-data" class="headerlink" title="数据缓存 data()"></a>数据缓存 data()</h4><blockquote><p>data() 方法可以在指定的元素上存取数据，并不会修改 DOM 元素结构。一旦页面刷新，之前存放的数据都将被移除。 </p></blockquote><ol><li>获取数据语法<pre class="line-numbers language-js"><code class="language-js"><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 向被选元素附加数据</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"uname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>设置属性语法<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//DOM看不到</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 向被选元素附加数据</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"uname"</span><span class="token punctuation">,</span> <span class="token string">"andy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>同时，还可以读取 HTML5 自定义属性  data-index ，得到的是数字型</li></ol><h3 id="jQuery-内容文本值"><a href="#jQuery-内容文本值" class="headerlink" title="jQuery 内容文本值"></a>jQuery 内容文本值</h3><blockquote><p>主要针对元素的内容还有表单的值操作。</p></blockquote><ol><li>普通元素内容 html()（ 相当于原生inner HTML)<pre class="line-numbers language-js"><code class="language-js"><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 获取元素的内容</span><span class="token comment" spellcheck="true">//标签也会显示出来</span><span class="token comment" spellcheck="true">//获取设置元素内容 html()</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">"内容"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 设置元素的内容</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>普通元素文本内容 text()   (相当与原生 innerText)<pre class="line-numbers language-js"><code class="language-js"><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 获取元素的文本内容，不会获取标签</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"文本内容"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 设置元素的文本内容</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>表单的值 val()（ 相当于原生value)<pre class="line-numbers language-js"><code class="language-js"><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">// 获取表单的值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"内容"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 设置表单的值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="jQuery-元素操作"><a href="#jQuery-元素操作" class="headerlink" title="jQuery 元素操作"></a>jQuery 元素操作</h3><blockquote><p>主要是遍历、创建、添加、删除元素操作。</p></blockquote><h4 id="遍历元素"><a href="#遍历元素" class="headerlink" title="遍历元素"></a>遍历元素</h4><blockquote><p>jQuery 隐式迭代是对同一类元素做了同样的操作。 如果想要给同一类元素做不同操作，就需要用到遍历。</p></blockquote><ul><li>语法1<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. each() 方法遍历元素 </span><span class="token comment" spellcheck="true">// 回调函数第一个参数一定是索引号  可以自己指定索引号号名称</span><span class="token comment" spellcheck="true">// 回调函数第二个参数一定是 dom元素对象 也是自己命名</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> domEle<span class="token punctuation">)</span> <span class="token punctuation">{</span> xxx<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> domEle<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 回调函数第一个参数一定是索引号  可以自己指定索引号号名称</span>  <span class="token comment" spellcheck="true">// console.log(index);</span>  <span class="token comment" spellcheck="true">// console.log(i);</span>  <span class="token comment" spellcheck="true">// 回调函数第二个参数一定是 dom元素对象 也是自己命名</span>  <span class="token comment" spellcheck="true">// console.log(domEle);</span>  <span class="token comment" spellcheck="true">// domEle.css("color"); dom对象没有css方法</span>  <span class="token function">$</span><span class="token punctuation">(</span>domEle<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sum <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>domEle<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol><li>each() 方法遍历匹配的每一个元素。<strong>主要用DOM处理</strong>。 each 每一个</li><li>里面的回调函数有2个参数：  index 是每个元素的索引号;  <strong>demEle 是每个DOM元素对象</strong>，不是jquery对象</li><li>所以要想使用jquery方法，需要给这个dom元素转换为jquery对象  <strong>$(domEle)</strong></li></ol><ul><li>语法2<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 2. $.each() 方法遍历元素 主要用于遍历数据，处理数据</span><span class="token comment" spellcheck="true">// 回调函数第一个参数一定是索引号  可以自己指定索引号号名称</span><span class="token comment" spellcheck="true">// 回调函数第二个参数一定是 dom元素对象 也是自己命名</span>$<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>object，<span class="token keyword">function</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span> xxx<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>$<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol><li>$.each()方法可用于遍历任何对象。主要用于<strong>数据处理</strong>，比如数组，对象</li><li>里面的函数有2个参数：  index 是每个元素的索引号;  element  遍历内容</li></ol><h4 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h4><ul><li>语法<pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;li>&lt;/li>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> li <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;li>新建的li&lt;/li>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>创建了一个li标签</li></ul><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><ul><li>内部添加<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//把内容放入匹配元素内部最后面，类似原生 appendChild。</span>element<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> li <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;li>新建的li&lt;/li>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ul<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把内容放入匹配元素内部最前面。</span>element<span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token string">"内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ul<span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//放在最前边</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>添加的元素放到了下一级元素里，相当于是子代元素<br>外部添加元素，生成之后，他们是兄弟关系</li><li>外部添加<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//  把内容放入目标元素前面</span>element<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token string">''</span>内容<span class="token string">''</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  把内容放入目标元素后面</span>element<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token string">"内容"</span><span class="token punctuation">)</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>内部添加元素，生成之后，它们是父子关系</li></ul><h4 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h4><pre class="line-numbers language-js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//  删除匹配的元素（本身）</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  删除匹配的元素集合中所有的子节点</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以删除匹配的元素里面的子节点 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//设置空的字符串</span>element<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//  清空匹配的元素内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>remove 删除元素本身</li><li>empt() 和  html(“”) 作用等价，都可以删除元素里面的内容，只不过 html 还可以设置内容。</li></ol><h3 id="jQuery-尺寸、位置操作"><a href="#jQuery-尺寸、位置操作" class="headerlink" title="jQuery 尺寸、位置操作"></a>jQuery 尺寸、位置操作</h3><h4 id="jQuery-尺寸"><a href="#jQuery-尺寸" class="headerlink" title="jQuery 尺寸"></a>jQuery 尺寸</h4><table><thead><tr><th>语法</th><th>用法</th></tr></thead><tbody><tr><td>width()/height()</td><td>取得匹配元素的高度和宽度 只算width/height</td></tr><tr><td>innerWidth()/innerHeight()</td><td>取得匹配元素的高度和宽度 包括padding</td></tr><tr><td>outerWidth()/outerHeight()</td><td>取得匹配元素的高度和宽度 包括padding、border</td></tr><tr><td>outerWidth(true)/outerHeight(true)</td><td>取得匹配元素的高度和宽度 包括padding、border、margin</td></tr></tbody></table><ol><li>以上参数为空，则是获取相应值，返回的是数字型。</li><li>如果参数为数字，则是修改相应值。</li><li>参数可以不必写单位。</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. width() / height() 获取设置元素 width和height大小 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// $("div").width(300);</span><span class="token comment" spellcheck="true">// 2. innerWidth() / innerHeight()  获取设置元素 width和height + padding 大小 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">innerWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3. outerWidth()  / outerHeight()  获取设置元素 width和height + padding + border 大小 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">outerWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 4. outerWidth(true) / outerHeight(true) 获取设置 width和height + padding + border + margin</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">outerWidth</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="jQuery-位置"><a href="#jQuery-位置" class="headerlink" title="jQuery 位置"></a>jQuery 位置</h4><blockquote><p>位置主要有三个： offset()、position()、scrollTop()/scrollLeft()</p></blockquote><ul><li>offset() 设置或获取元素偏移</li></ul><ol><li>offset() 方法设置或返回被选元素相对于<strong>文档</strong>的偏移坐标，跟<strong>父级没有关系</strong>。</li><li>该方法有2个属性 left、top 。offset().top  用于获取距离文档顶部的距离，offset().left 用于获取距离文档左侧的距离。</li><li>可以设置元素的偏移：offset({ top: 10, left: 30 });</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. 获取设置距离文档的位置（偏移） offset</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".son"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".son"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".son"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    top<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    left<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>position() 获取元素偏移</li></ul><ol><li>position() 方法用于返回被选元素相对于<strong>带有定位的父级</strong>偏移坐标，如果父级都没有定位，则以文档为准。</li><li>该方法有2个属性 left、top。position().top 用于获取距离定位父级顶部的距离，position().left 用于获取距离定位父级左侧的距离。</li><li>该方法<strong>只能获取</strong>。</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 2. 获取距离带有定位父级位置（偏移） position   如果没有带有定位的父级，则以文档为准</span><span class="token comment" spellcheck="true">// 这个方法只能获取不能设置偏移</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".son"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// $(".son").position({</span><span class="token comment" spellcheck="true">//     top: 200,</span><span class="token comment" spellcheck="true">//     left: 200</span><span class="token comment" spellcheck="true">// });</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>scrollTop()/scrollLeft() 设置或获取元素被卷去的头部和左侧<pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 被卷去的头部 scrollTop()  / 被卷去的左侧 scrollLeft()</span><span class="token comment" spellcheck="true">// 页面滚动事件</span><span class="token comment" spellcheck="true">//动画也可以做返回效果，不能是文档，只能是元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body,html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>scrollTop<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="jQuery-事件"><a href="#jQuery-事件" class="headerlink" title="jQuery 事件"></a>jQuery 事件</h2><h3 id="jQuery-事件注册"><a href="#jQuery-事件注册" class="headerlink" title="jQuery 事件注册"></a>jQuery 事件注册</h3></li><li>单个事件注册<pre class="line-numbers language-js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">事件</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    事件处理程序 <span class="token punctuation">}</span><span class="token punctuation">)</span>       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>其他事件和原生基本一致。<br>比如mouseover、mouseout、blur、focus、change、keydown、keyup、resize、scroll 等<br>同一个元素需要一个一个注册事件，可用on()绑定不同的事件<h3 id="jQuery-事件处理"><a href="#jQuery-事件处理" class="headerlink" title="jQuery 事件处理"></a>jQuery 事件处理</h3><h4 id="事件处理-on-绑定事件"><a href="#事件处理-on-绑定事件" class="headerlink" title="事件处理 on() 绑定事件"></a>事件处理 on() 绑定事件</h4><blockquote><p>on() 方法在匹配元素上绑定一个或多个事件的事件处理函数</p></blockquote></li></ul><p>element.on(events,[selector],fn);</p><ol><li>events:一个或多个用空格分隔的事件类型，如”click”或”keydown” 。</li><li>selector: 元素的子元素选择器 。</li><li>fn:回调函数 即绑定在元素身上的侦听函数。 </li></ol><ul><li><p>on() 方法优势1：<br>可以绑定多个事件，多个处理事件处理程序。 </p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//采用对象的方式</span>mouseover<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> mouseout<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>click<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果事件处理程序相同</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//经过和离开都会触发事件</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"mouseover mouseout"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">"current"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>on() 方法优势2：<br>可以事件委派操作，事件委派的定义就是，把原来加给子元素身上的事件绑定在父元素身上，就是把事件委派给父元素。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//事件绑定到了ul身上，但是触发对象是li</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在此之前有bind(), live() delegate()等方法来处理事件绑定或者事件委派，用on替代他们。</p></li><li><p>on() 方法优势3：<br>动态创建的元素，click() 没有办法绑定事件， on() 可以给<strong>动态生成的元素</strong>绑定事件 </p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//div不是创建的元素 且p是div的子元素</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"可以给动态生成的元素绑定事件"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;p>我是动态创建的p&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//无效 click无法绑定动态创建的元素p</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="事件处理-off-解绑事件"><a href="#事件处理-off-解绑事件" class="headerlink" title="事件处理 off() 解绑事件"></a>事件处理 off() 解绑事件</h4><blockquote><p>off() 方法可以移除通过 on() 方法添加的事件处理程序。</p></blockquote></li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 解绑p元素所有事件处理程序</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 解绑p元素上面的点击事件 后面的 foo 是侦听函数名</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 解绑事件委托</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果有的事件只想触发一次， 可以使用 one() 来绑定事件。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// one() 但是它只能触发事件一次</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">one</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自动触发事件-trigger"><a href="#自动触发事件-trigger" class="headerlink" title="自动触发事件 trigger()"></a>自动触发事件 trigger()</h4><blockquote><p>有些事件希望自动触发, 比如轮播图自动播放功能跟点击右侧按钮一致。可以利用定时器自动触发右侧按钮点击事件，不必鼠标点击触发。</p></blockquote><pre class="line-numbers language-js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 第一种简写形式</span>element<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 第二种自动触发模式</span>element<span class="token punctuation">.</span><span class="token function">triggerHandler</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 第三种自动触发模式 不会触发元素的默认行为</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1. 元素.事件()</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//会触发元素的默认行为</span><span class="token comment" spellcheck="true">// 2. 元素.trigger("事件")</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//会触发元素的默认行为</span><span class="token comment" spellcheck="true">// 3. 元素.triggerHandler("事件") 就是不会触发元素的默认行为</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">triggerHandler</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>triggerHandler模式不会触发元素的默认行为，这是和前面两种的区别。</p><h3 id="jQuery-事件对象"><a href="#jQuery-事件对象" class="headerlink" title="jQuery 事件对象"></a>jQuery 事件对象</h3><p>事件被触发，就会有事件对象的产生</p><pre class="line-numbers language-js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>events<span class="token punctuation">,</span><span class="token punctuation">[</span>selector<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"点击了document"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"点击了div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//阻止冒泡</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>阻止默认行为：event.preventDefault()   或者 return  false </li><li>阻止冒泡： event.stopPropagation()    </li></ol><h2 id="jQuery-其他方法"><a href="#jQuery-其他方法" class="headerlink" title="jQuery 其他方法"></a>jQuery 其他方法</h2><h3 id="jQuery-对象拷贝"><a href="#jQuery-对象拷贝" class="headerlink" title="jQuery 对象拷贝"></a>jQuery 对象拷贝</h3><blockquote><p>如果想要把某个对象拷贝（合并） 给另外一个对象使用，此时可以使用 $.extend() 方法</p></blockquote><p>语法：</p><pre class="line-numbers language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">[</span>deep<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> object1<span class="token punctuation">,</span> <span class="token punctuation">[</span>objectN<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">var</span> targetObj <span class="token operator">=</span> <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    msg<span class="token punctuation">:</span> <span class="token punctuation">{</span>        sex<span class="token punctuation">:</span> <span class="token string">'男'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"andy"</span><span class="token punctuation">,</span>    msg<span class="token punctuation">:</span> <span class="token punctuation">{</span>        age<span class="token punctuation">:</span> <span class="token number">18</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// // 1. 浅拷贝把原来对象里面的复杂数据类型地址拷贝给目标对象</span>$<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>targetObj<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 会覆盖targetObj 里面原来的数据</span>targetObj<span class="token punctuation">.</span>msg<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//obj和targetObj的age都会变化</span><span class="token comment" spellcheck="true">// 2. 深拷贝把里面的数据完全复制一份给目标对象 如果里面有不冲突的属性,会合并到一起 </span>$<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> targetObj<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// console.log(targetObj); // 会覆盖targetObj 里面原来的数据</span>targetObj<span class="token punctuation">.</span>msg<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//targetObj的age会变化 obj不会改变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>deep: 如果设为true 为深拷贝， 默认为false  浅拷贝 </li><li>target: 要拷贝的目标对象</li><li>object1:待拷贝到第一个对象的对象。</li><li>objectN:待拷贝到第N个对象的对象。</li><li>浅拷贝是把<strong>被拷贝的对象复杂数据类型中的地址</strong>拷贝给目标对象，<strong>修改目标对象会影响被拷贝对象</strong>。</li><li>深拷贝，前面加true， 完全克隆(拷贝的对象,而不是地址)，<strong>修改目标对象不会影响被拷贝对象</strong>。</li></ol><h3 id="jQuery-多库共存"><a href="#jQuery-多库共存" class="headerlink" title="jQuery 多库共存"></a>jQuery 多库共存</h3><ul><li>问题<br>jQuery使用$作为标示符，随着jQuery的流行,其他 js 库也会用这$作为标识符， 这样一起使用会引起冲突。</li><li>需求<br>需要一个解决方案，让jQuery 和其他的js库不存在冲突，可以同时存在，这就叫做多库共存。</li><li>jQuery 解决方案</li></ul><ol><li>把里面的 $ 符号 统一改为 jQuery。 比如 jQuery(‘’div’’)</li><li> jQuery 变量规定新的名称：$.noConflict()        var xx = $.noConflict();<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//$("div")可用下面的方式表示</span><span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> xx <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">noConflict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">xx</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="jQuery-插件"><a href="#jQuery-插件" class="headerlink" title="jQuery 插件"></a>jQuery 插件</h3><blockquote><p>jQuery 功能比较有限，想要更复杂的特效效果，可以借助于 jQuery 插件完成。 </p></blockquote><p>注意: 这些插件也是依赖于jQuery来完成的，所以必须要先引入jQuery文件，因此也称为 jQuery 插件</p><ul><li>jQuery 插件常用的网站：</li></ul><ol><li> jQuery 插件库  <a href="http://www.jq22.com/">http://www.jq22.com/</a>     </li><li> jQuery 之家   <a href="http://www.htmleaf.com/">http://www.htmleaf.com/</a> </li></ol><ul><li>jQuery 插件使用步骤：</li></ul><ol><li> 引入相关文件。（jQuery 文件 和 插件文件）    </li><li> 复制相关html、css、js (调用插件)。</li></ol><ul><li><p>图片懒加载<br>图片使用延迟加载在可提高网页下载速度。它也能帮助减轻服务器负载。<br>当我们页面滑动到可视区域，再显示图片。<br><img data-lazy-src="images/9.jpg"> 将src替换成data-lazy-src才会出现懒加载<br>我们使用jquery 插件库  EasyLazyload。<br>注意，此时的js引入文件和js调用必须写到 <strong>DOM元素（图片）最后面</strong></p></li><li><p>全屏滚动（fullpage.js）<br>gitHub： <a href="https://github.com/alvarotrigo/fullPage.js">https://github.com/alvarotrigo/fullPage.js</a><br>中文翻译网站： <a href="http://www.dowebok.com/demo/2014/77/">http://www.dowebok.com/demo/2014/77/</a></p></li><li><p>bootstrap JS 插件<br>bootstrap 框架也是依赖于 jQuery 开发的，因此里面的 js插件使用 ，也必须引入jQuery 文件。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地储存</title>
      <link href="/2022/12/10/%E6%9C%AC%E5%9C%B0%E5%82%A8%E5%AD%98/"/>
      <url>/2022/12/10/%E6%9C%AC%E5%9C%B0%E5%82%A8%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-web本地储存"><a href="#简介-web本地储存" class="headerlink" title="简介  web本地储存"></a>简介  web本地储存</h1><span id="more"></span><blockquote><p>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各种各样的需求，会经常性在本地存储大量的数据，HTML5规范提出了相关解决方案。</p></blockquote><ul><li>本地储存特性<br>1、数据存储在用户浏览器中<br>2、设置、读取方便、甚至页面刷新不丢失数据<br>3、容量较大，sessionStorage约5M、localStorage约20M<br>4、只能存储字符串，可以将对象JSON.stringify() 编码后存储</li></ul><h2 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h2><ol><li>生命周期为关闭浏览器窗口</li><li>在同一个窗口(页面)下数据可以共享</li><li>以键值对的形式存储使用</li></ol><ul><li><p>存储数据</p><pre class="line-numbers language-js"><code class="language-js">sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//key 数据的名字 value 数据值</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取数据</p><pre class="line-numbers language-js"><code class="language-js">sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除数据</p><pre class="line-numbers language-js"><code class="language-js">sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除所有数据</p><pre class="line-numbers language-js"><code class="language-js">sessionStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>案例</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>set<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>存储数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>获取数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remove<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>del<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>清空所有数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> ipt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> <span class="token keyword">set</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.set'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> <span class="token keyword">get</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.get'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> remove <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.remove'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> del <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.del'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 当我们点击了之后，就可以把表单里面的值存储起来</span>          <span class="token keyword">var</span> val <span class="token operator">=</span> ipt<span class="token punctuation">.</span>value<span class="token punctuation">;</span>          sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'uname'</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>          sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'pwd'</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">get</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 当我们点击了之后，就可以把表单里面的值获取过来</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'uname'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      remove<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 当我们点击了之后，uname的数据删除</span>          sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">'uname'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      del<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 当我们点击了之后，清除所有的</span>          sessionStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h2><ol><li>声明周期永久生效，除非手动删除 否则关闭页面也会存在</li><li>可以多窗口（页面）共享（同一浏览器可以共享）</li><li>以键值对的形式存储使用</li></ol><ul><li><p>存储数据</p><pre class="line-numbers language-js"><code class="language-js">localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//key 数据的名字 value 数据值</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取数据</p><pre class="line-numbers language-js"><code class="language-js">localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除数据</p><pre class="line-numbers language-js"><code class="language-js">localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除所有数据</p><pre class="line-numbers language-js"><code class="language-js">localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>案例</p><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remember<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 记住用户名  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> username <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> remember <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#remember'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          username<span class="token punctuation">.</span>value <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          remember<span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      remember<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>checked<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果勾选就保存</span>              localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> username<span class="token punctuation">.</span>value<span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//否则就删除</span>              localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 储存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端</title>
      <link href="/2022/11/23/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
      <url>/2022/11/23/%E7%A7%BB%E5%8A%A8%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-移动端web开发"><a href="#简介-移动端web开发" class="headerlink" title="简介  移动端web开发"></a>简介  移动端web开发</h1><span id="more"></span><blockquote><p>移动端Web主要指运行在移动端（手机、ipad）的web页面, 具备HTML5特性也叫H5页面、Web App等</p></blockquote><h2 id="移动端基础"><a href="#移动端基础" class="headerlink" title="移动端基础"></a>移动端基础</h2><blockquote><p>兼容移动端主流浏览器，处理Webkit内核浏览器即可。</p></blockquote><h3 id="常见移动端屏幕尺寸"><a href="#常见移动端屏幕尺寸" class="headerlink" title="常见移动端屏幕尺寸"></a>常见移动端屏幕尺寸</h3><img src="/images/常见移动端屏幕尺寸.png"><p>注：以上数据均参考自<strong><a href="https://material.io/devices/">https://material.io/devices/</a></strong></p><h2 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h2><blockquote><p>视口（viewport）就是浏览器显示页面内容的屏幕区域。 视口可以分为布局视口、视觉视口和理想视口</p></blockquote><h3 id="布局视口-layout-viewport"><a href="#布局视口-layout-viewport" class="headerlink" title="布局视口 layout viewport"></a>布局视口 layout viewport</h3><ul><li>一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期的PC端页面在手机上显示的问题。</li><li>iOS, Android基本都将这个视口分辨率设置为 980px，所以PC上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放网页，相当于把网页按比例压缩到手机上</li></ul><p><img src="/images/%E5%B8%83%E5%B1%80%E8%A7%86%E5%8F%A3.png"></p><h3 id="视觉视口-visual-viewport"><a href="#视觉视口-visual-viewport" class="headerlink" title="视觉视口 visual viewport"></a>视觉视口 visual viewport</h3><ul><li>字面意思，它是用户正在看到的网站的区域。<strong>注意：是网站的区域。</strong></li><li>我们可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来的宽度。，相当于只看见了网页的一部分</li></ul><p><img src="/images/%E8%A7%86%E8%A7%89%E8%A7%86%E5%8F%A3.png"></p><h3 id="理想视口-ideal-viewport"><a href="#理想视口-ideal-viewport" class="headerlink" title="理想视口 ideal viewport"></a>理想视口 ideal viewport</h3><ul><li>为了使网站在移动端有最理想的浏览和阅读宽度而设定</li><li>理想视口，对设备来讲，是最理想的视口尺寸</li><li>需要手动添写meta视口标签通知浏览器操作</li><li>meta视口标签的主要目的：布局视口的宽度应该与理想视口的宽度一致，简单理解就是设备有多宽，我们布局的视口就多宽</li></ul><h3 id="meta视口标签"><a href="#meta视口标签" class="headerlink" title="meta视口标签"></a>meta视口标签</h3><pre class="line-numbers language-html"><code class="language-html">//宽度设置为设备宽度 不允许用户缩放 //标准写法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, user-scalable<span class="token punctuation">=</span>no, initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, minimum-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性</th><th>解释说明</th></tr></thead><tbody><tr><td>width</td><td>宽度设置的viewport宽度，可以设置divice-width特殊值</td></tr><tr><td>intial-scale</td><td>初始化缩放比，大于0的数字</td></tr><tr><td>maximum-scale</td><td>最大缩放比，大于0的数字</td></tr><tr><td>minimum-scale</td><td>最小缩放比，大于0的数字</td></tr><tr><td>user-scalable</td><td>用户是否可以缩放，yes or no（1/0）</td></tr></tbody></table><h2 id="二倍图"><a href="#二倍图" class="headerlink" title="二倍图"></a>二倍图</h2><h3 id="物理像素-amp-物理像素比"><a href="#物理像素-amp-物理像素比" class="headerlink" title="物理像素&amp;物理像素比"></a>物理像素&amp;物理像素比</h3><ol><li>物理像素点指的是屏幕显示的最小颗粒，是物理真实存在的。这是厂商在出厂时就设置好了,比如苹果6\7\8 是 750* 1334</li><li>我们开发时候的1px 不是一定等于1个物理像素的</li><li>PC端页面，1个px 等于1个物理像素的，但是移动端就不尽相同</li><li>一个px的能显示的物理像素点的个数，称为物理像素比或屏幕像素</li><li>PC端 和 早前的手机屏幕 / 普通手机屏幕: 1CSS像素 = 1 物理像素的</li><li>Retina（视网膜屏幕）是一种显示技术，可以将把更多的物理像素点压缩至一块屏幕里，从而达到更高的分辨率，并提高屏幕显示的细腻程度。</li></ol><img src="/images/常见移动端屏幕尺寸.png"><h3 id="多倍图"><a href="#多倍图" class="headerlink" title="多倍图"></a>多倍图</h3><ol><li>对于一张 50px * 50px 的图片,在手机 Retina 屏中打开，按照刚才的物理像素比会放大倍数，这样会造成图片模糊</li><li>在标准的viewport设置中，使用倍图来提高图片质量，解决在高清设备中的模糊问题</li><li>通常使用二倍图， 因为iPhone 6\7\8 的影响,但是现在还存在3倍图4倍图的情况，这个看实际开发公司需求</li><li>背景图片 注意缩放问题</li></ol><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 在 iphone8 下面 */</span><span class="token comment" spellcheck="true">/*对于一张50px*50px的图片，在手机端打开，先准备100px*100px的图片，再添加以下属性*/</span> <span class="token selector">img</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*原始图片100*100px*/</span> <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*原始图片100*100px*/</span> <span class="token property">background-size</span><span class="token punctuation">:</span> <span class="token number">50</span>px <span class="token number">50</span>px<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="背景缩放background-size"><a href="#背景缩放background-size" class="headerlink" title="背景缩放background-size"></a>背景缩放background-size</h3><pre class="line-numbers language-css"><code class="language-css"><span class="token property">background-size</span><span class="token punctuation">:</span> <span class="token number">220</span>px <span class="token number">200</span>px<span class="token punctuation">;</span> //背景图片宽度 背景图片高度<span class="token punctuation">;</span><span class="token property">background-size</span><span class="token punctuation">:</span> <span class="token number">220</span>px<span class="token punctuation">;</span>//等比例缩放<span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>//完全覆盖住背景区域<span class="token property">background-size</span><span class="token punctuation">:</span> contain//使图片在背景区域最大 等比例缩放<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>单位： 长度|百分比|cover|contain;</li><li>cover把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。</li><li>contain把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域</li></ol><h2 id="移动端开发选择"><a href="#移动端开发选择" class="headerlink" title="移动端开发选择"></a>移动端开发选择</h2><blockquote><p>现在市场常见的移动端开发有 单独制作移动端页面 和 响应式页面 两种方案<br>现在市场主流的选择还是单独制作移动端页面</p></blockquote><h3 id="单独移动端页面"><a href="#单独移动端页面" class="headerlink" title="单独移动端页面"></a>单独移动端页面</h3><p>通常情况下，网址域名前面加 m(mobile) 可以打开移动端。通过判断设备，如果是移动设备打开，则跳到移动端页面。<br><img src="/images/%E5%8D%95%E7%8B%AC%E7%A7%BB%E5%8A%A8%E7%95%8C%E9%9D%A2.png"></p><h3 id="响应式兼容PC移动"><a href="#响应式兼容PC移动" class="headerlink" title="响应式兼容PC移动"></a>响应式兼容PC移动</h3><p>三星电子官网： <a href="http://www.samsung.com/cn/">www.samsung.com/cn/</a> ，通过判断屏幕宽度来改变样式，以适应不同终端。<br>缺点：制作麻烦， 需要花很大精力去调兼容性问题</p><h2 id="移动端技术解决方案"><a href="#移动端技术解决方案" class="headerlink" title="移动端技术解决方案"></a>移动端技术解决方案</h2><h3 id="移动端浏览器"><a href="#移动端浏览器" class="headerlink" title="移动端浏览器"></a>移动端浏览器</h3><p>移动端浏览器基本以 webkit 内核为主，因此我们就考虑webkit兼容性问题。<br>我们可以放心使用 H5 标签和 CSS3 样式。<br>同时我们浏览器的私有前缀我们只需要考虑添加 webkit 即可<br><img src="/images/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8F%E8%A7%88%E5%99%A8.png"></p><h3 id="CSS初始化-normalize-cs"><a href="#CSS初始化-normalize-cs" class="headerlink" title="CSS初始化 normalize.cs"></a>CSS初始化 normalize.cs</h3><p>移动端 CSS 初始化推荐使用 normalize.css/</p><ol><li>Normalize.css：保护了有价值的默认值</li><li>Normalize.css：修复了浏览器的bug</li><li>Normalize.css：是模块化的</li><li>Normalize.css：拥有详细的文档<br>官网地址： <a href="http://necolas.github.io/normalize.css">http://necolas.github.io/normalize.css</a></li></ol><h3 id="CSS3-盒子模型-box-sizing"><a href="#CSS3-盒子模型-box-sizing" class="headerlink" title="CSS3 盒子模型 box-sizing"></a>CSS3 盒子模型 box-sizing</h3><ul><li>传统模式宽度计算：盒子的宽度 = CSS中设置的width + border + padding </li><li>CSS3盒子模型： 盒子的宽度 = CSS中设置的宽度width 里面包含了 border 和 padding<br>也就是说，我们的CSS3中的盒子模型， padding 和 border 不会撑大盒子了<pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*CSS3盒子模型*/</span><span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*传统盒子模型*/</span><span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol><li>移动端可以全部CSS3 盒子模型</li><li>PC端如果完全需要兼容，我们就用传统模式，如果不考虑兼容性，我们就选择 CSS3 盒子模型</li></ol><h3 id="swiper-插件使用"><a href="#swiper-插件使用" class="headerlink" title="swiper 插件使用"></a>swiper 插件使用</h3><p>官网地址：<a href="https://www.swiper.com.cn/">https://www.swiper.com.cn/</a></p><ul><li>下载需要tml页的css和js文件  h面中 引入相关文件</li><li>官网找到类似案例，复制html结构，css样式  js 语法</li><li> 根据需求定制修改模块<h3 id="特殊样式"><a href="#特殊样式" class="headerlink" title="特殊样式"></a>特殊样式</h3></li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*CSS3盒子模型*/</span><span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token property">-webkit-box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*点击高亮我们需要清除清除 设置为transparent 完成透明*/</span><span class="token property">-webkit-tap-highlight-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*在移动端浏览器默认的外观在iOS上加上这个属性才能给按钮和输入框自定义样式*/</span><span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*禁用长按页面时的弹出菜单*/</span><span class="token selector">img,a </span><span class="token punctuation">{</span> <span class="token property">-webkit-touch-callout</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="移动端常见布局"><a href="#移动端常见布局" class="headerlink" title="移动端常见布局"></a>移动端常见布局</h2><blockquote><p>相比于PC端，移动端打开网页，主要是这两种界面，<strong>单独制作移动端页面</strong>（主流）,响<strong>应式页面</strong>兼容移动端（其次)</p></blockquote><h3 id="单独移动端页面-1"><a href="#单独移动端页面-1" class="headerlink" title="单独移动端页面"></a>单独移动端页面</h3><h4 id="流式布局（百分比布局"><a href="#流式布局（百分比布局" class="headerlink" title="流式布局（百分比布局)"></a>流式布局（百分比布局)</h4><ul><li>流式布局特点</li></ul><ol><li>流式布局，就是百分比布局，也称非固定像素布局。</li><li>通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。</li><li>流式布局方式是移动web开发使用的比较常见的布局方式。</li><li>max-width 最大宽度 （max-height 最大高度） </li><li>min-width 最小宽度 （min-height 最小高度）</li></ol><p><img src="/images/%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80.png"></p><ul><li> 设置视口标签以及引入初始化样式<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, user-scalable<span class="token punctuation">=</span>no, initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, minimum-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/normalize.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/index.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>常用初始化样式<pre class="line-numbers language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*居中对齐*/</span>  <span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token number">320</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 定义最小宽度*/</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">640</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*定义最大的宽度*/</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> -apple-system, Helvetica, sans-serif<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.5</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#666</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>二倍精灵图做法</li></ul><ol><li>在firework里面把精灵图等比例缩放为原来的一半</li><li>之后根据大小 测量坐标</li><li>注意代码里面background-size也要写： 精灵图原来宽度的一半<pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*先一个@2x的精灵图*/</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url(sprites.pngno-repeat -80px 0)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*缩放之后的位置*/</span><span class="token property">background-size</span><span class="token punctuation">:</span> <span class="token number">200</span>px auto<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*原本精灵图宽度是400px*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h4><h5 id="flex布局效果"><a href="#flex布局效果" class="headerlink" title="flex布局效果"></a>flex布局效果</h5><ol><li>操作方便，布局极为简单，移动端应用很广泛</li><li>PC 端浏览器支持情况较差</li><li>IE 11或更低版本，不支持或仅部分支</li><li>如果是PC端页面布局，我们还是传统布局。</li><li>如果是移动端或者不考虑兼容性问题的PC端页面布局，我们还是使用flex弹性布局</li></ol><h5 id="布局原理"><a href="#布局原理" class="headerlink" title="布局原理"></a>布局原理</h5><ul><li>flex 是 flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为 flex 布局。</li></ul><ol><li>当我们为父盒子设为 flex 布局以后，<strong>子元素的 float、clear 和 vertical-align 属性将失效</strong>。</li><li>伸缩布局 = 弹性布局 = 伸缩盒布局 = 弹性盒布局 =flex布</li></ol><ul><li>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”</li></ul><ol><li>体验中 div 就是 flex父容器。</li><li>体验中 span 就是 子容器 flex项目</li><li>子容器可以横向排列也可以纵向排列<img src="/images/flex布局.png" width="600" height="400"></li></ol><p><strong>总结flex布局原理：</strong><br>就是通过给父盒子添加flex属性(<strong>display: flex</strong>)，来控制子盒子的位置和排列方式</p><h5 id="flex布局父项常见属性"><a href="#flex布局父项常见属性" class="headerlink" title="flex布局父项常见属性"></a>flex布局父项常见属性</h5><ul><li><p> 常见父项属性</p><table><thead><tr><th>常见的父项属性</th><th>作用</th></tr></thead><tbody><tr><td>flex-direction：</td><td>设置主轴的方向</td></tr><tr><td>justify-content：</td><td>设置主轴上的子元素排列方式</td></tr><tr><td>flex-wrap：</td><td>设置子元素是否换行</td></tr><tr><td>align-items：</td><td>设置侧轴上的子元素排列方式（单行）</td></tr><tr><td>align-content：</td><td>设置侧轴上的子元素的排列方式（多行）</td></tr><tr><td>flex-flow：</td><td>复合属性，相当于同时设置了 flex-direction 和 flex-wrap</td></tr></tbody></table></li><li><p>flex-direction 设置主轴的方向</p><ul><li>主轴与侧轴<br>在 flex 布局中，是分为主轴和侧轴两个方向，同样的叫法有 ： 行和列、x 轴和y 轴<ol><li>默认主轴方向就是 x 轴方向，水平向右</li><li>默认侧轴方向就是 y 轴方向，水平向下</li></ol></li><li>flex-direction 设置主轴的方向<br>flex-direction 属性决定主轴的方向（<strong>即项目的排列方向</strong>）<br>注意： 主轴和侧轴是会变化的，就看 flex-direction 设置谁为主轴，剩下的就是侧轴。而<strong>子元素是跟着主轴来排列的</strong><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>row</td><td>默认值从左到右</td></tr><tr><td>row-reverse</td><td>从右到左</td></tr><tr><td>column</td><td>从上到下</td></tr><tr><td>column-reverse</td><td>从下到上</td></tr></tbody></table><pre class="line-numbers language-css"><code class="language-css"><span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*默认 x轴是主轴*/</span>flex-direction：row-reverse<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*元素从右到左排列*/</span><span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*设置y轴是主轴 元素从上到下*/</span>flex-direction：column-reverse<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*元素从下到上排列*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>justify-content 设置主轴上的子元素排列方式<br>justify-content 属性定义了项目在主轴上的对齐方式<br><strong>注意：</strong> 使用这个属性之前一定要确定好主轴是哪个</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值 从头部开始 如果主轴是x轴，则从左到右</td></tr><tr><td>flex-end</td><td>从尾部开始排列</td></tr><tr><td>center</td><td>在主轴居中对齐（如果主轴是x轴则 水平居中）</td></tr><tr><td>space-around</td><td>平分剩余空间,子元素外边距改变</td></tr><tr><td>space-between</td><td>先两边贴边 再平分剩余空间（重要)</td></tr></tbody></table></li><li><p>flex-wrap 设置子元素是否换行<br>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，flex布局中默认是不换行的。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>nowrap</td><td>默认值，不换行</td></tr><tr><td>wrap</td><td>换</td></tr></tbody></table><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*子元素在一行显示，如果装不开 缩小子元素的大小*/</span>flex<span class="token operator">-</span>wrap<span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>flex<span class="token operator">-</span>wrap：warp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*换行*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>align-items 设置侧轴上的子元素排列方式（<strong>单行</strong>）<br>该属性是控制子项在侧轴（默认是y轴）上的排列方式 在子项为<strong>单项（单行）</strong>的时候使用</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>从上到下</td></tr><tr><td>flex-end</td><td>从下到上</td></tr><tr><td>center</td><td>挤在一起居中（垂直居中）</td></tr><tr><td>stretch</td><td>拉伸 （默认值) （子元素没有高度时）</td></tr></tbody></table></li><li><p>align-content 设置侧轴上的子元素的排列方式（多行）<br>设置子项在侧轴上的排列方式 并且只能用于子项出现<strong>换行</strong> 的情况（多行），<strong>在单行下是没有效果</strong></p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值在侧轴的头部开始排列</td></tr><tr><td>flex-end</td><td>在侧轴的尾部开始排列</td></tr><tr><td>center</td><td>在侧轴中间显示</td></tr><tr><td>space-around</td><td>子项在侧轴平分剩余空间</td></tr><tr><td>space-between</td><td>子项在侧轴先分布在两头，再平分剩余空间</td></tr><tr><td>stretch</td><td>设置子项元素高度平分父元素高（子元素没有高度时）</td></tr></tbody></table></li></ul><p><img src="/images/flexalign.png"></p><ul><li>flex-flow 复合属性<br>flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性<pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*flex-flow设置主轴方向 是否换行*/</span><span class="token property">flex-flow</span><span class="token punctuation">:</span>row wrap<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*左右排列 换行*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h5 id="flex布局子项常见属性"><a href="#flex布局子项常见属性" class="headerlink" title="flex布局子项常见属性"></a>flex布局子项常见属性</h5><ul><li><p>常见的子项属性</p><table><thead><tr><th>常见的子项属性</th><th>描述</th></tr></thead><tbody><tr><td>flex</td><td>定义子项目分配剩余空间</td></tr><tr><td>align-self</td><td>控制子项自己在侧轴上的排列方式</td></tr><tr><td>order</td><td>属性定义项目的排列顺顺序</td></tr></tbody></table></li><li><p>flex 属性<br>flex 属性定义子项目分配剩余空间，用flex来表示占多少<strong>份数</strong></p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.father</span> <span class="token class">.item</span> </span><span class="token punctuation">{</span><span class="token property">flex</span><span class="token punctuation">:</span> &lt;number><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 默认 0 */</span><span class="token comment" spellcheck="true">/*father的子元素中felx属性之和sum，就是剩余空间的分成的份数*/</span><span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*占据1/sum的剩余空间*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>align-self 控制子项自己在侧轴上的排列方式<br>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。<br>默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">span<span class="token pseudo-class">:nth-child(2)</span> </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 设置自己在侧轴上的排列方式 */</span><span class="token property">align-self</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>order 属性定义项目的排列顺序<br>数值越小，排列越靠前，默认为0。<br>注意：和 z-index 不一样。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span><span class="token property">order</span><span class="token punctuation">:</span> &lt;number><span class="token punctuation">;</span><span class="token property">order</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="rem适配布局"><a href="#rem适配布局" class="headerlink" title="rem适配布局"></a>rem适配布局</h4><blockquote><p>rem适配布局能使页面<strong>文字</strong>、<strong>高度</strong>随屏幕大小而变化，元素高度和宽度<strong>等比例</strong>变化</p></blockquote><h5 id="rem单位"><a href="#rem单位" class="headerlink" title="rem单位"></a>rem单位</h5><p>rem (root em)是一个相对单位，类似于em，em是父元素字体大小。（1em=font-size）<br>不同的是rem的基准是相对于<strong>html元素的字体大小</strong>。<br>比如，根元素（html）设置font-size=12px; 非根元素设置width:2rem; 则换成px表示就是24px。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 根html 为 12px */</span><span class="token selector">html </span><span class="token punctuation">{</span> <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 此时 div 的字体大小就是 24px */</span> <span class="token selector">div </span><span class="token punctuation">{</span> <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">2</span>rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>rem的优势：父元素文字大小可能不一致， 但是整个页面只有一个html，可以很好来控制整个页面的元素大小</p><h5 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h5><ul><li>媒体查询介绍</li></ul><ol><li>媒体查询（Media Query）是CSS3新语法。</li><li>使用 <strong>@media 查询</strong>，可以针对不同的媒体类型定义不同的样式</li><li>@media 可以针对不同的屏幕尺寸设置不同的样式</li><li>当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面</li><li>目前针对很多苹果手机、Android手机，平板等设备都用得到多媒体查询</li></ol><ul><li><p>语法规范</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*@media 开头 注意@符号 mediatype 媒体类型 关键字 and not only*/</span><span class="token atrule"><span class="token rule">@media</span> mediatype and|not|only <span class="token punctuation">(</span>media feature<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*媒体特性*/</span>CSS-Code<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*仅在屏幕类型上 only可省略 在屏幕400px~600px时，设置样式*/</span><span class="token atrule"><span class="token rule">@media</span> only screen and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">)</span></span><span class="token punctuation">{</span><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>mediatype查询类型<br>将不同的终端设备划分成不同的类型，称为<strong>媒体类型</strong></p><table><thead><tr><th>值</th><th>解释说明</th></tr></thead><tbody><tr><td>all</td><td>用于所有设备</td></tr><tr><td>print</td><td>用于打印机和打印预览</td></tr><tr><td>screen</td><td>用于电脑屏幕，平板电脑，智能手机等</td></tr></tbody></table></li><li><p>关键字<br>关键字将<strong>媒体类型或多个媒体特性</strong>连接到一起做为媒体查询的条件。</p><ol><li>and：可以将多个媒体特性连接到一起，相当于“且”的意思。</li><li>not：排除某个媒体类型，相当于“非”的意思，可以省略。</li><li>only：指定某个特定的<strong>媒体类型</strong>，<strong>可以省略</strong>。</li></ol></li><li><p>媒体特性<br>每种媒体类型都具体各自不同的特性，根据不同媒体类型的媒体特性设置不同的展示风格。注意他们要加小括号包含</p><table><thead><tr><th>值</th><th>解释说明</th></tr></thead><tbody><tr><td>width</td><td>定义输出设备中页面可见区域的宽度</td></tr><tr><td>min-width</td><td>定义输出设备中页面最小可见区域宽度</td></tr><tr><td>max-width</td><td>定义输出设备中页面最大可见区域宽度</td></tr></tbody></table></li></ul></li><li><p>媒体查询+rem实现元素动态大小变化</p></li></ul><ol><li>rem单位是跟着html来走的，有了rem页面元素可以设置不同大小尺寸</li><li>媒体查询可以根据不同设备宽度来修改样式</li><li>媒体查询+rem 就可以实现不同设备宽度，实现页面元素大小的动态变化<pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*不同的屏幕大小控制html的字体大小*/</span><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 320px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span> <span class="token selector">html </span><span class="token punctuation">{</span>     <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>640px<span class="token punctuation">)</span></span><span class="token punctuation">{</span> <span class="token selector">html </span><span class="token punctuation">{</span>     <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*高度 字体大小随html的字体大小*/</span><span class="token selector"><span class="token class">.nav</span> </span><span class="token punctuation">{</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1</span>rem<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">.5</span>rem<span class="token punctuation">;</span> <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1</span>rem<span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>引入资源(重点)<br>当样式比较繁多的时候，针对不同的媒体（电脑、平板、手机）使用不同 stylesheets（样式表）。<br>原理，就是直接在link中判断设备的尺寸，然后引用不同的css文件。<pre class="line-numbers language-css"><code class="language-css">&lt;link rel=<span class="token string">"stylesheet"</span> media=<span class="token string">"mediatype and|not|only (media feature)"</span> href=<span class="token string">"mystylesheet.css"</span>><span class="token comment" spellcheck="true">/*400px~799px时调用styleA.css 屏幕尺寸大于800px时 调用styleB.css*/</span>&lt;link rel=<span class="token string">"stylesheet"</span> href=<span class="token string">"styleA.css"</span> media=<span class="token string">"screen and (min-width: 400px)"</span>>&lt;link rel=<span class="token string">"stylesheet"</span> href=<span class="token string">"styleB.css"</span> media=<span class="token string">"screen and (min-width: 800px)"</span>><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="less基础（重点）"><a href="#less基础（重点）" class="headerlink" title="less基础（重点）"></a>less基础（重点）</h5><ul><li><p>Less介绍<br>Less （Leaner Style Sheets 的缩写） 是一门 <strong>CSS 扩展语言</strong>，也成为<strong>CSS预处理器</strong>。<br>做为 CSS 的一种形式的扩展，它并没有减少 CSS 的功能，而是在现有的 CSS 语法上，为CSS加入程序式语言的特性。<br>它在 CSS 的语法基础之上，引入了变量，Mixin（混入），运算以及函数等功能，大大简化了 CSS 的编写，并且<br>降低了 CSS 的维护成本，就像它的名称所说的那样，Less 可以让我们用更少的代码做更多的事情。<br>Less中文网址： <a href="http://lesscss.cn/">http://lesscss.cn/</a><br>常见的CSS预处理器：Sass、Less、Stylus<br>总结：Less 是一门 <strong>CSS 预处理语言，它扩展了CSS的动态特性</strong>。</p></li><li><p>less使用<br>我们首先新建一个后缀名为less的文件， 在这个less文件里面书写less语句。</p><ul><li>less变量<br>变量是指没有固定的值，可以改变的。因为我们CSS中的一些颜色和数值等经常使用<pre class="line-numbers language-less"><code class="language-less"><span class="token comment" spellcheck="true">/*@变量名:值;*/</span><span class="token variable">@color<span class="token punctuation">:</span></span> pink<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*定义一个颜色*/</span><span class="token variable">@font14</span>：<span class="token number">14</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">///定义14px的变量</span><span class="token selector">body</span> <span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">@color</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用变量 颜色为pink</span><span class="token punctuation">}</span><span class="token selector">div</span> <span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@color</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用变量 颜色为pink</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>命名规范</strong></p><ol><li>必须有@为前缀</li><li>不能包含特殊字符</li><li>不能以数字开头</li><li>大小写敏感</li></ol></li><li><p>less编译<br>本质上，Less 包含一套自定义的语法及一个解析器，用户根据这些语法定义自己的样式规则，这些规则最终会通过解析器，编译生成对应的 CSS 文件。<br>所以，我们需要把我们的 less文件，编译生成为css文件，这样我们的html页面才能使用。<br><strong>vocode Less 插件</strong><br>Easy LESS 插件用来把less文件编译为css文件安装完毕插件，重新加载下 vscode。<br>只要保存一下Less文件，会自动生成CSS文件。</p></li></ul><p><img src="/images/less.png"></p><ul><li>less嵌套<ul><li>经常用到选择器的嵌套<pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token id">#header</span> </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#header</span> <span class="token class">.logo</span> </span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>less嵌套写法<pre class="line-numbers language-less"><code class="language-less"><span class="token selector">#header</span> <span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token selector">.logo</span> <span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>交集|伪类|伪元素选择器<ol><li>内层选择器的前面没有 &amp; 符号，则它被解析为父选择器的后代；</li><li>如果有 &amp; 符号，它就被解析为父元素自身或父元素的伪类<pre class="line-numbers language-css"><code class="language-css"><span class="token selector">a<span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>less嵌套写法<pre class="line-numbers language-less"><code class="language-less"><span class="token selector">a</span><span class="token punctuation">{</span><span class="token selector">&amp;:hover</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul></li><li>less运算（重点）<br>任何数字、颜色或者变量都可以参与运算。就是Less提供了加（+）、减（-）、乘（*）、除（/）算术运算。<pre class="line-numbers language-less"><code class="language-less"><span class="token comment" spellcheck="true">/*Less 里面写*/</span><span class="token variable">@witdh<span class="token punctuation">:</span></span> <span class="token number">10</span>px <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token selector">div</span> <span class="token punctuation">{</span><span class="token property">border</span><span class="token punctuation">:</span> <span class="token variable">@witdh</span> solid red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*生成的css*/</span><span class="token selector">div</span> <span class="token punctuation">{</span><span class="token property">border</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">15</span>px <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">)</span>  solid red<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意‘/’运算要加‘()’</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*Less 甚至还可以这样 */</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token variable">@width</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>注意：</strong></p><ol><li>乘号（*）和除号（/）的写法 </li><li>运算符中间左右有个空格隔开 1px + 5</li><li>对于两个不同的单位的值之间的运算，运算结果的值取第一个值的单位</li><li>如果两个值之间只有一个值有单位，则运算结果就取该单位</li></ol><ul><li>rem适配方案</li></ul><ol><li>让一些不能等比自适应的元素，达到当设备尺寸发生改变的时<br>候，等比例适配当前设备。</li><li>使用媒体查询根据不同设备按比例设置html的字体大小，然后<br>页面元素使用rem做尺寸单位，当html字体大小变化元素尺寸<br>也会发生变化，从而达到等比缩放的适配<br>主要有两种布局方案：less + rem + 媒体查询、flexible.js + rem</li></ol><ul><li>less + rem + 媒体查询<br>该布局主要利用less中的@meida，以及其计算能力，使页面能够适应屏幕<br>@import “common”，能将common.less文件引入到index.less中<br>body样式<pre class="line-numbers language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span><span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token number">320</span>px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">15</span>rem<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.5</span><span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span> Arial,Helvetica<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#F2F2F2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>flexible.js + rem<br>flexible.js含有自动调整页面大小以及html字体大小的函数，把我们的界面分为了10等份<br>VSCode的插件cssrem,可以将px转换为rem，默认的html文字大小为16px，可以更改文字大小<br>flexible.js的下载网址 github地址：<a href="https://github.com/amfe/lib-flexible">https://github.com/amfe/lib-flexible</a></li></ul><h3 id="响应式开发"><a href="#响应式开发" class="headerlink" title="响应式开发"></a>响应式开发</h3><blockquote><p>就是使用媒体查询针对不同宽度的设备进行布局和样式的设置，从而适配不同设备的目的。</p></blockquote><h4 id="响应式布局容器"><a href="#响应式布局容器" class="headerlink" title="响应式布局容器"></a>响应式布局容器</h4><blockquote><p>响应式需要一个父级做为布局容器，来配合子级元素来实现变化效果。</p></blockquote><p>原理就是在不同屏幕下，通过媒体查询来改变这个布局容器的大小，再改变里面子元素的排列方式和大小，从而实现不同<br>屏幕下，看到不同的页面布局和样式变化。</p><ul><li>常见的屏幕尺寸划分</li></ul><ol><li>超小屏幕（手机，小于 768px）：设置宽度为 100%</li><li>小屏幕（平板，大于等于 768px）：设置宽度为 750px</li><li>中等屏幕（桌面显示器，大于等于 992px）：宽度设置为 970px</li><li>大屏幕（大桌面显示器，大于等于 1200px）：宽度设置为 1170px <pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">750</span>px<span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*控制每个li的大小*/</span><span class="token selector"><span class="token class">.container</span> ul li </span><span class="token punctuation">{</span> <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">93.75</span>px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*超小屏幕**/</span><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 767px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span> <span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>     <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/*每行3个li*/</span> <span class="token selector"><span class="token class">.container</span> ul li </span><span class="token punctuation">{</span>     <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">33.33%</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span> <span class="token selector"><span class="token class">.container</span></span><span class="token punctuation">{</span>       <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">750</span>px<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 992px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span> <span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>     <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">970</span>px<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span> <span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>     <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1170</span>px<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="Bootstrap前端开发框架"><a href="#Bootstrap前端开发框架" class="headerlink" title="Bootstrap前端开发框架"></a>Bootstrap前端开发框架</h4><h5 id="Bootstrap-简介"><a href="#Bootstrap-简介" class="headerlink" title="Bootstrap 简介"></a>Bootstrap 简介</h5><blockquote><p>Bootstrap 来自 Twitter（推特），是前端框架。Bootstrap 是基于 HTML、CSS 和 JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。</p></blockquote><ol><li>中文官网：<a href="http://www.bootcss.com/">http://www.bootcss.com/</a></li><li>官网：<a href="http://getbootstrap.com/">http://getbootstrap.com/</a></li><li>推荐使用：<a href="https://v3.bootcss.com/">https://v3.bootcss.com/</a></li></ol><p><strong>框架：</strong>顾名思义就是一套架构，它有一套比较完整的网页功能解决方案，而且控制权在框架本身，有预制样式库、组件和插件。使用者要按照框架所规定的某种规范进行开发。</p><ul><li>优点</li></ul><ol><li>标准化的html+css编码规范</li><li>提供了一套简洁、直观、强悍的组件</li><li>有自己的生态圈，不断的更新迭代</li><li>让开发更简单，提高了开发的效率</li></ol><h5 id="Bootstrap-使用"><a href="#Bootstrap-使用" class="headerlink" title="Bootstrap 使用"></a>Bootstrap 使用</h5><blockquote><p>控制权在框架本身，使用者要按照框架所规定的某种规范进行开发</p></blockquote><ul><li>创建文件夹结构<br>访问<a href="https://v3.bootcss.com/">https://v3.bootcss.com/</a> 下载Bootstraps，并解压到web的根目录下</li></ul><p><img src="/images/bootstrap%E4%BD%BF%E7%94%A8.png"></p><ul><li>创建html骨架结构<pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--要求当前网页使用IE浏览器最高版本的内核来渲染--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--视口的设置：视口的宽度和设备一致，默认的缩放比例和PC端一致，用户不能自行缩放--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1, user-scalable<span class="token punctuation">=</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--[if lt IE 9]>&lt;!--解决ie9以下浏览器对html5新增标签的不识别，并导致CSS不起作用的问题--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--解决ie9以下浏览器对 css3 Media Query 的不识别 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://oss.maxcdn.com/respond/1.4.2/respond.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>![endif]--</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>引入相关样式文件<pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Bootstrap 核心样式--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bootstrap/css/bootstrap.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>书写内容</li></ul><ol><li>直接拿Bootstrap 预先定义好的样式来使用</li><li>修改Bootstrap 原来的样式，注意权重问题</li><li>学好Bootstrap 的关键在于知道它定义了哪些样式，以及这些样式能实现什么样的效果</li></ol><h5 id="布局容器"><a href="#布局容器" class="headerlink" title="布局容器"></a>布局容器</h5><blockquote><p>Bootstrap 需要为页面内容和栅格系统包裹一个 <strong>.container</strong> 容器，Bootstarp<strong>预先定义</strong>好了这个类，叫.container，使用时必须是container类</p></blockquote><ul><li>.container 类</li></ul><ol><li>响应式布局的容器 固定宽度</li><li>大屏 ( &gt;=1200px) 宽度定为 1170px</li><li>中屏 ( &gt;=992px) 宽度定为 970px</li><li>小屏 ( &gt;=768px) 宽度定为 750px</li><li>超小屏 (100%) </li></ol><ul><li>container-fluid 类</li></ul><ol><li>流式布局容器 百分百宽度</li><li>占据全部视口（viewport）的容器。</li></ol><h4 id="Bootstrap栅格系统"><a href="#Bootstrap栅格系统" class="headerlink" title="Bootstrap栅格系统"></a>Bootstrap栅格系统</h4><blockquote><p>栅格系统英文为“grid systems”,也有人翻译为“网格系统”，它是指将页面布局划分为等宽的列，然后通过列数<br>的定义来模块化页面布局。</p></blockquote><p>Bootstrap 提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。它包含了易于使用的预定义类，还有强大的mixin 用于生成更具语义的布局。</p><h5 id="栅格选项参数"><a href="#栅格选项参数" class="headerlink" title="栅格选项参数"></a>栅格选项参数</h5><blockquote><p>栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局，内容就可以放入这些创建好的布局中。</p></blockquote><p><strong>栅格选项的使用</strong></p><table><thead><tr><th></th><th>超小屏幕（手机）&lt; 768px</th><th>小屏设备（平板）&gt;=768px</th><th>中等屏幕（桌面显示器）&gt;=992px</th><th>宽屏设备（大桌面显示器）&gt;=1200px</th></tr></thead><tbody><tr><td>.container 最大宽度</td><td>自动(100%)</td><td>750px</td><td>970px</td><td>1170px</td></tr><tr><td>类前缀</td><td>.col-xs-</td><td>.col-sm-</td><td>.col-md-</td><td>.col-lg-</td></tr><tr><td>列（column）数</td><td>12</td><td>12</td><td>12</td><td>12</td></tr></tbody></table><ol><li>按照不同屏幕划分为1~12 等份</li><li>行（row） 可以去除父容器作用15px的边距</li><li>xs-extra small：超小； sm-small：小； md-medium：中等； lg-large：大；</li><li>列（column）大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列</li><li>每一列默认有左右15像素的 padding</li><li>可以同时为一列指定多个设备的类名，以便划分不同份数 例如 class=”col-md-4 col-sm-6”</li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 不同屏幕下每行的个数不同 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 行（row） 可以去除父容器作用15px的边距 高度和父级一样高 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-lg-3 col-md-4 col-sm-6 col-xs-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-lg-3 col-md-4 col-sm-6 col-xs-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-lg-3 col-md-4 col-sm-6 col-xs-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-lg-3 col-md-4 col-sm-6 col-xs-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="列嵌套"><a href="#列嵌套" class="headerlink" title="列嵌套"></a>列嵌套</h5><blockquote><p>栅格系统内置的栅格系统将内容再次嵌套。简单理解就是一个列内再分成若干份小列。我们可以通过添加一个新的 .row 元素和一系<br>列 .col-sm-* 元素到已经存在的 .col-sm-* 元素内。</p></blockquote><p><img src="/images/%E5%88%97%E5%B5%8C%E5%A5%97.png"></p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 列嵌套 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>小列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>小列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="列偏移"><a href="#列偏移" class="headerlink" title="列偏移"></a>列偏移</h5><blockquote><p>通过使用 .col-md-push-* 和 .col-md-pull-* 类就可以很容易的改变列（column）的顺序。</p></blockquote><p><img src="/images/%E5%88%97%E5%81%8F%E7%A7%BB.png"></p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 列偏移 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-lg-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>左侧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 向右移动4份距离 偏移份数等于12-两个盒子的份数 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-lg-4 col-lg-offset-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>右侧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="列排序"><a href="#列排序" class="headerlink" title="列排序"></a>列排序</h5><blockquote><p>通过使用 .col-md-push-* 和 .col-md-pull-* 类就可以很容易的改变列（column）的顺序。</p></blockquote><p><img src="/images/%E5%88%97%E6%8E%92%E5%BA%8F.png"></p><pre class="line-numbers language-html"><code class="language-html"> <span class="token comment" spellcheck="true">&lt;!-- 列排序 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 交换左右位置 --></span>     <span class="token comment" spellcheck="true">&lt;!-- 向右推8份 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-lg-4 col-lg-push-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>左侧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 向左拉4份 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-lg-8 col-lg-pull-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>右侧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="响应式工具-重要"><a href="#响应式工具-重要" class="headerlink" title="响应式工具(重要)"></a>响应式工具(重要)</h5><blockquote><p>为了加快对移动设备友好的页面开发工作，利用媒体查询功能，并使用这些工具类可以方便的针对不同设备展示<br>或隐藏页面内容。</p></blockquote><ul><li><p>hidden隐藏</p><table><thead><tr><th>类名</th><th>超小屏</th><th>小屏</th><th>中屏</th><th>大屏</th></tr></thead><tbody><tr><td>.hidden-xs</td><td>隐藏</td><td>可见</td><td>可见</td><td>可见</td></tr><tr><td>.hidden-sm</td><td>可见</td><td>隐藏</td><td>可见</td><td>可见</td></tr><tr><td>.hidden-md</td><td>可见</td><td>可见</td><td>隐藏</td><td>可见</td></tr><tr><td>.hidden-lg</td><td>可见</td><td>可见</td><td>可见</td><td>隐藏</td></tr></tbody></table></li><li><p>visible显示</p><table><thead><tr><th>类名</th><th>超小屏</th><th>小屏</th><th>中屏</th><th>大屏</th></tr></thead><tbody><tr><td>.visible-xs</td><td>可见</td><td>隐藏</td><td>隐藏</td><td>隐藏</td></tr><tr><td>.visible-sm</td><td>隐藏</td><td>可见</td><td>隐藏</td><td>隐藏</td></tr><tr><td>.visible-md</td><td>隐藏</td><td>隐藏</td><td>可见</td><td>隐藏</td></tr><tr><td>.visible-lg</td><td>隐藏</td><td>隐藏</td><td>隐藏</td><td>可见</td></tr></tbody></table></li></ul><p>Bootstrap 其他（按钮、表单、表格） 请参考Bootstrap 文档</p><blockquote><p>参考<a hraf="https://www.bilibili.com/video/BV14J4114768?p=391&amp;vd_source=580cd891d54084c6f0158e0c631311d8">黑马程序员pink老师前端入门教程，零基础必看的h5(html5)+css3+移动端前端视频教程</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2022/11/11/JavaScript/"/>
      <url>/2022/11/11/JavaScript/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-ECMAScript-DOM-BOM-ES6"><a href="#简介-ECMAScript-DOM-BOM-ES6" class="headerlink" title="简介 ECMAScript DOM BOM ES6"></a>简介 ECMAScript DOM BOM ES6</h1><span id="more"></span><blockquote><p>JavaScript主要包括<strong>JavaScript基础（ECMAScript）Web API（DOM BOM）</strong><br>Web API 是浏览器提供的一套操作浏览器功能和页面元素的 API ( BOM 和 DOM )<br>MDN 详细 API : <a href="https://developer.mozilla.org/zh-CN/docs/Web/API">https://developer.mozilla.org/zh-CN/docs/Web/API</a></p></blockquote><h2 id="ECMAScript（JavaScript基础语法）"><a href="#ECMAScript（JavaScript基础语法）" class="headerlink" title="ECMAScript（JavaScript基础语法）"></a>ECMAScript（JavaScript基础语法）</h2><h3 id="输入、输出"><a href="#输入、输出" class="headerlink" title="输入、输出"></a>输入、输出</h3><table><thead><tr><th>方法</th><th>说明</th><th>归属</th></tr></thead><tbody><tr><td>alert(msg)</td><td>弹出警示框</td><td>浏览器</td></tr><tr><td>console.log(msg)</td><td>控制台打印输出信息</td><td>浏览器</td></tr><tr><td>prompt(info)</td><td>弹出输入框，提示用户输入</td><td>浏览器</td></tr></tbody></table><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><blockquote><p>变量是程序在内存申请的一块用于存放数据的空间</p></blockquote><ul><li>变量的使用<ul><li>声明<br>var age;//s声明一个age的变量</li><li>赋值<br>age=18;</li><li>初始化<br>var age=17;</li></ul></li></ul><p><strong>声明变量的特殊情况</strong></p><table><thead><tr><th>情况</th><th>结果</th></tr></thead><tbody><tr><td>只声明，不赋值</td><td>undefined</td></tr><tr><td>不声明，不赋值，直接用</td><td>报错</td></tr><tr><td>不声明，只赋值</td><td>正常</td></tr></tbody></table><p><strong>命名规范</strong><br>1.不能数字开头<br>2.不能是关键字，保留字<br>3.前面的单词小写，后面的单词首字母大写<br>4.区分大小写</p><h3 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h3><blockquote><p>不同的数据类型占据的内存不同</p></blockquote><p><strong>JavaScripts是、是一种弱类型或者说动态语言</strong>，意味着相同的变量可用作不同的类型</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token operator">=</span> <span class="token string">'bill'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th>简单数据类型</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>Number</td><td>数字型</td><td>0</td></tr><tr><td>Boolean</td><td>布尔型</td><td>false</td></tr><tr><td>String</td><td>字符串型</td><td>“”</td></tr><tr><td>Undefined</td><td>var a,声明了变量没有给值</td><td>Undefined</td></tr><tr><td>Null</td><td>var a =null,声明了变量a为空值</td><td>null</td></tr></tbody></table><p><strong>数字型Number</strong><br>1.num=10;表示十进制<br>2.num=010;表示八进制<br>3.num=0x10;表示十六进制<br>4.num=Infinity;表示无穷大<br>5.num=-Infinity;表示无穷小<br>6.NAN;非数字<br><strong>字符串型</strong><br>1.字符串用’’或””<br>2.字符串中出现引号，用引号嵌套<br>3.字符串可以和任何类型拼接后形成一个新的字符串 ‘+’<br><strong>布尔型</strong><br>1+true=2，参与运算时，true=1，false=0<br><strong>Undefined</strong><br>1.Undefined+1=NaN,Undefined与数字相加，结果是NaN<br>2.Undefined和字符串相加是字符串</p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul><li>转换为字符串</li></ul><table><thead><tr><th>方式</th><th>案例</th></tr></thead><tbody><tr><td>toString()</td><td>num.toString()</td></tr><tr><td>String()</td><td>String(num)</td></tr><tr><td>加号拼接</td><td>10+’’</td></tr></tbody></table><ul><li>转为数字型</li></ul><table><thead><tr><th>方式</th><th>案例</th></tr></thead><tbody><tr><td>parseInt(string)</td><td>parseInt(‘45’)</td></tr><tr><td>parseFloat(string)</td><td>parseFloat(‘15.2’)</td></tr><tr><td>Number()</td><td>Number(‘12’)</td></tr><tr><td>js隐式转换（-*/）</td><td>‘12’-0</td></tr></tbody></table><ul><li>转为布尔型</li></ul><p>Boolean()可以将其他类型转为布尔型，如Boolean(‘true’)<br>代表为空、否定的值都会被转为false，如“”，0，NaN，null，undefined<br>其余值都会被转为true</p><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><blockquote><p>流程控制主要有三种结构，分别是<strong>顺序结构</strong>、<strong>分支结构</strong>和<strong>循环结构</strong></p></blockquote><h4 id="if分支语句"><a href="#if分支语句" class="headerlink" title="if分支语句"></a>if分支语句</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span>条件语句<span class="token punctuation">)</span> <span class="token punctuation">{</span>    执行语句<span class="token comment" spellcheck="true">/*条件语句成立时 执行*/</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    执行语句<span class="token comment" spellcheck="true">/*条件语句不成立时 执行*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h4><p>条件表达式？表达式1：表达式2<br>如果条件为真，则返回表达式1，反之则返回表达式2<br>1&gt;2?1:2 ，返回2</p><h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><p>语法结构</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*利用表达式的值和case后面的选项进行匹配，全等 则执行该case*/</span><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> value1<span class="token punctuation">:</span>          执行语句<span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> value1<span class="token punctuation">:</span>         执行语句<span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> value1<span class="token punctuation">:</span>         执行语句<span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token operator">...</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        执行最后的语句；<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：只有当所有case都匹配不上，才会执行default</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>只有匹配不上才会执行          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出1</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><ul><li>for循环<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span>初始值<span class="token punctuation">;</span>循环条件<span class="token punctuation">;</span>操作表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>  循环体<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>while循环<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//当条件表达式为真时，进入循环，否则退出循环</span> 循环体<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>do-while循环<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">do</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//先执行一次循环</span>  循环体<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><blockquote><p>数组是指<strong>一组数据</strong>的集合，其中每个数据被称为<strong>元素</strong>，在数组中可以存放任意类型的<strong>元素</strong>。</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个空的数组</span><span class="token comment" spellcheck="true">//数组中的元素可以是不同的数据类型</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明一个空数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2.3</span><span class="token punctuation">,</span> <span class="token string">'hello'</span> <span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//利用数组字面量创建数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//访问整个数组数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//访问数组中的第一个元素</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取数值长度</span><span class="token comment" spellcheck="true">//新增数组元素有以下两种方法</span><span class="token comment" spellcheck="true">//1.修改数组长度 </span>arr<span class="token punctuation">.</span>length <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//扩大数组的长度 数组的大小可以任意修改 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//新增的元素为空</span><span class="token comment" spellcheck="true">//2.修改索引号 追加元素</span>arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//原来没有的索引号会追加元素 此时length会自动直接增加</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><blockquote><p>函数就是封装了一段可被<strong>重复调用执行</strong>的代码块</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//function 声明函数的关键字 getSum是函数名 num1和num2是函数的形参</span>    <span class="token keyword">var</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> num1 <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num2 <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*函数的返回值 返回给函数的调用者     return会终止函数     rerun只能返回一个值    return 1,2; return会返回最后一个值2    如果函数没有返回值，则会返回undefined    */</span><span class="token punctuation">}</span><span class="token keyword">var</span> <span class="token keyword">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//另外一种函数声明的方式  采用函数表达式赋值的形式</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'13'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用函数 1和100是函数的实参</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//当函数个数实参大于形参个数时，多余的实参不会传给形参 123没用</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当形参 个数大于实参个数时，形参相当于一个没有赋值的变量 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：js中会先将所有的var和function提到当前作用域的最前面</strong></p><ul><li><strong>预解析分为 变量预解析（变量提升） 和 函数预解析（函数提升）</strong></li><li><strong>变量提升 就是把所有变量声明提升到当前作用域的最前面 不提升复制操作</strong></li><li><strong>变量提升 就是把所有变量声明提升到当前作用域的最前面 不调用函数</strong></li></ul><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><blockquote><p>在JavaScript中，对象是一组无序的相关属性和方法的集合，是指某一特定的事物</p></blockquote><ul><li><p>创建对象</p><ul><li><p>字面量创建对象</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    uname<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//属性 不需要声明 </span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//多个属性值用逗号隔开</span>    sayHi<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//函数是单独声明调用的</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>uname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对象名.属性名 调用对象的属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对象名['属性名'] 调用对象的属性 没有age属性则会返回0</span><span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//可以判断obj中是否有'a'的属性 没有则返回0 表示为假</span>obj<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用对象的方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>new Object 创建对象</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建了一个空的对象 注意对象名的首字母要大写</span>obj<span class="token punctuation">.</span>uname <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//赋值添加对象属性</span>obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>sayHi <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//赋值添加函数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi ~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>uname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对象名.属性名 调用对象的属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对象名['属性名'] 调用对象的属性</span>obj<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用对象的方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>构造函数创建对象</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//构造函数的名字首字母大写</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//需要this赋值</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>sing <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>sang<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//属性和函数前面必须要有this</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sang<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//使用new创建一个对象</span>    <span class="token keyword">var</span> zs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    zs<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token string">'冰雨'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用对象的函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>遍历对象</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">;</span>  age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// for (变量 in 对象) {} </span><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出属性名</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出属性值</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>内置对象</p><blockquote><p>Mozilia开发者网络（MDN）提供了有关开放网络技术（Open Web）的信息，包括HTML、CSS和万维网及HTML5应用的API<br>MDN: <a href="https://developer.mozilla.org/zh-CN">https://developer.mozilla.org/zh-CN</a></p></blockquote></li><li><p>Math对象</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>Math.abs</td><td>取绝对值</td></tr><tr><td>Math.floor</td><td>向下取整</td></tr><tr><td>Math.ceil</td><td>向上取整</td></tr><tr><td>Math.round</td><td>四舍五入</td></tr><tr><td>Math.random</td><td>随机数</td></tr></tbody></table></li><li><p>Date对象</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>getFullYear()</td><td>获取当前年</td></tr><tr><td>getMonth()</td><td>获取当前月,得到的月份比实际小1</td></tr><tr><td>getDate()</td><td>获取当前日</td></tr><tr><td>getDay()</td><td>获取星期几,星期天返回0</td></tr><tr><td>getHours()</td><td>获取当前小时</td></tr><tr><td>getMinutes()</td><td>获取当前分钟</td></tr><tr><td>getSeconds()</td><td>获取当前秒钟</td></tr><tr><td>valueOf()</td><td>返回当前到1970.1.1总的毫秒数</td></tr><tr><td>getTime()</td><td>返回当前到1970.1.1总的毫秒数</td></tr><tr><td>+new Date()</td><td>返回指定时间到1970.1.1总的毫秒数</td></tr><tr><td>Date.now()</td><td>返回当前到1970.1.1总的毫秒数</td></tr></tbody></table></li><li><p>Array数组对象</p><table><thead><tr><th>方法名</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>instanceof</td><td>判断是不是数组</td><td>true/fasle</td></tr><tr><td>Array.isArray()</td><td>判断是不是数组</td><td>true/fasle</td></tr><tr><td>unshift()</td><td>在数组开头添加一个或者多个元素</td><td>返回新数组的长度</td></tr><tr><td>push()</td><td>在数组末尾添加一个或者多个元素</td><td>返回新数组的长度</td></tr><tr><td>shift()</td><td>删除数组的第一一个元素</td><td>返回删除的元素</td></tr><tr><td>pop()</td><td>删除数组的最后一个元素</td><td>返回删除的元素</td></tr><tr><td>reverse()</td><td>翻转数组</td><td>没有返回值</td></tr><tr><td>sort()</td><td>排序</td><td>没有返回值</td></tr><tr><td>indexOf()</td><td>数组中查找给定元素的第一个索引</td><td>如果存在返回索引号，如果不存在，返回-1</td></tr><tr><td>lastIndexOf()</td><td>数组中查找给定元素的最后一个索引</td><td>如果存在返回索引号，如果不存在，返回-1</td></tr><tr><td>join()</td><td>将数组转为字符串</td><td>转成的字符串</td></tr></tbody></table><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建空数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个长度为2的空数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表示数组红有两个数组元素 3 4</span><span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断arr是不是数组</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ie9+ html5新增的</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6.2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//头部添加元素</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span>，<span class="token string">'45'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//尾部追加元素</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除首元素</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除尾元素</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span> b <span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//升序</span>  <span class="token comment" spellcheck="true">//return b-a;//降序</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回下标</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转为字符串 ,分隔符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>字符串对象</p><blockquote><p>字符串里面的内容不可变，给字符串新赋值，改变的地址，=即在内存中新开辟了一个内存空间</p></blockquote><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>indexOf()</td><td>返回索引值</td></tr><tr><td>charAt(index)</td><td>返回指定位置的字符</td></tr><tr><td>charCodeAt(index)</td><td>返回指定位置字符的ASCLL码</td></tr><tr><td>str[index]</td><td>返回指定位置的字符，html5 ie8+支持</td></tr><tr><td>concat(str1,str2…)</td><td>连接两个或者多个字符串 等效于+</td></tr><tr><td>substr(start,length)</td><td>从start位置开始（索引号）length取长度 截取字符串</td></tr><tr><td>slice(start,end)</td><td>从start开始到end 截取字符串</td></tr><tr><td>substring(start,end)</td><td>从start开始到end 截取字符串 end取不到 不接受负值</td></tr><tr><td>replace(‘a’,’b’)</td><td>把’a’替换成’b’,只会替换第一个字符’a’</td></tr><tr><td>split(‘,’)</td><td>将字符串转为数组，以’,’为分隔符</td></tr></tbody></table></li></ul><h2 id="DOM（页面文档对象模型）"><a href="#DOM（页面文档对象模型）" class="headerlink" title="DOM（页面文档对象模型）"></a>DOM（页面文档对象模型）</h2><blockquote><p>文档对象模型（Document Object Model，简称 DOM），是 W3C 组织推荐的处理可扩展标记语言（HTML或者XML）的标准编程接口。<br>W3C 已经定义了一系列的 DOM 接口，通过这些 DOM 接口可以改变网页的内容、结构和样式。</p></blockquote><h3 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h3><p><img src="/images/DOM%E6%A0%91.png"></p><ul><li>文档：一个页面就是一个文档，DOM 中使用 document 表示</li><li>元素：页面中的所有标签都是元素，DOM 中使用 element 表示</li><li>节点：网页中的所有内容都是节点（标签、属性、文本、注释等），DOM 中使用 node 表示</li></ul><p><strong>DOM 把以上内容都看做是对象</strong></p><h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><p>获取页面中的元素可以使用以下几种方式:</p><ul><li>根据 ID 获取</li><li>根据标签名获取</li><li>通过 HTML5 新增的方法获取</li><li>特殊元素获取</li></ul><h4 id="根据-ID-获取"><a href="#根据-ID-获取" class="headerlink" title="根据 ID 获取"></a>根据 ID 获取</h4><p>使用 getElementById() 方法可以获取带有 ID 的元素对象。</p><pre class="line-numbers language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//**element**是一个 Element 对象。</span><span class="token comment" spellcheck="true">//如果当前文档中拥有特定 ID 的元素</span><span class="token comment" spellcheck="true">//不存在则返回 null. **id**是大小写敏感的字符串，代表了所要查找的元素的唯一 ID. </span><span class="token comment" spellcheck="true">// 返回一个匹配到 ID 的 DOM Element 对象。若在当前 Document 下没有找到，则返回 null。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="根据标签名获取"><a href="#根据标签名获取" class="headerlink" title="根据标签名获取"></a>根据标签名获取</h4><p>使用 getElementsByTagName() 方法可以返回带有指定标签名的对象的集合。</p><pre class="line-numbers language-js"><code class="language-js"> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'标签名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// var ol = document.getElementsByTagName('ol'); // [ol]</span><span class="token comment" spellcheck="true">// console.log(ol[0].getElementsByTagName('li'));</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><ul><li>因为得到的是一个对象的集合，所以我们想要操作里面的元素就需要遍历。</li><li>得到元素对象是动态的</li><li>如果获取不到元素,则返回为空的伪数组(因为获取不到对象)</li></ul><h4 id="HTML5新增的方法获取"><a href="#HTML5新增的方法获取" class="headerlink" title="HTML5新增的方法获取"></a>HTML5新增的方法获取</h4><pre class="line-numbers language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'类名'</span><span class="token punctuation">)</span>；<span class="token comment" spellcheck="true">// getElementsByClassName 根据类名获得某些元素集合</span><span class="token comment" spellcheck="true">// querySelector 返回指定选择器的第一个元素对象 切记 里面的选择器需要加符号 .box  #nav</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'选择器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> firstBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// querySelectorAll()返回指定选择器的所有元素对象集合</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'选择器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> allBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> bodyEle <span class="token operator">=</span> doucumnet<span class="token punctuation">.</span>body  <span class="token comment" spellcheck="true">// 返回body元素对象</span><span class="token keyword">var</span> htmlEle <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement  <span class="token comment" spellcheck="true">// 返回html元素对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h3><blockquote><p>JavaScript 使我们有能力创建动态页面，而事件是可以被 JavaScript 侦测到的行为。<br>事件三元素：事件源 事件类型  事件处理程序</p></blockquote><ul><li><p><strong>事件源</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//事件源 获取事件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>事件类型</strong></p><pre class="line-numbers language-js"><code class="language-js">btn<span class="token punctuation">.</span>onclick<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//绑定事件 注册事件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>常见的鼠标事件</strong><table><thead><tr><th>鼠标事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得鼠标焦点触发</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table></li></ul></li><li><p><strong>事件处理程序</strong></p></li></ul><pre class="line-numbers language-js"><code class="language-js">btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//添加事件处理程序  点击事件</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'1231'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//点击事件 弹窗</span><span class="token punctuation">}</span>input<span class="token punctuation">.</span>onfocus <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//焦点事件</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">'1564'</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token punctuation">}</span>input<span class="token punctuation">.</span>onblur <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//失去焦点事件</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">===</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'1564'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>div<span class="token punctuation">.</span>onclick <span class="token operator">=</span> fn<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将fn绑定div.oncclivk fn后面没有‘()’</span><span class="token keyword">function</span> fn <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//创建一个点击事件函数</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'54'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h3><blockquote><p>JavaScript 的 DOM 操作可以改变网页内容、结构和样式，我们可以利用 DOM 操作元素来改变元素里面的内容 、属性等。</p></blockquote><h4 id="改变元素内容"><a href="#改变元素内容" class="headerlink" title="改变元素内容"></a>改变元素内容</h4><ul><li>element.innerText 从起始位置到终止位置的内容, 但它去除 html 标签， 不识别标签，获取时会同时空格和换行也会去掉</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//事件源 获取事件</span><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    div<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'455'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//改变div的内容</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>element.innerHTML 起始位置到终止位置的全部内容，包括 html 标签，获取时会同时保留空格和换行 W3C标准</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//事件源 获取事件</span><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'455'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//改变div的内容</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="改变元素属性"><a href="#改变元素属性" class="headerlink" title="改变元素属性"></a>改变元素属性</h4><p>改变元素的基础属性 在html中设置的属性,修改元素属性： src、href、title等</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//element.属性 获取内置属性（元素自带的属性）</span>img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'images/zxy.jpg'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//直接可以改变图片的属性</span>img<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="改变元素的样式属性"><a href="#改变元素的样式属性" class="headerlink" title="改变元素的样式属性"></a>改变元素的样式属性</h4><p>改变元素的样式属性 在css中设置的属性 JS 修改 style 样式操作，产生的是行内样式，CSS 权重比较高</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//element.style  行内样式操作  样式较少 功能较少</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//element.className 类名样式操作 功能复杂的情况 样式多 </span>div<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'change'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//改变元素的类名 在css中添加change的类 会覆盖掉原来的类名</span><span class="token comment" spellcheck="true">//在css中添加change的类 不会覆盖掉原来的类名</span>div<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'old change'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="表单元素的属性操作"><a href="#表单元素的属性操作" class="headerlink" title="表单元素的属性操作"></a>表单元素的属性操作</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>button<span class="token operator">></span>按钮<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token string">"输入内容"</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">// 1. 获取元素</span>    <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. 注册事件 处理程序</span>    btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// input.innerHTML = '点击了';  这个是 普通盒子 比如 div 标签里面的内容</span>        <span class="token comment" spellcheck="true">// 表单里面的值 文字内容是通过 value 来修改的</span>        input<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'被点击了'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果想要某个表单被禁用 不能再点击 disabled  我们想要这个按钮 button禁用</span>        <span class="token comment" spellcheck="true">// btn.disabled = true;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// this 指向的是事件函数的调用者 btn</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自定义属性操作"><a href="#自定义属性操作" class="headerlink" title="自定义属性操作"></a>自定义属性操作</h4><blockquote><p>自定义属性目的：是为了保存并使用数据。有些数据可以保存到页面中而不用保存到数据库中。</p></blockquote><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>getAttribute(‘属性’)</td><td>获取自定义属性</td></tr><tr><td>setAttribute(‘属性’)</td><td>设置自定义属性</td></tr><tr><td>removeAttribute(‘属性’)</td><td>移除自定义属性</td></tr></tbody></table><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//自定义属性为了和H5的自定义属性相区分 自定义属性一般以‘date-’开头</span><span class="token operator">&lt;</span>div <span class="token keyword">class</span> <span class="token operator">=</span> <span class="token string">'nav'</span> date<span class="token operator">-</span>index <span class="token operator">=</span> <span class="token string">'1'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">//element.getAttribute('属性') 获取自定义属性 主要获取自定义属性</span>div<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'date-index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//index是程序员自己设置的属性</span><span class="token comment" spellcheck="true">//element.setAttribute('属性',值)  可以设置属性值 主要针对于自定义属性</span>div<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'date-index'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//针对以自定义属性</span>div<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">,</span><span class="token string">'footer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以设置元素的类 class特殊 写的就是class 不是className</span><span class="token comment" spellcheck="true">//element.removeAttribute('index');  移除自定义属性</span>div<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">'date-index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="H5自定义属性"><a href="#H5自定义属性" class="headerlink" title="H5自定义属性"></a>H5自定义属性</h4><pre class="line-numbers language-js"><code class="language-js">div<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'date-index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//element.dateset.属性/element.dateset['属性']  H5新增获取自定义属性的方法</span>div<span class="token punctuation">.</span>divdateset<span class="token punctuation">.</span>index<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取自定义属性index</span>div<span class="token punctuation">.</span>divdateset<span class="token punctuation">[</span><span class="token string">'index'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果自定义属性的名字有多个-链接 如date-index-name 只能采用如下的方法</span>div<span class="token punctuation">.</span>divdateset<span class="token punctuation">.</span>indexName<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//采用驼峰命名法调用</span>div<span class="token punctuation">.</span>divdateset<span class="token punctuation">[</span><span class="token string">'indexName'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h3><blockquote><p>利用节点层级关系获取元素,主要靠利用父子兄节点关系获取元素，逻辑性强， 但是兼容性稍差</p></blockquote><h4 id="节点概述"><a href="#节点概述" class="headerlink" title="节点概述"></a>节点概述</h4><p>一般地，节点至少拥有nodeType（节点类型）、nodeName（节点名称）和nodeValue（节点值）这三个基本属性。</p><ul><li>元素节点  nodeType  为 1</li><li>属性节点  nodeType  为 2</li><li>文本节点  nodeType  为 3 （文本节点包含文字、空格、换行等）<br>我们在实际开发中，节点操作主要操作的是元素节点</li></ul><h4 id="节点层级"><a href="#节点层级" class="headerlink" title="节点层级"></a>节点层级</h4><blockquote><p>利用 DOM 树可以把节点划分为不同的层级关系，常见的是父子兄层级关系。</p></blockquote><p><img src="/images/DOM%E6%A0%91.png"></p><ul><li>父级节点<pre class="line-numbers language-js"><code class="language-js">node<span class="token punctuation">.</span>parentNode <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ol><li>parentNode 属性可返回某节点的父节点，注意是<strong>最近的一个父节点</strong></li><li>如果指定的节点没有父节点则返回 null </li></ol><ul><li><p>子节点</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>childNodes</td><td>标准，获取所有的子节点</td></tr><tr><td>children</td><td>非标准，获取所有的元素子字节点</td></tr><tr><td>firstChild</td><td>标准，返回第一个子节点</td></tr><tr><td>lastChild</td><td>标准，返回最后一个子节点</td></tr><tr><td>firstElementChild</td><td>非标准，返回第一个元素子节点  IE9 以上才支持</td></tr><tr><td>lastElementChild</td><td>非标准，返回最后一个元素子节点  IE9 以上才支持</td></tr></tbody></table><ul><li><p>childNodes子节点</p><pre class="line-numbers language-js"><code class="language-js">parentNode<span class="token punctuation">.</span>childNodes<span class="token comment" spellcheck="true">//（标准）返回包含指定节点的子节点的集合，该集合为即时更新的集合。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意：</strong>返回值里面包含了所有的子节点，包括元素节点，文本节点等。<br>如果只想要获得里面的元素节点，则需要专门处理。 所以我们一般<strong>不提倡使用childNodes</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span> <span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ul<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ul<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nodeType <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>     <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ul.childNodes[i]&amp;nbsp;是元素节点</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>children子节点</p><pre class="line-numbers language-js"><code class="language-js">parentNode<span class="token punctuation">.</span>children<span class="token comment" spellcheck="true">//（非标准）</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>parentNode.children 是一个只读属性，返回所有的子元素节点。它只返回<strong>子元素节点</strong>，其余节点不返回 （重点）。<br>虽然children 是一个非标准，但是得到了各个浏览器的支持，因此我们可以放心使用</p></li><li><p>frist last子节点</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//firstChild 返回第一个子节点，找不到则返回null。同样，也是包含所有的节点。</span>parentNode<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//lastChild 返回最后一个子节点，找不到则返回null。同样，也是包含所有的节点。</span>parentNode<span class="token punctuation">.</span>lastChild<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//firstElementChild  返回第一个子元素节点，找不到则返回null。 </span>parentNode<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//lastElementChild 返回最后一个子元素节点，找不到则返回null。</span>parentNode<span class="token punctuation">.</span>lastElementChild<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实际开发中，firstChild 和 lastChild 包含其他节点，操作不方便，</span><span class="token comment" spellcheck="true">//而 firstElementChild 和 lastElementChild 又有兼容性问题,</span><span class="token comment" spellcheck="true">//所以常用以下的方法</span>parentNode<span class="token punctuation">.</span>chilren<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取第一个子元素节点</span>parentNode<span class="token punctuation">.</span>chilren<span class="token punctuation">[</span>parentNode<span class="token punctuation">.</span>chilren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//获取最后一个子元素节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>兄弟节点</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>nextSibling</td><td>返回当前元素的下一个兄弟节点</td></tr><tr><td>previousSibling</td><td>返回当前元素上一个兄弟节点</td></tr><tr><td>nextElementSibling</td><td>返回当前元素下一个兄弟元素节点  IE9 以上才支持</td></tr><tr><td>previousElementSibling</td><td>返回当前元素上一个兄弟节点  IE9 以上才支持</td></tr></tbody></table><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//nextSibling 返回当前元素的下一个兄弟节点，找不到则返回null。同样，也是包含所有的节点。 </span>node<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//previousSibling 返回当前元素上一个兄弟节点，找不到则返回null。同样，也是包含所有的节点。</span>node<span class="token punctuation">.</span>previousSibling<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//nextElementSibling 返回当前元素下一个兄弟元素节点，找不到则返回null。</span>node<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//previousElementSibling 返回当前元素上一个兄弟节点，找不到则返回null。</span>node<span class="token punctuation">.</span>previousElementSibling<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="创建、添加节点"><a href="#创建、添加节点" class="headerlink" title="创建、添加节点"></a>创建、添加节点</h4><ul><li>创建节点<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//创建多个元素效率稍低一点点，但是结构更清晰</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'tagName'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建了新的元素</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;div>123&lt;/div>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用较少</span><span class="token comment" spellcheck="true">//innerHTML 创建多个元素效率更高（不要拼接字符串，采取数组形式拼接）结构稍微复杂</span>element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token operator">&lt;</span>a href <span class="token operator">=</span><span class="token string">'#'</span><span class="token operator">></span>链接<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是将内容写入某个 DOM 节点，不会导致页面全部重绘</span><span class="token comment" spellcheck="true">// 开创了新的空间 不同的拼接方式 所消耗的时间不同 </span><span class="token comment" spellcheck="true">// 1.字符串拼接  所消耗的时间约为3000ms</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i  <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  element<span class="token punctuation">.</span>innerHTML <span class="token operator">+</span><span class="token operator">=</span> <span class="token operator">&lt;</span>a href <span class="token operator">=</span><span class="token string">'#'</span><span class="token operator">></span>链接<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2.数组拼接  所消耗的时间约为8ms</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i  <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'&lt;a href ='</span>#<span class="token string">'>链接&lt;/a>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将arr转化为字符串 拼接给element</span><span class="token comment" spellcheck="true">//createElement的效率 所消耗的时间约为20ms</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i  <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>document.createElement() 方法创建由 tagName 指定的 HTML 元素。因为这些元素原先不存在，是根据我们的需求动态生成的，所以我们也称为<strong>动态创建元素节点</strong>。<br>document.write 是直接将内容写入页面的内容流，但是文档流执行完毕（例如点击事件），则它会导致页面全部重绘，会将<strong>页面全部覆盖</strong>。</li></ul><p><strong>总结：</strong>不同浏览器下，innerHTML 数组形式拼接效率要比 creatElement 高</p><ul><li>添加节点<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//node.appendChild() 方法将一个节点添加到指定父节点的子节点列表末尾。类似于 CSS 里面的 after 伪元素。</span>node<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//node.insertBefore() 方法将一个节点添加到父节点的指定子节点前面。类似于 CSS 里面的 before 伪元素。</span>node<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> 指定元素<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建节点和添加节点经常一起使用</span><span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取父元素</span><span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建子节点</span>ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把子节点添加到父元素中</span>ul<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>ul<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把子节点放到父元素子节点的最前面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//node.removeChild() 方法从 DOM 中删除一个子节点，返回删除的节点。</span>node<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>ul<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去掉ul的第一个元素子节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="复制节点"><a href="#复制节点" class="headerlink" title="复制节点"></a>复制节点</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//node.cloneNode() 方法返回调用该方法的节点的一个副本。 也称为克隆节点/拷贝节点</span>node<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//浅拷贝 只复制标签 不复制内容</span>node<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> li <span class="token operator">=</span> ul<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//复制ul的第一个子节点</span>ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加子节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ol><li>如果括号参数为空或者为 false ，则是浅拷贝，即只克隆复制节点本身，不克隆里面的子节点。</li><li>如果括号参数为 true ，则是深度拷贝，会复制节点本身以及里面所有的子节点</li></ol><h3 id="事件高级"><a href="#事件高级" class="headerlink" title="事件高级"></a>事件高级</h3><h4 id="注册事件-绑定事件"><a href="#注册事件-绑定事件" class="headerlink" title="注册事件(绑定事件)"></a>注册事件(绑定事件)</h4><blockquote><p>给元素添加事件，称为注册事件或者绑定事件。<br>注册事件有两种方式：传统方式和方法监听注册方式</p></blockquote><ul><li>传统注册方式<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//利用 on 开头的事件 onclick </span>button<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token function">fuction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hi~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>特点：</strong> 注册事件的<strong>唯一性</strong>,<strong>同一个元素同一个事件</strong>只能设置一个处理函数，最后注册的处理函数将会<strong>覆盖</strong>前面注册的处理函数</p><ul><li>addEventListener 方法监听注册方式<pre class="line-numbers language-js"><code class="language-js">eventTarget<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> listener<span class="token punctuation">[</span><span class="token punctuation">,</span> useCapture<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//事件类型是字符串</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//同一个元素同一个事件可以多次添加</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'321'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>eventTarget.addEventListener()方法将指定的监听器注册到 eventTarget（目标对象）上，当该对象触发指定的事件时，就会执行事件处理函数，<strong>IE9以上才支持</strong>。<br>该方法接收三个参数：</li></ul><ol><li>type：事件类型字符串，比如 click 、mouseover ，注意这里不要带 on</li><li>listener：事件处理函数，事件发生时，会调用该监听函数</li><li>useCapture：可选参数，是一个布尔值，默认是 false。</li></ol><ul><li>attachEvent 事件监听方式（不推荐使用）<pre class="line-numbers language-js"><code class="language-js">eventTarget<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span>eventNameWithOn<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'onclick'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'321'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>eventTarget.attachEvent()方法将指定的监听器注册到 eventTarget（目标对象） 上，当该对象触发指定的事件时，指定的回调函数就会被执行，<strong>IE9以上不支持</strong>。<br>该方法接收两个参数：</li></ul><ol><li>eventNameWithOn：事件类型字符串，比如 onclick 、onmouseover ，这里要带 on</li><li>callback： 事件处理函数，当目标触发事件时回调函数被调用</li></ol><p><strong>注意：IE8 及早期版本支持</strong></p><h4 id="删除事件（解绑事件）"><a href="#删除事件（解绑事件）" class="headerlink" title="删除事件（解绑事件）"></a>删除事件（解绑事件）</h4><blockquote><p>某个元素的某个事件只想让其执行一次，这是需要解绑事件</p></blockquote><ul><li>传统解绑方式<pre class="line-numbers language-js"><code class="language-js">div<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token function">fuction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//一般元素没有禁用属性</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hi~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  div<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//点击事件为空</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>removeEventListener 方法监听解绑方式<pre class="line-numbers language-js"><code class="language-js">div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//fn后面没有‘()’</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//新建一个点击事件</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'54'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//解绑方式 不能用匿名函数</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>detachEvent 方法监听解绑方式（不推荐使用）<pre class="line-numbers language-js"><code class="language-js">div<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//fn后面没有‘()’  IE9以上不支持</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//新建一个点击事件</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'54'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//解绑方式 不能用匿名函数</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h3><blockquote><p>事件流描述的是从页面中接收事件的顺序。<br>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即 DOM 事件流</p></blockquote><p>比如我们给一个div 注册了点击事件：<br>DOM 事件流分为3个阶段： </p><ol><li>捕获阶段</li><li>当前目标阶段</li><li>冒泡阶段<br><img src="/images/DOM%E4%BA%8B%E4%BB%B6%E6%B5%81.png"><br>事件冒泡： IE 最早提出，事件开始时由最具体的元素接收，然后逐级向上传播到到 DOM 最顶层节点的过程。<br>事件捕获： 网景最早提出，由 DOM 最顶层节点开始，然后逐级向下传播到到最具体的元素接收的过程。 <pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// dom 事件流 三个阶段</span>     <span class="token comment" spellcheck="true">// 1. JS 代码中只能执行捕获或者冒泡其中的一个阶段。</span>     <span class="token comment" spellcheck="true">// 2. onclick 和 attachEvent（ie） 只能得到冒泡阶段。</span>     <span class="token comment" spellcheck="true">// 3. 捕获阶段 如果addEventListener 第三个参数是 true 那么则处于捕获阶段  document -> html -> body -> father -> son</span>     <span class="token keyword">var</span> son <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.son'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     son<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'son'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">//true</span>     <span class="token keyword">var</span> father <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.father'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     father<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//点击‘son’会先弹出‘father’</span>         <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'father'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 4. 冒泡阶段 如果addEventListener 第三个参数是 false 或者 省略 那么则处于冒泡阶段  son -> father ->body -> html -> document</span>     <span class="token keyword">var</span> son <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.son'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     son<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//点击‘son’会先弹出‘son’</span>         <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'son'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">var</span> father <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.father'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     father<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'father'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">//false</span>     document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'document'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><strong>注意</strong></p><ol><li>JS 代码中只能执行捕获或者冒泡其中的一个阶段。</li><li>onclick 和 attachEvent 只能得到冒泡阶段。</li><li>addEventListener(type, listener[, useCapture])第三个参数如果是 true，表示在事件捕获阶段调用事件处理程序；如果是 false（不写默认就是false），表示在事件冒泡阶段调用事件处理程序。</li><li>实际开发中我们很少使用事件捕获，我们更关注事件冒泡。</li><li>有些事件是没有冒泡的，比如 onblur、onfocus、onmouseenter、onmouseleave</li><li>事件冒泡有时候会带来麻烦，有时候又会帮助很巧妙的做某些事件。</li></ol><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><h4 id="事件对象的介绍"><a href="#事件对象的介绍" class="headerlink" title="事件对象的介绍"></a>事件对象的介绍</h4><blockquote><p>官方解释：event 对象代表事件的状态，比如键盘按键的状态、鼠标的位置、鼠标按钮的状态。<br>简单理解：事件发生后，跟事件相关的一系列信息数据的集合都放到这个对象里面，这个对象就是事件对象 event，它有很多属性和方法。</p></blockquote><pre class="line-numbers language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// 事件对象</span>eventTarget<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> eventTarget<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 这个 event 就是事件对象，我们还喜欢的写成 e 或者 evt</span><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(e); IE8及以下支持</span>        <span class="token comment" spellcheck="true">// console.log(window.event);  IE9及以上支持</span>        e <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//兼容性处理</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ol><li>event 就是一个事件对象 写到我们侦听函数的 小括号里面 当形参来看</li><li>事件对象只有有了事件才会存在，它是系统给我们自动创建的，不需要我们传递参数</li><li>事件对象 是 我们事件的一系列相关数据的集合 跟事件相关的 比如鼠标点击里面就包含了鼠标的相关信息，鼠标坐标啊，如果是键盘事件里面就包含的键盘事件的信息 比如 判断用户按下了那个键</li><li>这个事件对象我们可以自己命名 比如 event 、 evt、 e</li><li>事件对象也有兼容性问题 ie678 通过 window.event 兼容性的写法  e = e || window.event;</li></ol><h4 id="事件对象的常见属性和方法"><a href="#事件对象的常见属性和方法" class="headerlink" title="事件对象的常见属性和方法"></a>事件对象的常见属性和方法</h4><table><thead><tr><th>事件对象属性方法</th><th>说明</th><th>是否标准</th></tr></thead><tbody><tr><td>e.target</td><td>返回触发事件的对象</td><td>标准</td></tr><tr><td>e.srcElement</td><td>返回触发事件的对象，ie6-8使用</td><td>非标准</td></tr><tr><td>e.type</td><td>返回事件类型 比如click mouseover 不带on</td><td>标准</td></tr><tr><td>e.cancelBubble</td><td>该属性阻止冒泡，ie6-8使用</td><td>非标准</td></tr><tr><td>e.returnValue</td><td>该属性阻止默认事件（默认行为），比如不让链接跳转，ie6-8使用</td><td>非标准</td></tr><tr><td>e.preventDefault()</td><td>该方法 阻止默认事件（默认行为）比如不让链接跳转</td><td>标准</td></tr><tr><td>e.stopPropagation()</td><td>阻止冒泡</td><td>标准</td></tr></tbody></table><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 常见事件对象的属性和方法</span><span class="token comment" spellcheck="true">// 1. e.target 返回的是触发事件的对象（元素）  this 返回的是绑定事件的对象（元素）</span><span class="token comment" spellcheck="true">// 区别 ： e.target 点击了那个元素，就返回那个元素 this 那个元素绑定了这个点击事件，那么就返回谁</span><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ul<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 我们给ul 绑定了事件  那么this 就指向ul  </span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// e.target 指向我们点击的那个对象 谁触发了这个事件 我们点击的是li e.target 指向的就是li</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//  返回事件类型</span>div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseover'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseout'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//阻止默认行为（事件） 让链接不跳转 或者让提交按钮不提交</span><span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  dom 标准写法  实际开发中最常用的</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 传统的注册方式</span>a<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 普通浏览器 e.preventDefault();  方法</span> e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 低版本浏览器 ie678  returnValue  属性</span> e<span class="token punctuation">.</span>returnValue<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 我们可以利用return false 也能阻止默认行为 没有兼容性问题 特点： return 后面的代码不执行了， 而且只限于传统的注册方式</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//阻止冒泡</span><span class="token comment" spellcheck="true">//标准写法：利用事件对象里面的 stopPropagation()方法</span>e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//非标准写法：IE 6-8  利用事件对象 cancelBubble 属性</span>e<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件委托（代理、委派）"><a href="#事件委托（代理、委派）" class="headerlink" title="事件委托（代理、委派）"></a>事件委托（代理、委派）</h3><p><strong>事件委托</strong><br>事件委托也称为事件代理， 在 jQuery 里面称为事件委派。<br><strong>事件委托的原理</strong><br>不是每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个子节点。<br>以上案例：给 ul 注册点击事件，然后利用事件对象的 target 来找到当前点击的 li，因为点击 li，事件会冒泡到 ul 上， ul 有注册事件，就会触发事件监听器。<br><strong>事件委托的作用</strong><br>我们只操作了一次 DOM ，提高了程序的性能。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 事件委托的核心原理：给父节点添加侦听器， 利用事件冒泡影响每一个子节点</span><span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ul<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// alert('知否知否，点我应有弹框在手！');</span>    <span class="token comment" spellcheck="true">// e.target 这个可以得到我们点击的对象</span>    e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'pink'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用的鼠标事件"><a href="#常用的鼠标事件" class="headerlink" title="常用的鼠标事件"></a>常用的鼠标事件</h3><h4 id="常用的鼠标事件-1"><a href="#常用的鼠标事件-1" class="headerlink" title="常用的鼠标事件"></a>常用的鼠标事件</h4><table><thead><tr><th>鼠标事件</th><th>触发条件</th></tr></thead><tbody><tr><td>click</td><td>鼠标点击左键触发</td></tr><tr><td>mouseover</td><td>鼠标经过触发</td></tr><tr><td>mouseenter</td><td>鼠标经过触发(不冒泡)</td></tr><tr><td>mouseout</td><td>鼠标离开触发</td></tr><tr><td>mouseleave</td><td>鼠标离开触发(不冒泡)</td></tr><tr><td>focus</td><td>获得鼠标焦点触发</td></tr><tr><td>blur</td><td>失去鼠标焦点触发</td></tr><tr><td>mousemove</td><td>鼠标移动触发</td></tr><tr><td>mouseup</td><td>鼠标弹起触发</td></tr><tr><td>mousedown</td><td>鼠标按下触发</td></tr><tr><td>contextmenu</td><td>禁止鼠标右键菜单</td></tr><tr><td>selectstart</td><td>禁止鼠标选中</td></tr></tbody></table><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. contextmenu 我们可以禁用右键菜单</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'contextmenu'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 禁止选中文字 selectstart</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'selectstart'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//mouseover 鼠标经过自身盒子会触发，经过子盒子还会触发。 mouseenter  只会经过自身盒子触发</span><span class="token keyword">var</span> father <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.father'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> son <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.son'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>father<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseenter'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//mouseenter不会冒泡</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>father<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseover'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>father<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseleave'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//mouseleave不会冒泡</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>father<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseout'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="鼠标事件对象"><a href="#鼠标事件对象" class="headerlink" title="鼠标事件对象"></a>鼠标事件对象</h4><blockquote><p>event对象代表事件的状态，跟事件相关的一系列信息的集合。现阶段我们主要是用鼠标事件对象 MouseEvent 和键盘事件对象 KeyboardEvent。</p></blockquote><table><thead><tr><th>鼠标事件对象</th><th>说明</th></tr></thead><tbody><tr><td>e.clientX</td><td>返回鼠标相对于浏览器窗口可视区的x坐标</td></tr><tr><td>e.clientY</td><td>返回鼠标相对于浏览器窗口可视区的y坐标</td></tr><tr><td>e.pageX</td><td>返回鼠标相对于文档页面的x坐标 IE9+支持</td></tr><tr><td>e.pageY</td><td>返回鼠标相对于文档页面的y坐标 IE9+支持</td></tr><tr><td>e.screenX</td><td>返回鼠标相对于电脑屏幕的x坐标</td></tr><tr><td>e.screenY</td><td>返回鼠标相对于电脑屏幕的y坐标</td></tr></tbody></table><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span> <span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    img<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意要加单位</span>    img<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用的键盘事件"><a href="#常用的键盘事件" class="headerlink" title="常用的键盘事件"></a>常用的键盘事件</h3><h4 id="常用键盘事件"><a href="#常用键盘事件" class="headerlink" title="常用键盘事件"></a>常用键盘事件</h4><table><thead><tr><th>键盘事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onkeyup</td><td>某个键盘按键被松开时触发</td></tr><tr><td>onkeydown</td><td>某个键盘按键被按下时触发</td></tr><tr><td>onkeypress</td><td>某个按键时 触发 但它不识别功能键 ctrl shift</td></tr></tbody></table><p>注意： </p><ol><li> 如果使用addEventListener 不需要加 on</li><li>onkeypress 和前面2个的区别是，它不识别功能键，比如左右箭头，shift 等。</li><li>三个事件的执行顺序是： keydown –  keypress  — keyup</li></ol><h4 id="键盘事件对象"><a href="#键盘事件对象" class="headerlink" title="键盘事件对象"></a>键盘事件对象</h4><pre class="line-numbers language-js"><code class="language-js">e<span class="token punctuation">.</span>keyCode <span class="token comment" spellcheck="true">//返回按键的ASCLL值</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span> <span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//键盘松开事件</span>    <span class="token comment" spellcheck="true">//keyup和keydown不区分大小写 a和A都是65</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BOM（浏览器对象模型）"><a href="#BOM（浏览器对象模型）" class="headerlink" title="BOM（浏览器对象模型）"></a>BOM（浏览器对象模型）</h2><blockquote><p>BOM（Browser Object Model）即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是 window。<br>BOM 由一系列相关的对象构成，并且每个对象都提供了很多方法与属性。<br>BOM 缺乏标准，JavaScript 语法的标准化组织是 ECMA，DOM 的标准化组织是 W3C，BOM 最初是Netscape 浏览器标准的一部分。</p></blockquote><h3 id="BOM-的构成"><a href="#BOM-的构成" class="headerlink" title="BOM 的构成"></a>BOM 的构成</h3><p><img src="/images/BOM%E7%9A%84%E6%9E%84%E6%88%90.png"></p><ul><li>浏览器对象模型</li><li>把「浏览器」当做一个「对象」来看待</li><li>BOM 的顶级对象是 window</li><li>BOM 学习的是浏览器窗口交互的一些对象</li><li>BOM 是浏览器厂商在各自浏览器上定义的，兼容性较差</li><li>window 对象是浏览器的顶级对象，它具有双重角色。</li><li>它是 JS 访问浏览器窗口的一个接口。</li><li>它是一个全局对象。定义在全局作用域中的变量、函数都会变成 window 对象的属性和方法。</li><li>在调用的时候可以省略 window，对话框都属于 window 对象方法，如 alert()、prompt() 等</li></ul><h3 id="window对象常见的事件"><a href="#window对象常见的事件" class="headerlink" title="window对象常见的事件"></a>window对象常见的事件</h3><h4 id="窗口加载事件"><a href="#窗口加载事件" class="headerlink" title="窗口加载事件"></a>窗口加载事件</h4><ul><li>load 窗口加载事件<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//window.onload 是窗口 (页面）加载事件,当文档内容完全加载完成会触发该事件(包括图像、脚本文件、CSS 文件等), 就调用的处理函数。</span>window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//页面内的内容全部加载完毕才会触发</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>注意：</strong></p><ol><li>有了 window.onload 就可以把 JS 代码写到页面元素的上方，因为 onload 是等页面内容全部加载完毕，再去执行处理函数。</li><li>window.onload 传统注册事件方式 只能写一次，如果有多个，会以最后一个 window.onload 为准。</li><li>如果使用 addEventListener 则没有限制</li></ol><ul><li>DOMContentLoaded 窗口加载事件<pre class="line-numbers language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//DOM加载完毕就触发 比load更快</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ol><li>DOMContentLoaded&nbsp;事件触发时，仅当DOM加载完成，不包括样式表，图片，flash等等。</li><li>Ie9以上才支持</li><li>如果页面的图片很多的话, 从用户访问到onload触发可能需要较长的时间,&nbsp;交互效果就不能实现，必然影响用户的体验，此时用 DOMContentLoaded 事件比较合适。</li></ol><h4 id="调节窗口大小事件"><a href="#调节窗口大小事件" class="headerlink" title="调节窗口大小事件"></a>调节窗口大小事件</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//window.onresize 是调整窗口大小加载事件,  当触发时就调用的处理函数。</span>window<span class="token punctuation">.</span>onresize <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//当窗口大小改变时触发</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ol><li>只要窗口大小发生像素变化，就会触发这个事件。</li><li>我们经常利用这个事件完成响应式布局。 window.innerWidth 当前屏幕的宽度</li></ol><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><h4 id="setTimeout-定时器"><a href="#setTimeout-定时器" class="headerlink" title="setTimeout 定时器"></a>setTimeout 定时器</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//  setTimeout </span><span class="token comment" spellcheck="true">// 语法规范：  window.setTimeout(调用函数, 延时时间);</span><span class="token comment" spellcheck="true">// 1. 这个window在调用的时候可以省略</span><span class="token comment" spellcheck="true">// 2. 这个延时时间单位是毫秒 但是可以省略，如果省略默认的是0</span><span class="token comment" spellcheck="true">// 3. 这个调用函数可以直接写函数 还可以写 函数名 还有一个写法 '函数名()'</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//时间到了就调用这个函数 只会调用一次</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'时间到了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'爆炸了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 4. 页面中可能有很多的定时器，我们经常给定时器加标识符 （名字)</span><span class="token keyword">var</span> timer1 <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> timer2 <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// setTimeout('callback()', 3000);  不提倡这个写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="clearTimeout-清除定时器"><a href="#clearTimeout-清除定时器" class="headerlink" title="clearTimeout()清除定时器"></a>clearTimeout()清除定时器</h4><pre class="line-numbers language-js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutID<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//定时器ID</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'爆炸了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//clearTimeout()方法取消了先前通过调用 setTimeout() 建立的定时器。</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清除定时器</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ol><li>window 可以省略。</li><li>里面的参数就是定时器的标识符 。</li></ol><h4 id="setInterval-定时器"><a href="#setInterval-定时器" class="headerlink" title="setInterval() 定时器"></a>setInterval() 定时器</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//setInterval() 方法重复调用一个函数，每隔这个时间，就去调用一次回调函数。</span>window<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span>回调函数<span class="token punctuation">,</span> <span class="token punctuation">[</span>间隔的毫秒数<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不会停歇</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//每隔这个延迟时间，就会调用这个函数，不会停止</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ol><li>window 可以省略。</li><li>这个调用函数可以直接写函数，或者写函数名或者采取字符串 ‘函数名()’  三种形式。</li><li>间隔的毫秒数省略默认是 0，如果写，必须是毫秒，表示每隔多少毫秒就自动调用这个函数。</li><li>因为定时器可能有很多，所以我们经常给定时器赋值一个标识符。</li><li>第一次执行也是间隔毫秒数之后执行，之后每隔毫秒数就执行一次。</li></ol><h4 id="clearInterval-清除定时器"><a href="#clearInterval-清除定时器" class="headerlink" title="clearInterval()清除定时器"></a>clearInterval()清除定时器</h4><pre class="line-numbers language-js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>intervalID<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//定时器ID</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'爆炸了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//clearTimeout()方法取消了先前通过调用 setTimeout() 建立的定时器。</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清除定时器</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JS执行队列"><a href="#JS执行队列" class="headerlink" title="JS执行队列"></a>JS执行队列</h3><blockquote><p>JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。这是因为 Javascript 这门脚本语言诞生的使命所致——JavaScript 是为处理页面中用户的交互，以及操作 DOM 而诞生的。比如我们对某个 DOM 元素进行添加和删除操作，不能同时进行。 应该先进行添加，之后再删除。<br>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。这样所导致的问题是： 如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</p></blockquote><h4 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h4><blockquote><p>利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建<strong>多个线程</strong>。于是，JS 中出现了同步和异步。</p></blockquote><ul><li>同步任务<br>同步任务都在主线程上执行，形成一个执行栈</li><li>异步任务<br>JS 的异步是通过回调函数实现的。<br>一般而言，异步任务有以下三种类型:</li></ul><ol><li>普通事件，如 click、resize 等</li><li>资源加载，如 load、error 等</li><li>定时器，包括 setInterval、setTimeout 等<br>异步任务相关回调函数添加到任务队列中（任务队列也称为消息队列）。</li></ol><h4 id="JS-执行机制"><a href="#JS-执行机制" class="headerlink" title="JS 执行机制"></a>JS 执行机制</h4><ol><li>先执行执行栈中的同步任务。</li><li>异步任务（回调函数）放入任务队列中。</li><li>一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行。</li></ol><p><img src="/images/JS%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B61.png"><br><img src="/images/JS%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B62.png"></p><p><strong>web API(异步API)决定是否将异步任务放在任务队列中</strong><br>由于主线程不断的重复获得任务、执行任务、再获取任务、再执行，所以这种机制被称为<strong>事件循环（ event loop）</strong>。</p><h3 id="location-对象"><a href="#location-对象" class="headerlink" title="location 对象"></a>location 对象</h3><blockquote><p>window 对象给我们提供了一个 location 属性用于获取或设置窗体的 URL，并且可以用于解析 URL 。 因为这个属性返回的是一个对象，所以我们将这个属性也称为 location 对象。</p></blockquote><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><blockquote><p>统一资源定位符 (Uniform Resource Locator, URL) 是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的 URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。</p></blockquote><pre class="line-numbers language-js"><code class="language-js">protocol<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>host<span class="token punctuation">[</span><span class="token punctuation">:</span>port<span class="token punctuation">]</span><span class="token operator">/</span>path<span class="token operator">/</span><span class="token punctuation">[</span><span class="token operator">?</span>query<span class="token punctuation">]</span>#fragmenthttp<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>cn<span class="token operator">/</span>index<span class="token punctuation">.</span>html<span class="token operator">?</span>name<span class="token operator">=</span>andy<span class="token operator">&amp;</span>age<span class="token operator">=</span><span class="token number">18</span>#link<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/URL.png"></p><h4 id="location-对象的属性"><a href="#location-对象的属性" class="headerlink" title="location 对象的属性"></a>location 对象的属性</h4><table><thead><tr><th>location对象属性</th><th>返回值</th></tr></thead><tbody><tr><td>location.href</td><td>获取或者设置整个URL</td></tr><tr><td>location.host</td><td>返回主机（域名）</td></tr><tr><td>location.port</td><td>返回端口号 如果未填写 返回空字符串</td></tr><tr><td>location.pathname</td><td>返回路径</td></tr><tr><td>location.search</td><td>返回参数</td></tr><tr><td>location.hash</td><td>返回片段 #后面内容 常见于链接锚点</td></tr></tbody></table><pre class="line-numbers language-js"><code class="language-js">btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log(location.href);</span>    location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'http://www.itcast.cn'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实现页面的跳转</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="location-对象的方法"><a href="#location-对象的方法" class="headerlink" title="location 对象的方法"></a>location 对象的方法</h4><table><thead><tr><th>location对象方法</th><th>返回值</th></tr></thead><tbody><tr><td>location.assign()</td><td>跟href一样，可以跳转界面（也成为重定向界面）可以后退</td></tr><tr><td>location.replace()</td><td>替换当前界面，因为不记录，所有不能后退</td></tr><tr><td>location.reload()</td><td>重新加载界面，相当于刷新界面，如果参数为true 强制刷新</td></tr></tbody></table><h3 id="navigator-对象"><a href="#navigator-对象" class="headerlink" title="navigator 对象"></a>navigator 对象</h3><blockquote><p>navigator 对象包含有关浏览器的信息，它有很多属性，我们最常用的是 userAgent，该属性可以返回由客户机发送服务器的 user-agent 头部的值。</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断是不是移动端</span>    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//手机</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//电脑</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="history-对象"><a href="#history-对象" class="headerlink" title="history 对象"></a>history 对象</h3><blockquote><p>window 对象给我们提供了一个 history 对象，与浏览器历史记录进行交互。该对象包含用户（在浏览器窗口中）访问过的 URL。</p></blockquote><table><thead><tr><th>history对象方法</th><th>作用</th></tr></thead><tbody><tr><td>back()</td><td>可以后退功能</td></tr><tr><td>forward()</td><td>前进功能</td></tr><tr><td>go(参数)</td><td>前进后退功能 参数是1 前进页面 参数是-1 后退页面</td></tr></tbody></table><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    history<span class="token punctuation">.</span><span class="token function">foward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//前进页面</span>    history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 后退页面</span>    history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//前进界面</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ES6-网页特效"><a href="#ES6-网页特效" class="headerlink" title="ES6 (网页特效)"></a>ES6 (网页特效)</h2><blockquote><p>网页的<strong>交互</strong>效果称为网页特效</p></blockquote><h3 id="PC端网页特效"><a href="#PC端网页特效" class="headerlink" title="PC端网页特效"></a>PC端网页特效</h3><h4 id="元素偏移量-offset-系列"><a href="#元素偏移量-offset-系列" class="headerlink" title="元素偏移量 offset 系列"></a>元素偏移量 offset 系列</h4><ul><li>offset 概述<br>offset 翻译过来就是偏移量， 我们使用 offset 系列相关属性可以动态的得到该元素的位置（偏移）、大小等。</li></ul><ol><li>获得元素距离带有定位父元素的位置</li><li>获得元素自身的大小（宽度高度）</li></ol><p><strong>注意：</strong> 返回的数值都不带单位</p><img src="/images/offset.png" width="600"><ul><li>offset 系列常用属性<table><thead><tr><th>offset系列属性</th><th>作用</th></tr></thead><tbody><tr><td>element.offsetParent</td><td>返回作为该元素带有定位的父级元素 如果父级都没有定位则返回body</td></tr><tr><td>element.offsetTop</td><td>返回元素相对带有定位父级元素上方的偏移</td></tr><tr><td>element.offsetLeft</td><td>返回元素相对带有定位父级元素左边框的偏移</td></tr><tr><td>element.offsetWidth</td><td>返回自身包括padding、边框、内容区的宽度，返回值不带单位</td></tr><tr><td>element.offsetHeight</td><td>返回自身包括padding、边框、内容区的高度，返回值不带单位</td></tr></tbody></table></li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// offset 系列</span><span class="token keyword">var</span> father <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.father'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> son <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.son'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1.可以得到元素的偏移 位置 返回的不带单位的数值  </span>father<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>father<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 它以带有定位的父亲为准  如果么有父亲或者父亲没有定位 则以 body 为准</span>son<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span><span class="token keyword">var</span> w <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.w'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.可以得到元素的大小 宽度和高度 是包含padding + border + width </span>w<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">;</span>w<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3. 返回带有定位的父亲 否则返回的是body</span>son<span class="token punctuation">.</span>offsetParent<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回带有定位的父亲 否则返回的是body</span>son<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回父亲 是最近一级的父亲 亲爸爸 不管父亲有没有定位</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>offset 与 style 区别<ul><li>offset<ol><li>offset 可以得到任意样式表中的样式值</li><li>offset 系列获得的数值是没有单位的</li><li>offsetWidth 包含padding+border+width</li><li>offsetWidth 等属性是<strong>只读</strong>属性，只能获取不能赋值</li></ol><strong>所以，我们想要获取元素大小位置，用offset更合适</strong></li><li>style<ol><li>style 只能得到行内样式表中的样式值</li><li>style.width 获得的是带有单位的字符串</li><li>style.width 获得不包含padding和border 的值</li><li>style.width 是<strong>可读写</strong>属性，可以获取也可以赋值</li></ol><strong>所以，我们想要给元素更改值，则需要用style改变</strong></li></ul></li></ul><h4 id="元素可视区-client-系列"><a href="#元素可视区-client-系列" class="headerlink" title="元素可视区 client 系列"></a>元素可视区 client 系列</h4><blockquote><p>client 翻译过来就是客户端，我们使用 client 系列的相关属性来获取元素可视区的相关信息。通过 client 系列的相关属性可以动态的得到该元素的边框大小、元素大小等。</p></blockquote><table><thead><tr><th>client系列属性</th><th>作用</th></tr></thead><tbody><tr><td>client.clientTop</td><td>返回元素上边框的大小</td></tr><tr><td>client.clientLeft</td><td>返回元素左边框的大小</td></tr><tr><td>client.clientWidth</td><td>返回自身包括padding、内容区的宽度、不含边框，返回值不带单位</td></tr><tr><td>client.clientHeight</td><td>返回自身包括padding、内容区的高度、不含边框，返回值不带单位</td></tr></tbody></table><ul><li>立即执行函数<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//立即执行函数  (function() {})()  或者 (function(){}())</span><span class="token comment" spellcheck="true">//主要作用： 创建一个独立的作用域。 避免了命名冲突问题</span><span class="token comment" spellcheck="true">// 1.(function() {})()    或者  2. (function(){}());</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第二个小括号可以看做是调用函数</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 局部变量</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3. 立即执行函数最大的作用就是 独立创建了一个作用域, 里面所有的变量都是局部变量 不会有命名冲突的情况</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="元素-scroll-系列属性"><a href="#元素-scroll-系列属性" class="headerlink" title="元素 scroll 系列属性"></a>元素 scroll 系列属性</h4><blockquote><p>scroll 翻译过来就是滚动的，我们使用 scroll 系列的相关属性可以动态的得到该元素的大小、滚动距离等。</p></blockquote><table><thead><tr><th>scroll系列属性</th><th>作用</th></tr></thead><tbody><tr><td>element.scrollTop</td><td>返回被卷上去的上侧距离，返回值不带单位</td></tr><tr><td>element.scrollLeft</td><td>返回被卷上去的左侧距离，返回值不带单位</td></tr><tr><td>element.scrollWidth</td><td>返回自身实际的宽度，返回值不带单位</td></tr><tr><td>element.scrollLeft</td><td>返回自身实际的高度，返回值不带单位</td></tr></tbody></table><p><img src="/images/scroll.png"></p><p><strong>注意：</strong></p><ol><li>offset系列 经常用于获得元素位置    offsetLeft  offsetTop</li><li>client 经常用于获取元素大小  clientWidth  clientHeight</li><li>scroll 经常用于获取滚动距离  scrollTop  scrollLeft   </li></ol><p>*<em>注意</em>：*页面滚动的距离通过 window.pageXOffset 获得</p><h4 id="动画函数封装"><a href="#动画函数封装" class="headerlink" title="动画函数封装"></a>动画函数封装</h4><blockquote><p>核心原理：通过定时器 setInterval() 不断移动盒子位置</p></blockquote><ul><li>动画实现原理<br>实现步骤：</li></ul><ol><li>获得盒子当前位置</li><li>让盒子在当前位置加上1个移动距离</li><li>利用定时器不断重复这个操作</li><li>加一个结束定时器的条件</li><li>注意此元素需要添加定位，才能使用element.style.left</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 简单动画函数封装obj目标对象 target 目标位置</span><span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//注意函数需要传递2个参数，动画对象和移动到的距离</span>    <span class="token function">clearIntervel</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清楚原先的定时器</span>    <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>offsetLeft <span class="token operator">>=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 停止动画 本质是停止定时器</span>            <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> obj<span class="token punctuation">.</span>offsetLeft <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用函数</span><span class="token function">animate</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">animate</span><span class="token punctuation">(</span>span<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>缓动效果原理<br>缓动动画就是让元素运动速度有所变化，最常见的是让速度慢慢停下来<br>思路：</li></ul><ol><li>让盒子每次移动的距离慢慢变小，速度就会慢慢落下来。</li><li>核心算法： (目标值 - 现在的位置 )/10    做为每次移动的距离 步长</li><li>停止的条件是： 让当前盒子位置等于目标位置就停止定时器  </li></ol><p><strong>注意步长值需要取整</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    temp <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>    temp <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>动画函数添加回调函数<br>回调函数原理：函数可以作为一个参数。将这个函数作为参数传到另一个函数里面，当那个函数执行完之后，再执行传进去的这个函数，这个过程就叫做回调。<br>回调函数写的位置：定时器结束的位置。<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span>obj <span class="token punctuation">,</span> target <span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//callback当作一个参数 动画结束时调用</span>  <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>  obj<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token operator">-</span> obj<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>      temp <span class="token operator">=</span> temp <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token punctuation">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>offsetLeft <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//判断是不是传进了一个callback</span>              <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> obj<span class="token punctuation">.</span>offsetLeft <span class="token operator">+</span> temp <span class="token operator">+</span><span class="token string">'px'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.nav'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">animate</span><span class="token punctuation">(</span>div <span class="token punctuation">,</span> <span class="token number">300</span> <span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//传递一个函数</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="移动端网页特效"><a href="#移动端网页特效" class="headerlink" title="移动端网页特效"></a>移动端网页特效</h3><h4 id="触屏事件"><a href="#触屏事件" class="headerlink" title="触屏事件"></a>触屏事件</h4><blockquote><p>移动端浏览器兼容性较好，我们不需要考虑以前 JS 的兼容性问题，可以放心的使用原生 JS 书写效果，但是移动端也有自己独特的地方。比如触屏事件 touch（也称触摸事件），Android 和 IOS 都有。</p></blockquote><h5 id="触屏事件概述"><a href="#触屏事件概述" class="headerlink" title="触屏事件概述"></a>触屏事件概述</h5><p>touch 对象代表一个触摸点。触摸点可能是一根手指，也可能是一根触摸笔。触屏事件可响应用户手指（或触控笔）对屏幕或者触控板操作。</p><table><thead><tr><th>触屏touch事件</th><th>说明</th></tr></thead><tbody><tr><td>touchstart</td><td>手指触摸到一个DOM元素时触发</td></tr><tr><td>touchmove</td><td>手指在一个DOM元素滑动时触发</td></tr><tr><td>touchend</td><td>手指从一个DOM元素上移开时触发</td></tr></tbody></table><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment" spellcheck="true">// 1. 获取元素</span>        <span class="token comment" spellcheck="true">// 2. 手指触摸DOM元素事件</span>        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchstart'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我摸了你'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 手指在DOM元素身上移动事件</span>        div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchmove'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我继续摸'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 手指离开DOM元素事件</span>        div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchend'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'轻轻的我走了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="触摸事件对象（TouchEvent）"><a href="#触摸事件对象（TouchEvent）" class="headerlink" title="触摸事件对象（TouchEvent）"></a>触摸事件对象（TouchEvent）</h5><p>TouchEvent&nbsp;是一类描述手指在触摸平面（触摸屏、触摸板等）的状态变化的事件。这类事件用于描述一个或多个触点，使开发者可以检测触点的移动，触点的增加和减少，等等<br>touchstart、touchmove、touchend 三个事件都会各自有事件对象。<br>触摸事件对象重点我们看三个常见对象列表：</p><table><thead><tr><th>触摸列表</th><th>说明</th></tr></thead><tbody><tr><td>touches</td><td>正在触摸屏幕的所有手指的一个列表</td></tr><tr><td>targetTouches</td><td>正在触摸当前的DOM元素的手指的一个列表</td></tr><tr><td>changedTouches</td><td>手指状态发生了改变的列表，从无到有，从有到无的变化</td></tr></tbody></table><p><strong>重点记住 targetTouches</strong></p><h5 id="移动端拖动元素"><a href="#移动端拖动元素" class="headerlink" title="移动端拖动元素"></a>移动端拖动元素</h5><ol><li>touchstart、touchmove、touchend 可以实现拖动元素</li><li>但是拖动元素需要当前手指的坐标值 我们可以使用  targetTouches[0] 里面的pageX 和 pageY </li><li>移动端拖动的原理：    手指移动中，计算出手指移动的距离。然后用盒子原来的位置 + 手指移动的距离</li><li>手指移动的距离：   手指滑动中的位置 减去  手指刚开始触摸的位置<br>拖动元素三步曲：<br>（1） 触摸元素 touchstart：  获取手指初始坐标，同时获得盒子原来的位置<br>（2） 移动手指 touchmove：  计算手指的滑动距离，并且移动盒子<br>（3） 离开手指 touchend:<br>注意： 手指移动也会触发滚动屏幕所以这里要阻止默认的屏幕滚动 e.preventDefault();</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//盒子一定要添加绝对定位</span>    <span class="token keyword">var</span> startX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取手指初始坐标</span>    <span class="token keyword">var</span> startY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchstart'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//  获取手指初始坐标</span>        startX <span class="token operator">=</span> e<span class="token punctuation">.</span>targetTouches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pageX<span class="token punctuation">;</span>        startY <span class="token operator">=</span> e<span class="token punctuation">.</span>targetTouches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>        y <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchmove'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//  计算手指的移动距离： 手指移动之后的坐标减去手指初始的坐标</span>            <span class="token keyword">var</span> moveX <span class="token operator">=</span> e<span class="token punctuation">.</span>targetTouches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pageX <span class="token operator">-</span> startX<span class="token punctuation">;</span>        <span class="token keyword">var</span> moveY <span class="token operator">=</span> e<span class="token punctuation">.</span>targetTouches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pageY <span class="token operator">-</span> startY<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 移动我们的盒子 盒子原来的位置 + 手指移动的距离</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> x <span class="token operator">+</span> moveX <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> y <span class="token operator">+</span> moveY <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 阻止屏幕滚动的默认行为</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="移动端常见特效"><a href="#移动端常见特效" class="headerlink" title="移动端常见特效"></a>移动端常见特效</h4><h5 id="clasList-属性（重点）"><a href="#clasList-属性（重点）" class="headerlink" title="clasList 属性（重点）"></a>clasList 属性（重点）</h5><blockquote><p>classList属性是HTML5新增的一个属性，返回元素的类名。但是ie10以上版本支持。该属性用于在元素中添加，移除及切换 CSS 类</p></blockquote><ul><li><p>返回类名<br>element.classList;</p><pre class="line-numbers language-js"><code class="language-js">element<span class="token punctuation">.</span>classList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回element的所有类</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>添加类<br>element.classList.add（’类名’）;</p><pre class="line-numbers language-js"><code class="language-js">focus<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'current'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类前面不加点</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>移除类<br>element.classList.remove（’类名’）;</p><pre class="line-numbers language-js"><code class="language-js">focus<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'current'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类前面不加点</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>切换类<br>focus.classList.toggle(‘类名’);</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//focus没有current类则添加 有则去除current类</span>focus<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">'current'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="click-延时解决方案"><a href="#click-延时解决方案" class="headerlink" title="click 延时解决方案"></a>click 延时解决方案</h5><blockquote><p>移动端 click 事件会有 300ms 的延时，原因是移动端屏幕双击会缩放(double tap to zoom) 页面。</p></blockquote></li><li><p>禁用缩放<br>浏览器禁用默认的双击缩放行为并且去掉 300ms 的点击延迟。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"user-scalable=no"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>利用touch事件自己封装这个事件解决 300ms 延迟<br>原理就是：</p></li></ul><ol><li>当我们手指触摸屏幕，记录当前触摸时间</li><li>当我们手指离开屏幕， 用离开的时间减去触摸的时间</li><li>如果时间小于150ms，并且没有滑动过屏幕， 那么我们就定义为点击<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//封装tap，解决click 300ms 延时</span><span class="token keyword">function</span> tap <span class="token punctuation">(</span>obj<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">var</span> isMove <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token keyword">var</span> startTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录触摸时候的时间变量</span> obj<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchstart'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>     startTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录触摸时间</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> obj<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchmove'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>     isMove <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 看看是否有滑动，有滑动算拖拽，不算点击</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> obj<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchend'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 如果手指触摸和离开时间小于150ms 算点击</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isMove <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">150</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行回调函数</span>     <span class="token punctuation">}</span>     isMove <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//  取反 重置</span>     startTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用  </span><span class="token function">tap</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 执行代码 </span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>使用插件<br>fastclick 插件解决 300ms 延迟。 使用延时<br>GitHub官网地址： <a href="https://github.com/ftlabs/fastclick">https://github.com/ftlabs/fastclick</a></li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'addEventListener'</span> <span class="token keyword">in</span> document<span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         FastClick<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="移动端常用开发插件"><a href="#移动端常用开发插件" class="headerlink" title="移动端常用开发插件"></a>移动端常用开发插件</h4><blockquote><p>JS 插件是 js 文件，它遵循一定规范编写，方便程序展示效果，拥有特定功能且方便调用。如轮播图和瀑布流插件。<br>特点：它一般是为了解决某个问题而专门存在，其功能单一，并且比较小。</p></blockquote><h5 id="Swiper-插件的使用"><a href="#Swiper-插件的使用" class="headerlink" title="Swiper 插件的使用"></a>Swiper 插件的使用</h5><blockquote><p>中文官网地址： <a href="https://www.swiper.com.cn/">https://www.swiper.com.cn/</a></p></blockquote><p>在官网点击下载Swiper，并解压<br><img src="/images/Swiper.png" width="600"><br>引入Swiper.css Swiper.js 在选定的格式的网页源代码中，复制html格式、css样式和js到自己的代码中（不要更改格式和类名）<br><img src="/images/Swiper引入.png" width="600"></p><h5 id="其他移动端插件"><a href="#其他移动端插件" class="headerlink" title="其他移动端插件"></a>其他移动端插件</h5><ul><li>superslide： <a href="http://www.superslide2.com/">http://www.superslide2.com/</a></li><li>iscroll： <a href="https://github.com/cubiq/iscroll">https://github.com/cubiq/iscroll</a></li></ul><h4 id="移动端开发框架"><a href="#移动端开发框架" class="headerlink" title="移动端开发框架"></a>移动端开发框架</h4><blockquote><p>框架，顾名思义就是一套架构，它会基于自身的特点向用户提供一套较为完整的解决方案。框架的控制权在框架本身，使用者要按照框架所规定的某种规范进行开发。</p></blockquote><p>插件一般是为了解决某个问题而专门存在，其功能单一，并且比较小。<br>前端常用的框架有 Bootstrap、Vue、Angular、React 等。既能开发PC端，也能开发移动端<br>前端常用的移动端插件有 swiper、superslide、iscroll等。<br>框架： 大而全，一整套解决方案<br>插件： 小而专一，某个功能的解决方案</p><h5 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h5><p>Bootstrap 是一个简洁、直观、强悍的前端开发框架，它让 web 开发更迅速、简单。<br>它能开发PC端，也能开发移动端<br>Bootstrap JS插件使用步骤：</p><ol><li>引入相关js 文件</li><li>复制HTML 结构</li><li>修改对应样式</li><li>修改相应JS 参数</li></ol><blockquote><p>参考<a href="https://www.bilibili.com/video/BV1Sy4y1C7ha?p=317&amp;vd_source=580cd891d54084c6f0158e0c631311d8">JavaScript基础语法-dom-bom-js-es6新语法-jQuery-数据可视化echarts黑马pink老师</a><br>参考<a href="https://blog.csdn.net/ybs0211/article/details/108621886">移动端网页特效(学习笔记)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS（六）</title>
      <link href="/2022/11/08/CSS%EF%BC%88%E5%85%AD%EF%BC%89/"/>
      <url>/2022/11/08/CSS%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-HTML5新特性、CSS3新特性"><a href="#简介-HTML5新特性、CSS3新特性" class="headerlink" title="简介 HTML5新特性、CSS3新特性"></a>简介 HTML5新特性、CSS3新特性</h1><span id="more"></span><blockquote><p>html5重大修改版本，提高合规性并增强其合规性；css3是升级版本，是一种用来表现HTML或XML等文件样式的计算机语言</p></blockquote><h2 id="HTML5的新特性"><a href="#HTML5的新特性" class="headerlink" title="HTML5的新特性"></a>HTML5的新特性</h2><blockquote><p>HTML5 的新增特性主要是针对于以前的不足，增加了一些新的标签、新的表单和新的表单属性等。<br>这些新特性都有兼容性问题，基本是 <strong>IE9+ 以上版本的浏览器</strong>才支持，如果不考虑兼容性问题，可以大量使用这些新特性。</p></blockquote><h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3><p>发展到了HTML5后，新增了一些语义化标签，这样的话更加有利于浏览器的搜索引擎搜索，也方便了网站的seo（Search Engine Optimization，搜索引擎优化），下面就是新增的一些语义化标签</p><ul><li><code>&lt;header&gt;</code> 头部标签</li><li><code>&lt;nav&gt;</code> 导航标签</li><li><code>&lt;article&gt;</code> 内容标签</li><li><code>&lt;section&gt;</code> 定义文档某个区域</li><li><code>&lt;aside&gt;</code> 侧边栏标签</li><li><code>&lt;footer&gt;</code> 尾部标签</li></ul><img src="/images/语义化标签.png" width="600"><p><strong>注意：</strong></p><ol><li>这种语义化标准主要是针对搜索引擎的</li><li>这些新标签页面中可以使用多次</li><li>在 IE9 中，需要把这些元素转换为块级元素</li><li>移动端更喜欢使用这些标签</li></ol><h3 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h3><blockquote><p>多媒体标签分为 音频 <strong>audio</strong> 和视频 <strong>video</strong> 两个标签 使用它们，我们可以很方便的在页面中嵌入音频和视频，而不再去使用落后的flash和其他浏览器插件了。<br>因为多媒体标签的 属性、方法、事件比较多，因此我们需要什么功能的时候，就需要去查找相关的文档进行学习使用。</p></blockquote><h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><pre class="line-numbers language-html"><code class="language-html"> &lt;video src="media/mi.mp4" controls="controls" muted = "muted" loop="loop"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>video的支持情况<br>当前 <strong>video</strong> 元素支持三种视频格式： 尽量使用 <strong>mp4格式</strong><br>不同浏览器支持 <strong>video</strong> 视频格式的情况：<table><thead><tr><th>浏览器</th><th>MP4</th><th>WebM</th><th>Ogg</th></tr></thead><tbody><tr><td>Intemet Explorer</td><td>YES</td><td>NO</td><td>NO</td></tr><tr><td>Chrome</td><td>YES</td><td>YES</td><td>YES</td></tr><tr><td>Firefox</td><td>YES(从Firefox31开始，Linux从Firefox30开始)</td><td>YES</td><td>YES</td></tr><tr><td>Safari</td><td>YES</td><td>NO</td><td>NO</td></tr><tr><td>Opera</td><td>YES(从Opera25开始)</td><td>YES</td><td>YES</td></tr></tbody></table></li></ul><p><strong>上面这种写法，浏览器会匹配video标签中的source，如果支持就播放，如果不支持往下匹配，直到没有匹配的格式，就提示文本</strong></p><ul><li>兼容性<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span>  <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>controls<span class="token punctuation">"</span></span>  <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>move.ogg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/ogg<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>move.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  您的浏览器暂不支持 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span><span class="token punctuation">></span></span> 标签播放视频<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>video的属性<table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>src</td><td>url</td><td>要播放的视频的 URL</td></tr><tr><td>autoplay</td><td>autoplay</td><td>如果出现该属性，则视频在就绪后马上播放,chrome禁用该属性，添加muted，才可使用</td></tr><tr><td>controls</td><td>controls</td><td>如果出现该属性，则向用户显示控件，比如播放按钮</td></tr><tr><td>loop</td><td>loop</td><td>如果出现该属性，则当媒介文件完成播放后再次开始播放</td></tr><tr><td>muted</td><td>muted</td><td>规定视频的音频输出应该被静音</td></tr><tr><td>poster</td><td>URL</td><td>规定视频下载时显示的图像，或者在用户点击播放按钮前显示的图像</td></tr><tr><td>preload</td><td>preload</td><td>如果出现该属性，则视频在页面加载时进行加载，并预备播放,如果使用 “autoplay”，则忽略该属性</td></tr><tr><td>width</td><td>pixels</td><td>设置视频播放器的宽度</td></tr><tr><td>height</td><td>pixels</td><td>设置视频播放器的高度</td></tr></tbody></table></li></ul><h4 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h4><p><strong>使用语法：</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>media/music.mp3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>audio的支持情况<br>当前 <strong>audio</strong> 元素支持三种视频格式： 尽量使用 <strong>mp3格式</strong><br>不同浏览器支持 <strong>audio</strong> 视频格式的情况：</p><table><thead><tr><th>浏览器</th><th>MP3</th><th>Wav</th><th>Ogg</th></tr></thead><tbody><tr><td>Intemet Explorer</td><td>YES</td><td>NO</td><td>NO</td></tr><tr><td>Chrome</td><td>YES</td><td>YES</td><td>YES</td></tr><tr><td>Firefox</td><td>YES</td><td>YES</td><td>YES</td></tr><tr><td>Safari</td><td>YES</td><td>YES</td><td>NO</td></tr><tr><td>Opera</td><td>YES</td><td>YES</td><td>YES</td></tr></tbody></table></li><li><p>兼容性</p><pre class="line-numbers language-html"><code class="language-html">&lt; audio controls="controls"  >  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>happy.mp3<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>audio/mpeg<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>happy.ogg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>audio/ogg<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  您的浏览器暂不支持 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span><span class="token punctuation">></span></span> 标签。&lt;/ audio><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>上面这种写法，浏览器会匹配audio标签中的source，如果支持就播放，如果不支持往下匹配，直到没有匹配的格式，就提示文本</strong></p><ul><li>audio属性<table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>src</td><td>url</td><td>要播放的音频的 URL</td></tr><tr><td>autoplay</td><td>autoplay</td><td>如果出现该属性，则音频在就绪后马上播放,chrome禁用了该属性</td></tr><tr><td>controls</td><td>controls</td><td>如果出现该属性，则向用户显示控件，比如播放按钮</td></tr><tr><td>loop</td><td>loop</td><td>如果出现该属性，则每当音频结束时重新开始播放</td></tr><tr><td>muted</td><td>muted</td><td>规定视频输出应该被静音</td></tr><tr><td>preload</td><td>preload</td><td>如果出现该属性，则音频在页面加载时进行加载，并预备播放,如果使用 “autoplay”，则忽略该属性。</td></tr></tbody></table></li></ul><h3 id="新增的表单元素-（★★）"><a href="#新增的表单元素-（★★）" class="headerlink" title="新增的表单元素 （★★）"></a>新增的表单元素 （★★）</h3><p>在H5中，帮我们新增加了很多类型的表单</p><ul><li>案例<pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 我们验证的时候必须添加form表单域 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--type设置了输入的格式--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>邮箱: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>网址: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>日期: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>时间: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>time<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>数量: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>手机号码: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tel<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>搜索: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>颜色: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 当我们点击提交按钮就可以验证表单了 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>新增加的输入类型<img src="/images/新增input表单.png" width="700"></li></ul><h3 id="新增加的表单属性"><a href="#新增加的表单属性" class="headerlink" title="新增加的表单属性"></a>新增加的表单属性</h3><table><thead><tr><th>属性</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>required</td><td>required</td><td>表明该元素是必填项，不能不填</td></tr><tr><td>placeholder</td><td>提示文本</td><td>在用户输入时进行提示</td></tr><tr><td>autofocus</td><td>autofocus</td><td>在打开页面时使元素自动获取焦点</td></tr><tr><td>autocomplete</td><td>off/on</td><td>使form元素或者input元素拥有自动完成功能，即记录户之前输入的值，关闭为off，默认为on</td></tr><tr><td>mutiple</td><td>mutiple</td><td>可以多选文件提交</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><pre class="line-numbers language-css"><code class="language-css">   <span class="token selector">input<span class="token pseudo-element">::placeholder</span> </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*改变表单提示的属性*/</span>       <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="CSS3的新特性"><a href="#CSS3的新特性" class="headerlink" title="CSS3的新特性"></a>CSS3的新特性</h2><blockquote><p>新增的CSS3特性有兼容性问题，ie9+才支持,移动端支持优于 PC 端 </p></blockquote><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p>属性选择器，按照字面意思，都是根据标签中的属性来选择元素</p><p><img src="/images/%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8.png"></p><p><strong>示例代码：</strong></p><pre class="line-numbers language-css"><code class="language-css"> <span class="token comment" spellcheck="true">/* 只选择 type =text 文本框的input 选取出来 */</span><span class="token selector">input<span class="token attribute">[type="text"]</span> </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*input和[之间没有空格*/</span>    <span class="token property">color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 选择首先是div 然后 具有class属性 并且属性值 必须是 icon开头的这些元素 */</span><span class="token selector">div<span class="token attribute">[class^="icon"]</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 选择首先是section 然后 具有class属性 并且属性值 必须是 data结尾的这些元素 */</span><span class="token selector">section<span class="token attribute">[class$="data"]</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 选择首先是section 然后 具有class属性 并且属性值 含有 data 的这些元素 */</span><span class="token selector">section<span class="token attribute">[class*="da"]</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>属性选择器，按照字面意思，都是根据标签中的属性来选择元素</li><li>属性选择器可以根据元素特定属性的来选择元素。 这样就可以不用借助于类或者id选择器</li><li>属性选择器也可以选择出来自定义的属性</li><li><strong>注意：</strong>类选择器、属性选择器、伪类选择器，权重为 10。</li></ul><h3 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h3><p>结构伪类选择器主要根据文档结构来选择器元素， 常用于根据父级选择器里面的子元素<br><img src="/images/%E7%BB%93%E6%9E%84%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8-01.png"></p><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token comment" spellcheck="true">/*选择第一个li*/</span>    <span class="token selector">ul li<span class="token pseudo-class">:first-child</span></span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*选择最后一个li*/</span>     <span class="token selector">ul li<span class="token pseudo-class">:last-child</span></span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*选择第二个li*/</span>    <span class="token selector">ul li<span class="token pseudo-class">:nth-child(2)</span> </span><span class="token punctuation">{</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>       <span class="token selector">ul li<span class="token pseudo-class">:nth-child(2)</span></span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* 字体变成红色 */</span>        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">ul li<span class="token pseudo-class">:nth-of-type(2)</span></span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* 背景变成绿色 */</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>E:nth-child(n)（★★★）</strong></p><p>  匹配到父元素的第n个元素</p><ul><li>匹配到父元素的第2个子元素  </li></ul><p>  <code>ul li:nth-child(2){}</code></p><ul><li>匹配到父元素的序号为奇数的子元素</li></ul><p>  <code>ul li:nth-child(odd){}</code>    <strong>odd</strong> 是关键字  奇数的意思（3个字母 ）</p><ul><li>匹配到父元素的序号为偶数的子元素</li></ul><p>  <code>ul li:nth-child(even){}</code>   <strong>even</strong>（4个字母 ）</p><ul><li><strong>匹配到父元素的前3个子元素</strong><br><code>ul li:nth-child(-n+3){}</code>    这里面必须是<strong>n</strong><br>nth-child(n) 从0开始 每次加1 往后面计算  这里面必须是n 不能是其他的字母 选择了所有的孩子</li></ul></li><li><p><strong>nth-of-type（n）和nth-child（n）用法大致相同，但子元素不是相同的标签会有不同点</strong><br><img src="/images/nth-child%E4%B8%8Enth-of-type%E5%8C%BA%E5%88%AB.png"></p><p> 也就是说：</p><ul><li><code>E:nth-child(n)</code>     匹配父元素的第n个子元素E，也就是说，nth-child 对父元素里面所有孩子排序选择（序号是固定的）  先找到第n个孩子，然后看看是否和E匹配</li><li><code>E:nth-of-type(n)</code> 匹配同类型中的第n个同级兄弟元素E，也就是说，对父元素里面指定子元素进行排序选择。 先去匹配E ，然后再根据E 找第n个孩子</li></ul></li></ul><h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><blockquote><p>伪元素选择器可以帮助我们利用CSS创建新标签元素，而不需要HTML标签，从而简化HTML结构</p></blockquote><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>:before</td><td>在元素内部前面插入内容</td></tr><tr><td>:after</td><td>在元素内部后面插入内容</td></tr></tbody></table><pre class="line-numbers language-css"><code class="language-css">  <span class="token selector">div </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* div::before 权重是2 */</span>    <span class="token selector">div<span class="token pseudo-element">::before</span> </span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 这个content是必须要写的 */</span>        <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'我'</span><span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">40</span>px<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">div<span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>        <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'佩奇'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ul><li>before 和 after 创建一个元素，但是属于行内元素</li><li>可以和一般元素一样设属性值</li><li>新创建的这个元素在文档树中是找不到的，所以我们称为伪元素</li><li>语法：  element::before {}   </li><li>before 和 after 必须有 content 属性 </li><li>before 在父元素内容的前面创建元素，after 在父元素内容的后面插入元素<br>伪元素选择器和标签选择器一样，权重为 1</li></ul><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><blockquote><p>CSS3 中可以通过 box-sizing 来指定盒模型，有2个值：即可指定为 content-box、border-box，这样我们计算盒子大小的方式就发生了改变</p></blockquote><p>可以分成两种情况：</p><ul><li>box-sizing: content-box  盒子大小为 width + padding + border  （以前默认的）</li><li>box-sizing: border-box  盒子大小为 width<br>如果盒子模型我们改为了box-sizing: border-box  ， 那padding和border就不会撑大盒子了（前提padding和border不会超过width宽度）</li></ul><h3 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h3><h4 id="图片模糊"><a href="#图片模糊" class="headerlink" title="图片模糊"></a>图片模糊</h4><p>filter CSS属性将模糊或颜色偏移等图形效果应用于元素</p><pre class="line-numbers language-css"><code class="language-css"> <span class="token comment" spellcheck="true">/*filter:   函数()*/</span> <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span><span class="token number">5</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*blur模糊处理  数值越大越模糊*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="计算盒子宽度-–-calc-函数"><a href="#计算盒子宽度-–-calc-函数" class="headerlink" title="计算盒子宽度 – calc 函数"></a>计算盒子宽度 – calc 函数</h4><blockquote><p>calc() 此CSS函数让你在声明CSS属性值时执行一些计算</p></blockquote><pre class="line-numbers language-css"><code class="language-css"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100%</span> - <span class="token number">80</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*表示子元素比父元素短80px*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>括号里面可以使用 + - *  / 来进行计算</p><h4 id="CSS3-过渡（★★★）"><a href="#CSS3-过渡（★★★）" class="headerlink" title="CSS3 过渡（★★★）"></a>CSS3 过渡（★★★）</h4><blockquote><p>过渡（transition)是CSS3中具有颠覆性的特征之一，我们可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。</p></blockquote><p><strong>过渡动画：</strong> 是从一个状态 渐渐的过渡到另外一个状态<br>可以让我们页面更好看，更动感十足，虽然 低版本浏览器不支持（ie9以下版本） 但是不会影响页面布局,我们现在经常和 <strong>:hover</strong> 一起 搭配使用。</p><pre class="line-numbers language-css"><code class="language-css">   <span class="token comment" spellcheck="true">/*transition: 要过渡的属性  花费时间  运动曲线  何时开始;*/</span>  <span class="token selector">div </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> rebeccapurple<span class="token punctuation">;</span>        <span class="token property">transition</span><span class="token punctuation">:</span> width <span class="token number">3</span>s ,height <span class="token number">6</span>s<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*不同属性‘，’隔开*/</span>      <span class="token punctuation">}</span>      <span class="token selector">div<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">900</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>属性 ： 想要变化的 css 属性， 宽度高度 背景颜色 内外边距都可以 。如果想要所有的属性都变化过渡， 写一个all 就可以</li><li>花费时间： 单位是 秒（必须写单位） 比如 0.5s </li><li>运动曲线： 默认是 ease （可以省略）</li><li>何时开始：单位是 秒（必须写单位）可以设置延迟触发时间  默认是 0s  （可以省略）</li><li><strong>后面两个属性可以省略</strong></li><li><strong>记住过渡的使用口诀： 谁做过渡给谁加</strong></li></ul><h3 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h3><blockquote><p><strong>转换</strong>是CSS中具有颠覆性的的特征之一，可以实现元素的唯一，旋转，缩放等效果</p></blockquote><h4 id="2D转换之移动-translate"><a href="#2D转换之移动-translate" class="headerlink" title="2D转换之移动 translate"></a>2D转换之移动 translate</h4><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*transform: translate(x,y); 或者分开写*/</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">100</span>px,<span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*transform: translateX(n);*/</span><span class="token comment" spellcheck="true">/*只移动X*/</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*transform: translateY(n);*/</span><span class="token comment" spellcheck="true">/*只移动Y*/</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>重点</strong></p><ul><li>定义 2D 转换中的移动，沿着 X 和 Y 轴移动元素</li><li>translate最大的优点：不会影响到其他元素的位置</li><li>translate中的百分比单位是相对于自身元素的 translate:(50%,50%);</li><li>对行内标签没有效果</li></ul><h4 id="2D转换之旋转-rotate"><a href="#2D转换之旋转-rotate" class="headerlink" title="2D转换之旋转 rotate"></a>2D转换之旋转 rotate</h4><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*transform:rotate(度数)*/</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>重点</strong></p><ul><li>rotate里面跟度数， 单位是 deg 比如 rotate(45deg)</li><li>角度为正时，顺时针，负时，为逆时针</li><li>默认旋转的中心点是元素的中心点</li></ul><h4 id="2D转换中心点-transform-origin"><a href="#2D转换中心点-transform-origin" class="headerlink" title="2D转换中心点 transform-origin"></a>2D转换中心点 transform-origin</h4><pre class="line-numbers language-css"><code class="language-css"><span class="token property">transform-origin</span><span class="token punctuation">:</span> x y<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*方位名词*/</span><span class="token property">transform-origin</span><span class="token punctuation">:</span> left bottom<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*任意位置*/</span><span class="token property">transform-origin</span><span class="token punctuation">:</span> <span class="token number">50</span>px <span class="token number">50</span>px<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>重点</strong></p><ul><li>注意后面的参数 x 和 y 用空格隔开</li><li>x y 默认转换的中心点是元素的中心点 (50% 50%)</li><li>还可以给x y 设置 像素 或者 方位名词 （top bottom left right center）</li></ul><h4 id="2D转换之缩放scale"><a href="#2D转换之缩放scale" class="headerlink" title="2D转换之缩放scale"></a>2D转换之缩放scale</h4><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*x y分别表示width height放大的倍数*/</span><span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">scale</span><span class="token punctuation">(</span>x,y<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意</strong></p><ul><li>注意其中的x和y用逗号分隔</li><li>transform:scale(1,1) ：宽和高都放大一倍，相对于没有放大</li><li>transform:scale(2,2) ：宽和高都放大了2倍</li><li>transform:scale(2) ：只写一个参数，第二个参数则和第一个参数一样，相当于 scale(2,2)</li><li>transform:scale(0.5,0.5)：缩小</li><li>sacle缩放最大的优势：可以设置转换中心点缩放，默认以中心点缩放的，而且不影响其他盒子</li></ul><h4 id="2D转换综合写法"><a href="#2D转换综合写法" class="headerlink" title="2D转换综合写法"></a>2D转换综合写法</h4><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">div<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">400</span>px,<span class="token number">400</span>px<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">360</span>deg<span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">1.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><ol><li>同时使用多个转换，其格式为：transform: translate() rotate() scale() …等，</li><li>其顺序会影转换的效果。（先旋转会改变坐标轴方向）</li><li>当我们同时有位移和其他属性的时候，记得要将位移放到最前</li></ol><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><blockquote><p>动画（animation）是CSS3中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常<br>用来实现复杂的动画效果。相比较过渡，动画可以实现更多变化，更多控制，连续自动播放等效果。</p></blockquote><h4 id="动画的基本使用"><a href="#动画的基本使用" class="headerlink" title="动画的基本使用"></a>动画的基本使用</h4><ul><li> 动画的基本使用</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> 动画名称</span> <span class="token punctuation">{</span>  <span class="token selector">0%</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token selector">100%</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*例如*/</span><span class="token atrule"><span class="token rule">@keyframes</span> move</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*开始状态*/</span>  <span class="token selector">0% </span><span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">0</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*结束状态*/</span>  <span class="token selector">100% </span><span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">1000</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>动画序列</strong></p><ul><li>0% 是动画的开始，100% 是动画的完成。这样的规则就是动画序列。</li><li>在 @keyframes 中规定某项 CSS 样式，就能创建由当前样式逐渐改为新样式的动画效果。</li><li>动画是使元素从一种样式逐渐变化为另一种样式的效果。您可以改变任意多的样式任意多的次数。</li><li>请用百分比来规定变化发生的时间，或用关键词 “from” 和 “to”，等同于 0% 和 100%。</li></ul><img src="/images/animation.png" width="400"><ul><li> 元素使用动画</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 调用动画 */</span>  <span class="token property">animation-name</span><span class="token punctuation">:</span> 动画名称<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 持续时间 */</span>  <span class="token property">animation-duration</span><span class="token punctuation">:</span> 持续时间<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="动画常用的属性"><a href="#动画常用的属性" class="headerlink" title="动画常用的属性"></a>动画常用的属性</h4><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>@keyframes</td><td>规定动画。</td></tr><tr><td>animation</td><td>所有动画属性的简写属性，除了animation-play-state属性。</td></tr><tr><td>animation-name</td><td>规定@keyframes动画的名称。（必须的）</td></tr><tr><td>animation-duration</td><td>规定动画完成一个周期所花费的秒或毫秒，默认是0。（必须的）</td></tr><tr><td>animation-timing-function</td><td>规定动画的速度曲线，默认是“ease”。</td></tr><tr><td>animation-delay</td><td>规定动画何时开始，默认是0。</td></tr><tr><td>animation-iteration-count</td><td>规定动画被播放的次数，默认是1，还有infinite(无限)</td></tr><tr><td>animation-direction</td><td>规定动画是否在下一周期逆向播放，默认是“normal“,alternate逆播放</td></tr><tr><td>animation-play-state</td><td>规定动画是否正在运行或暂停。默认是”running”,还有”paused”。</td></tr><tr><td>animation-fill-mode</td><td>规定动画结束后状态，保持结束（forwards）  回到起始（backwards）</td></tr></tbody></table><p><strong>示例</strong></p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*调用动画*/</span>  <span class="token property">animation-name</span><span class="token punctuation">:</span> move<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*持续时间*/</span>  <span class="token property">animation-duration</span><span class="token punctuation">:</span> <span class="token number">6</span>s<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*动画匀速*/</span>  <span class="token property">animation-timing-function</span><span class="token punctuation">:</span> ease<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*延迟时间*/</span>  <span class="token property">animation-delay</span><span class="token punctuation">:</span> <span class="token number">1</span>s<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*播放无限次*/</span>  <span class="token property">animation-iteration-count</span><span class="token punctuation">:</span> infinite<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*下一次逆向播放*/</span>  <span class="token property">animation-direction</span><span class="token punctuation">:</span> alternate<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*动画结束停到终点*/</span>  <span class="token property">animation-fill-mode</span><span class="token punctuation">:</span> forwards<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token property">animation-play-state</span><span class="token punctuation">:</span> paused<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*鼠标经过动画停止*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>nimation-timing-function规定动画的速度曲线<table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>linear</td><td>动画从头到尾的速度是相同的。匀速</td></tr><tr><td>ease</td><td>默认。动画以低速开始，然后加快，在结束前变慢。</td></tr><tr><td>ease-in</td><td>动画以低速开始。</td></tr><tr><td>ease-out</td><td>动画以低速结束。</td></tr><tr><td>ease-in-out</td><td>动画以低速开始和结束。</td></tr><tr><td>steps()</td><td>指定了时间函数中的间隔数量（步长）</td></tr></tbody></table><h4 id="动画简写属性"><a href="#动画简写属性" class="headerlink" title="动画简写属性"></a>动画简写属性</h4></li></ul><blockquote><p>animation：动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 动画起始或者结束的状态;</p></blockquote><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*animation: myfirst 5s linear 2s infinite alternate;*/</span><span class="token property">animation</span><span class="token punctuation">:</span> pulse <span class="token number">1.2</span>s linear <span class="token number">2</span>s infinite alternate forwards<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3D转换"><a href="#3D转换" class="headerlink" title="3D转换"></a>3D转换</h3><h4 id="3D转换之移动-translate3d"><a href="#3D转换之移动-translate3d" class="headerlink" title="3D转换之移动 translate3d"></a>3D转换之移动 translate3d</h4><blockquote><p>3D移动在2D移动的基础上多加了一个可以移动的方向，就是z轴方向。</p></blockquote><ul><li>translform:translateX(100px)：仅仅是在x轴上移动</li><li>translform:translateY(100px)：仅仅是在Y轴上移动</li><li>translform:translateZ(100px)：仅仅是在Z轴上移动（注意：translateZ一般用px单位）</li><li>transform:translate3d(x,y,z)：其中 x、y、z 分别指要移动的轴的方向的距离 因为z轴是垂直屏幕，由里指向外面，所以默认是看不到元素在z轴的方向上移动</li></ul><h4 id="3D转换之透视-perspective"><a href="#3D转换之透视-perspective" class="headerlink" title="3D转换之透视 perspective"></a>3D转换之透视 perspective</h4><blockquote><p>在2D平面产生近大远小视觉立体，但是只是效果二维的</p></blockquote><img src="/images/perspective.png"><ul><li>如果想要在网页产生3D效果需要透视（理解成3D物体投影在2D平面内）。</li><li>模拟人类的视觉位置，可认为安排一只眼睛去看 </li><li>透视我们也称为视距：视距就是人的眼睛到屏幕的距离</li><li>距离视觉点越近的在电脑平面成像越大，越远成像越小 </li><li>透视的单位是像素<br><font color="red"> <strong>透视写在被观察元素的父盒子上面的</strong></font><br>d：就是视距，视距就是一个距离人的眼睛到屏幕的距离。<br>z：就是 z轴，物体距离屏幕的距离，z轴越大（正值） 我们看到的物体就越大。</li></ul><h4 id="3D转换之旋转-rotate3d"><a href="#3D转换之旋转-rotate3d" class="headerlink" title="3D转换之旋转 rotate3d"></a>3D转换之旋转 rotate3d</h4><blockquote><p>3D旋转指可以让元素在三维平面内沿着 x轴，y轴，z轴或者自定义轴进行旋转。</p></blockquote><p>语法:</p><ul><li>transform:rotateX(45deg)：沿着x轴正方向旋转 45度</li><li>transform:rotateY(45deg) ：沿着y轴正方向旋转 45deg</li><li>transform:rotateZ(45deg) ：沿着Z轴正方向旋转 45deg</li><li>transform:rotate3d(x,y,z,deg)： 沿着自定义轴旋转 deg为角度（了解即可）</li></ul><h4 id="3D转换之呈现-transfrom-style"><a href="#3D转换之呈现-transfrom-style" class="headerlink" title="3D转换之呈现 transfrom-style"></a>3D转换之呈现 transfrom-style</h4><blockquote><p>3D呈现实现3D空间，达到3D效果</p></blockquote> <img src="/images/transfrom-style.png" width="800"><ol><li>控制子元素是否开启三维立体环境。</li><li>transform-style: flat 子元素不开启3d立体空间 默认的</li><li>transform-style: preserve-3d; 子元素开启立体空间</li><li>代码写给父级，但是影响的是子盒子</li><li>这个属性很重要，后面必用</li></ol><h3 id="浏览器私有前缀"><a href="#浏览器私有前缀" class="headerlink" title="浏览器私有前缀"></a>浏览器私有前缀</h3><blockquote><p>浏览器私有前缀是为了兼容老版本的写法，比较新版本的浏览器无须添加。</p></blockquote><ul><li> 私有前缀</li></ul><ol><li>-moz-：代表 firefox 浏览器私有属性</li><li>-ms-：代表 ie 浏览器私有属性</li><li>-webkit-：代表 safari、chrome 私有属性</li><li>-o-：代表 Opera 私有属性</li></ol><ul><li> 提倡的写法</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token property">-moz-border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span> <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span> <span class="token property">-o-border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span> <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考<a href="https://www.bilibili.com/video/BV14J4114768?p=274">黑马程序员pink老师前端入门教程，零基础必看的h5(html5)+css3+移动端前端视频教程</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS（五）</title>
      <link href="/2022/11/07/CSS%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2022/11/07/CSS%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-界面样式、对齐属性、省略、布局技巧"><a href="#简介-界面样式、对齐属性、省略、布局技巧" class="headerlink" title="简介 界面样式、对齐属性、省略、布局技巧"></a>简介 界面样式、对齐属性、省略、布局技巧</h1><span id="more"></span><h2 id="CSS用户界面样式"><a href="#CSS用户界面样式" class="headerlink" title="CSS用户界面样式"></a>CSS用户界面样式</h2><h3 id="鼠标样式"><a href="#鼠标样式" class="headerlink" title="鼠标样式"></a>鼠标样式</h3><pre class="line-numbers language-css"><code class="language-css"> <span class="token selector">li </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*选择要改变的标签*/</span>     <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>  <span class="token punctuation">}</span>&lt;span style = <span class="token string">"cursor: text;"</span> >文本&lt;/span><span class="token comment" spellcheck="true">/*也可直接在标签里改*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>default</td><td>默认</td></tr><tr><td>pointer</td><td>小手</td></tr><tr><td>move</td><td>移动</td></tr><tr><td>text</td><td>文本</td></tr><tr><td>not-allowed</td><td>禁止</td></tr><tr><td>url()</td><td>自定义</td></tr></tbody></table><h3 id="轮廓线-outline"><a href="#轮廓线-outline" class="headerlink" title="轮廓线 outline"></a>轮廓线 outline</h3><p>给表单添加 outline: 0;   或者  outline: none; 样式之后，就可以去掉默认的蓝色边框。</p><pre class="line-numbers language-css"><code class="language-css"> <span class="token selector">input </span><span class="token punctuation">{</span>     <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*取消点击后的蓝色边框*/</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="防止拖拽文本域-resize"><a href="#防止拖拽文本域-resize" class="headerlink" title="防止拖拽文本域 resize"></a>防止拖拽文本域 resize</h3><p> 实际开发中，我们文本域右下角是不可以拖拽的。</p><pre class="line-numbers language-css"><code class="language-css"> <span class="token selector">textarea</span><span class="token punctuation">{</span>      <span class="token property">resize</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="vertical-align-属性应用"><a href="#vertical-align-属性应用" class="headerlink" title="vertical-align 属性应用"></a>vertical-align 属性应用</h2><blockquote><p>CSS 的 <strong>vertical-align</strong> 属性使用场景： 经常用于设置图片或者表单(行内块元素）和文字垂直对齐，用于设置一个元素的<strong>垂直对齐方式</strong>，但是它只针对于行内元素或者行内块元素有效。</p></blockquote><p>语法：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">vertical-align</span> <span class="token punctuation">:</span> baseline | top | middle | bottom <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>baseline</td><td>默认，元素放置在父元素的基线上</td></tr><tr><td>top</td><td>把元素顶端与行内最高元素的顶端对齐</td></tr><tr><td>middle</td><td>把元素放置在父元素的中间</td></tr><tr><td>botto</td><td>把元素底端与行内最高元素的底端对齐</td></tr></tbody></table><img src="/images/1571522040645.png" width="600"><h3 id="图片、表单和文字对齐"><a href="#图片、表单和文字对齐" class="headerlink" title="图片、表单和文字对齐"></a>图片、表单和文字对齐</h3><p>图片、表单都属于行内块元素，默认的 vertical-align 是基线对齐。<br>此时可以给图片、表单这些行内块元素的 <strong>vertical-align 属性设置为 middle</strong> 就可以让文字和图片垂直居中对齐了。</p><h3 id="解决图片底部默认空白缝隙问题"><a href="#解决图片底部默认空白缝隙问题" class="headerlink" title="解决图片底部默认空白缝隙问题"></a>解决图片底部默认空白缝隙问题</h3><p>bug：图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐。</p><p>主要解决方法有两种：</p><p>1.<strong>给图片</strong>添加 <strong>vertical-align:middle | top| bottom</strong> 等。 （提倡使用的）<br>2.把图片转换为块级元素  <strong>display: block</strong>; </p><h2 id="溢出的文字省略号显示"><a href="#溢出的文字省略号显示" class="headerlink" title="溢出的文字省略号显示"></a>溢出的文字省略号显示</h2><h3 id="单行文本溢出显示省略号"><a href="#单行文本溢出显示省略号" class="headerlink" title="单行文本溢出显示省略号"></a>单行文本溢出显示省略号</h3><p>单行文本溢出显示省略号–必须满足三个条件：</p><pre class="line-numbers language-css"><code class="language-css">  <span class="token comment" spellcheck="true">/*1. 先强制一行内显示文本*/</span>   <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>  （ 默认 normal 自动换行）  <span class="token comment" spellcheck="true">/*2. 超出的部分隐藏*/</span>   <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*3. 文字用省略号替代超出的部分*/</span>   <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多行文本溢出显示省略号（了解）"><a href="#多行文本溢出显示省略号（了解）" class="headerlink" title="多行文本溢出显示省略号（了解）"></a>多行文本溢出显示省略号（了解）</h3><p>多行文本溢出显示省略号，<strong>有较大兼容性问题</strong>，适合于webKit浏览器或移动端（移动端大部分是webkit内核）</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*1. 超出的部分隐藏 */</span><span class="token property">overflow</span><span class="token punctuation">:</span>&amp;nbsp<span class="token punctuation">;</span>hidden<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*2. 文字用省略号替代超出的部分 */</span><span class="token property">text-overflow</span><span class="token punctuation">:</span>&amp;nbsp<span class="token punctuation">;</span>ellipsis<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 3. 弹性伸缩盒子模型显示 */</span><span class="token property">display</span><span class="token punctuation">:</span>&amp;nbsp<span class="token punctuation">;</span>-webkit-box<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 4. 限制在一个块元素显示的文本的行数 */</span><span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span>&amp;nbsp<span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 5. 设置或检索伸缩盒对象的子元素的排列方式 */</span><span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span>&amp;nbsp<span class="token punctuation">;</span>vertical<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>更推荐让后台人员来做这个效果，因为后台人员可以设置显示多少个字，操作更简单。</strong></p><h2 id="常见的布局技巧"><a href="#常见的布局技巧" class="headerlink" title="常见的布局技巧"></a>常见的布局技巧</h2><h3 id="网站标志"><a href="#网站标志" class="headerlink" title="网站标志"></a>网站标志</h3><h4 id="网站-favicon-图标（★★★）"><a href="#网站-favicon-图标（★★★）" class="headerlink" title="网站 favicon 图标（★★★）"></a>网站 favicon 图标（★★★）</h4><blockquote><p>favicon.ico 一般用于作为缩略的网站标志，它显示在浏览器的地址栏或者标签上。目前主要的浏览器都支持 favicon.ico 图标。</p></blockquote><ul><li>制作favicon图标</li></ul><ol><li>把图标切成 <code>png</code> 图片</li><li>把 <code>png</code> 图片转换为 <code>ico</code> 图标，这需要借助于第三方转换网站，例如比特虫：<a href="http://www.bitbug.net/">http://www.bitbug.net/</a></li></ol><ul><li>使用favicon图标</li></ul><p><strong>favicon图标放到网站根目录下</strong></p><ul><li>HTML页面引入favicon图标<br>在html 页面里面的 <code>&lt;head&gt; &lt;/head&gt;</code>元素之间引入代码<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>favicon.ico<span class="token punctuation">"</span></span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/x-icon<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="TDK三大标签SEO优化（★★）"><a href="#TDK三大标签SEO优化（★★）" class="headerlink" title="TDK三大标签SEO优化（★★）"></a>TDK三大标签SEO优化（★★）</h4><h5 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h5><blockquote><p><strong>SEO（Search Engine Optimization）</strong>汉译为搜索引擎优化，是一种利用搜索引擎的规则提高网站在有关搜索引擎内自然排名的方式。<br><strong>SEO</strong> 的目的是对网站进行深度的优化，从而帮助网站获取免费的流量，进而在搜索引擎上提升网站的排名，提高网站的知名度。</p></blockquote><p>页面必须有三个标签用来符合 SEO 优化</p><p><img src="/images/SEO%E4%BC%98%E5%8C%96.png"></p><h5 id="TDK"><a href="#TDK" class="headerlink" title="TDK"></a>TDK</h5><ul><li>T – Title（网站标题）</li></ul><p><strong>title</strong> 具有不可替代性，是我们内页的第一个重要标签，是搜索引擎了解网页的入口和对网页主题归属的最佳判断点。<br><strong>建议：</strong>网站名（产品名）- 网站的介绍  （尽量不要超过30个汉字）<br><strong>例如：</strong></p><ul><li><p>京东(JD.COM)-综合网购首选-正品低价、品质保障、配送及时、轻松购物！</p></li><li><p>小米商城 - 小米5s、红米Note 4、小米MIX、小米笔记本官方网站</p></li><li><p> D – description（网站描述）</p></li></ul><p>简要说明我们网站主要是做什么的。<br><strong>我们提倡</strong>，description 作为网站的总体业务和主题概括，多采用“我们是…”、“我们提供…”、“×××网作为…”、“电话：010…”之类语句。<br><strong>例如：</strong><br><code>&lt;meta name="description" content="京东JD.COM-专业的综合网上购物商城,销售家电、数码通讯、电脑、家居百货、服装服饰、母婴、图书、食品等数万个品牌优质商品.便捷、诚信的服务，为您提供愉悦的网上购物体验!" /&gt;</code></p><ul><li>K – keywords （关键字）</li></ul><p><strong>keywords 是页面关键词</strong>，是搜索引擎的关注点之一。<br>keywords 最好限制为 6～8 个关键词，关键词之间用英文逗号隔开，采用 关键词1,关键词2 的形式<br><strong>例如：</strong><br><code>&lt;meta name= " keywords" content="网上购物,网上商城,手机,笔记本,电脑,MP3,CD,VCD,DV,相机,数码,配件,手表,存储卡,京东" /&gt;</code></p><p><strong>对于我们前端人员来说，我们只需要准备好这三个标签，具体里面的内容，有专门的 SEO 人员准备</strong></p><p><strong>示例代码</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>品优购商城-综合网购首选-正品低价、品质保障、配送及时、轻松购物！    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 网站说明 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span>        <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>品优购商城-专业的综合网上购物商城,销售家电、数码通讯、电脑、家居百货、服装服饰、母婴、图书、食品等数万个品牌优质商品.便捷、诚信的服务，为您提供愉悦的网上购物体验!<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 关键字 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>网上购物,网上商城,手机,笔记本,电脑,MP3,CD,VCD,DV,相机,数码,配件,手表,存储卡,京东<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>LOGO SEO优化<br>在正常开发过程中，<strong>logo的布局其实是有讲究的，需要进行 <code>logoSEO</code>的优化 （★★★）</strong></p></li><li><p><code>logo</code> 里面首先放一个 <code>h1</code> 标签，目的是为了提权，告诉搜索引擎，这个地方很重要</p></li><li><p><code>h1</code> 里面再放一个链接，可以返回首页的，把 <code>logo</code> 的背景图片给链接即可</p></li><li><p>为了搜索引擎收录我们，我们链接里面要放文字（网站名称），但是文字不要显示出来</p></li><li><p>方法1：<code>text-indent</code> 移到盒子外面（<code>text-indent: -9999px</code>) ，然后 <code>overflow:hidden</code> ，淘宝的做法</p></li><li><p>方法2：直接给 <code>font-size: 0;</code>  就看不到文字了，京东的做法</p></li><li><p>最后给链接一个 <code>title</code> 属性，这样鼠标放到 <code>logo</code> 上就可以看到提示文字了</p><p><strong>结构代码</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- logo模块 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.html<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>品优购商城<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>品优购商城<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="主体部分"><a href="#主体部分" class="headerlink" title="主体部分"></a>主体部分</h3><ul><li>margin负值应用</li></ul><img src="/images/1571522683897.png" width="600">1.让每个盒子margin 往左侧移动 -1px 正好压住相邻盒子边框2.鼠标经过某个盒子的时候，提高当前盒子的层级即可（如果没有有定位，则加相对定位（保留位置），如果有定位，则加z-index）<ul><li>文字围绕浮动元素</li></ul><p><strong>布局示意图</strong><br><img src="/images/1571522761996.png"><br><strong>巧妙运用浮动元素不会压住文字的特性</strong></p><ul><li>行内块巧妙运用</li></ul><ol><li>把这些链接盒子转换为行内块， 之后给父级指定  text-align:center;</li><li>利用行内块元素中间有缝隙，并且给父级添加 text-align:center; 行内块元素会水平会居中</li></ol><ul><li>CSS三角强化<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.box1</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 把上边框宽度调大 */</span>        <span class="token comment" spellcheck="true">/* border-top: 100px solid transparent;        border-right: 50px solid skyblue; */</span>        <span class="token comment" spellcheck="true">/* 左边和下边的边框宽度设置为0 */</span>        <span class="token comment" spellcheck="true">/* border-bottom: 0 solid blue;        border-left: 0 solid green; */</span>        <span class="token comment" spellcheck="true">/* 1.只保留右边的边框有颜色 */</span>        <span class="token property">border-color</span><span class="token punctuation">:</span> transparent red transparent transparent<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 2. 样式都是solid */</span>        <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 3. 上边框宽度要大， 右边框 宽度稍小， 其余的边框该为 0 */</span>        <span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">50</span>px <span class="token number">0</span> <span class="token number">0</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CSS初始化"><a href="#CSS初始化" class="headerlink" title="CSS初始化"></a>CSS初始化</h3><blockquote><p>不同浏览器对有些标签的默认值是不同的，为了消除不同浏览器对HTML文本呈现的差异，照顾浏览器的兼容，我们需要对CSS 初始化<br>简单理解： CSS初始化是指重设浏览器的样式。 (也称为CSS reset）</p></blockquote></li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 把我们所有标签的内外边距清零 */</span><span class="token selector">* </span><span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* em 和 i 斜体的文字不倾斜 */</span><span class="token selector">em,i </span><span class="token punctuation">{</span>    <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 去掉li 的小圆点 */</span><span class="token selector">li </span><span class="token punctuation">{</span>    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">img </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* border 0 照顾低版本浏览器 如果 图片外面包含了链接会有边框的问题 */</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 取消图片底侧有空白缝隙的问题 */</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">button </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 当我们鼠标经过button 按钮的时候，鼠标变成小手 */</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#666</span><span class="token punctuation">;</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*鼠标经过链接，改变颜色*/</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#c81623</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">button,input </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* "\5B8B\4F53" 就是宋体的意思 这样浏览器兼容性比较好 */</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, <span class="token string">"\5B8B\4F53"</span>, sans-serif<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* CSS3 抗锯齿形 让文字显示的更加清晰 */</span>    <span class="token property">-webkit-font-smoothing</span><span class="token punctuation">:</span> antialiased<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">font</span><span class="token punctuation">:</span> <span class="token number">12</span>px/<span class="token number">1.5</span> Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, <span class="token string">"\5B8B\4F53"</span>, sans-serif<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#666</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.hide</span>,<span class="token class">.none</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 清除浮动 */</span><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"."</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span>    *<span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Unicode编码字体：</strong><br>把中文字体的名称用相应的Unicode编码来代替，这样就可以有效的避免浏览器解释CSS代码时候出现乱码的问题。<br>比如：<br>黑体 \9ED1\4F53<br>宋体 \5B8B\4F53<br>微软雅黑 \5FAE\8F6F\96C5\9ED1</p><blockquote><p>参考<a href="https://www.bilibili.com/video/BV14J4114768?p=261&amp;vd_source=580cd891d54084c6f0158e0c631311d8">黑马程序员pink老师前端入门教程，零基础必看的h5(html5)+css3+移动端前端视频教程</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A*算法</title>
      <link href="/2022/11/07/A%E6%98%9F%E7%AE%97%E6%B3%95/"/>
      <url>/2022/11/07/A%E6%98%9F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-A-遍历"><a href="#简介-A-遍历" class="headerlink" title="简介 A*遍历"></a>简介 A*遍历</h1><span id="more"></span><ul><li>A*算法运用的是估价思想。</li></ul><p>查找过程：<br>1.在待遍历列表中（刚开始只有点A），我们在列表中查找一个估价（当前点到终点距离估价，后续会讲）最小的点（k），<br>2.对点k进行一次广度优先查找，也就是它移动一次到底的下一个坐标（右，右上，上，左上，左，左下，下，右下）不包含已经遍历过的点和不能到达的点，将能查找的点添加到队列中，并将点K从队列中移除。<br>3.重复1、2步骤直到到底B点，或者队列已经为空说明没有路径可以到达点B</p><ul><li><p>A<em>搜寻算法<br>A</em>搜寻算法，俗称A星算法，作为启发式搜索算法中的一种，这是一种在图形平面上，有多个节点的路径，求出最低通过成本的算法。常用于游戏中的NPC的移动计算，或线上游戏的BOT的移动计算上。该算法像Dijkstra算法一样，可以找到一条最短路径；也像BFS一样，进行启发式的搜索。<br>A<em>算法最为核心的部分，就在于它的一个估值函数的设计上：<br>f(n)=g(n)+h(n)<br>其中f(n)是每个可能试探点的估值，它有两部分组成：<br>一部分，为g(n)，它表示从起始搜索点到当前点的代价（通常用某结点在搜索树中的深度来表示）。<br>另一部分，即h(n)，它表示启发式搜索中最为重要的一部分，即当前结点到目标结点的估值，<br>h(n)设计的好坏，直接影响着具有此种启发式函数的启发式算法的是否能称为A</em>算法。<br>一种具有f(n)=g(n)+h(n)策略的启发式算法能成为A<em>算法的充分条件是：<br>1、搜索树上存在着从起始点到终了点的最优路径。<br>2、问题域是有限的。<br>3、所有结点的子结点的搜索代价值&gt;0。<br>4、h(n)=&lt;h</em>(n) （h*(n)为实际问题的代价值）。<br>当此四个条件都满足时，一个具有f(n)=g(n)+h(n)策略的启发式算法能成为A<em>算法，并一定能找到最优解。<br>对于一个搜索问题，显然，条件1,2,3都是很容易满足的，而条件4： h(n)&lt;=h</em>(n)是需要精心设计的，由于h*(n)显然是无法知道的，所以，一个满足条件4的启发策略h(n)就来的难能可贵了。<br>不过，对于图的最优路径搜索和八数码问题，有些相关策略h(n)不仅很好理解，而且已经在理论上证明是满足条件4的，从而为这个算法的推广起到了决定性的作用。<br>且h(n)距离h*(n)的呈度不能过大，否则h(n)就没有过强的区分能力，算法效率并不会很高。对一个好的h(n)的评价是：h(n)在h*(n)的下界之下，并且尽量接近h*(n)。  </p></li><li><p>A<em>搜寻算法的实现<br>先举一个小小的例子：即求V0-&gt;V5的路径，V0-&gt;V5的过程中，可以经由V1，V2，V3，V4各点达到目的点V5。下面的问题，即是求此起始顶点V0-&gt;途径任意顶点V1、V2、V3、V4-&gt;目标顶点V5的最短路径。<br>就是：一个队列，open 往close 插入元素。<br>我们可以看出：：A</em>算法最为核心的过程，就在每次选择下一个当前搜索点时，是从所有已探知的但未搜索过点中(可能是不同层，亦可不在同一条支路上)，选取f值最小的结点进行展开。<br>而所有“已探知的但未搜索过点”可以通过一个按f值升序的队列(即优先队列)进行排列。<br>这样，在整体的搜索过程中，只要按照类似广度优先的算法框架，从优先队列中弹出队首元素（f值），对其可能子结点计算g、h和f值，直到优先队列为空(无解)或找到终止点为止。<br>A<em>算法与广度、深度优先和Dijkstra 算法的联系就在于：当g(n)=0时，该算法类似于DFS，当h(n)=0时，该算法类似于BFS。且同时，如果h(n)为0，只需求出g(n)，即求出起点到任意顶点n的最短路径，则转化为单源最短路径问题，即Dijkstra算法。这一点，可以通过上面的A</em>搜索树的具体过程中将h(n)设为0或将g(n)设为0而得到。</p></li><li><p>A*算法流程<br>首先将起始结点S放入OPEN表，CLOSE表置空，算法开始时：<br>1、如果OPEN表不为空，从表头取一个结点n，如果为空算法失败。<br>2、n是目标解吗？是，找到一个解（继续寻找，或终止算法）。<br>3、将n的所有后继结点展开，就是从n可以直接关联的结点（子结点），如果不在CLOSE表中，就将它们放入OPEN表，并把S放入CLOSE表，同时计算每一个后继结点的估价值f(n)，将OPEN表按f(x)排序，最小的放在表头，重复算法，回到1。</p></li></ul><img src="/images/A星.png" width="600"><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** A*算法寻路* closeList放有效路径* openList放走过的无用路径* 用曼哈顿距离判断向哪里走*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> startX<span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> startY<span class="token punctuation">;</span>closeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加起始点</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">==</span> endX <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> endY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断终止点</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> row <span class="token operator">*</span> column<span class="token punctuation">;</span>    <span class="token keyword">int</span> minIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化曼哈顿距离</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPath</span><span class="token punctuation">(</span>closeList<span class="token punctuation">,</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断四条路</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPath</span><span class="token punctuation">(</span>openList<span class="token punctuation">,</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>startX <span class="token operator">-</span> x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>startY <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>endX <span class="token operator">-</span> x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>endY <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPath</span><span class="token punctuation">(</span>closeList<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPath</span><span class="token punctuation">(</span>openList<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>startX <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>startY <span class="token operator">-</span> y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>endX <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>endY <span class="token operator">-</span> y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPath</span><span class="token punctuation">(</span>closeList<span class="token punctuation">,</span> x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPath</span><span class="token punctuation">(</span>openList<span class="token punctuation">,</span> x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>        f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>startX <span class="token operator">-</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>startY <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>endX <span class="token operator">-</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>endY <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPath</span><span class="token punctuation">(</span>closeList<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPath</span><span class="token punctuation">(</span>openList<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        f<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>startX <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>startY <span class="token operator">-</span> y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>endX <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>endY <span class="token operator">-</span> y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> f<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//找到周围最近的曼哈顿距离</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>min<span class="token operator">></span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                minIndex <span class="token operator">=</span> i <span class="token punctuation">;</span>                min <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">}</span>                <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minIndex <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断四周能不能走</span>        closeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不能走返回上一步</span>    <span class="token punctuation">}</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>minIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断那条路最近</span>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> x<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> y<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> x<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> y<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>返回上一步        closeList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>closeList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        openList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> closeList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>closeList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>column<span class="token punctuation">;</span>        y <span class="token operator">=</span> closeList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>closeList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>column<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断x，y是不是路  没有走过且不是墙才是路</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPath</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> arrayList<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>arrayList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rectangles<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>Color<span class="token punctuation">.</span>SANDYBROWN<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考：<a href="https://blog.csdn.net/v_JULY_v/article/details/6093380">一、A*搜索算法</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遍历</title>
      <link href="/2022/11/07/%E9%81%8D%E5%8E%86/"/>
      <url>/2022/11/07/%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-广度遍历和深度遍历"><a href="#简介-广度遍历和深度遍历" class="headerlink" title="简介 广度遍历和深度遍历"></a>简介 广度遍历和深度遍历</h1><span id="more"></span><ul><li>介绍</li></ul><p>1.广度优先遍历（BFS）：类似于树中的层次遍历，需要用队列来体现结点访问的次序关系。<br>2.深度优先遍历（DFS）：类似于树中的先序遍历，整体思想是：先输出当前结点，在根据一定的次序去递归查找孩子。<br><img src="images/sample.gif" width="600"></p><h3 id="广度遍历和最短路径"><a href="#广度遍历和最短路径" class="headerlink" title="广度遍历和最短路径"></a>广度遍历和最短路径</h3><p>广度优先遍历从某个顶点 v 出发，首先访问这个结点，并将其标记为已访问过，然后顺序访问结点v的所有未被访问的邻接点 {vi,..,vj} ，并将其标记为已访问过，然后将 {vi,…,vj} 中的每一个节点重复节点v的访问方法，直到所有结点都被访问完为止。</p><p>我们可以分为三个步骤：<br>（1）使用一个辅助队列 q，首先将顶点 v 入队，将其标记为已访问，然后循环检测队列是否为空。<br>（2）如果队列不为空，则取出队列第一个元素，并将与该元素相关联的所有未被访问的节点入队，将这些节点标记为已访问。<br>（3）如果队列为空，则说明已经按照广度优先遍历了所有的节点。<br>下图所示，右边蓝色表示从 0 开始遍历节点的顺序，下面是记录距离 0 的距离，<strong>可知广度优先遍历能求出无权图的最短路径</strong>。<br><img src="images/shortest-01.png" width="600"><br>下面用代码展示如何用广度优先遍历方式完成遍历，并且查询到最短路径。我们在上一小节代码的基础上增加一全局变量 ord 数组，记录路径中节点的次序。ord[i] 表示 i 节点在路径中的次序。同时构造函数做出相应调整，在遍历相邻节点时 每访问一个未被访问的节点进行 ord[i] = ord[v] + 1记录距离。邻接表的广度优先遍历时间复杂度为 O(V+E)，邻接矩阵的时间复杂度为O(V^2)。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 广度遍历找路* x，y加下点的坐标* */</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">breadthTraversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//广度遍历队列  </span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用于存放广度遍历的节点</span><span class="token keyword">int</span> x <span class="token operator">=</span> startX<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始点</span><span class="token keyword">int</span> y <span class="token operator">=</span> startY<span class="token punctuation">;</span>queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//循环</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> endX <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> endY<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//判断是否到终点</span>        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//找相邻节点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPass</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPass</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPass</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPass</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span>        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//取出队列的结点</span>        Integer n <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         x <span class="token operator">=</span> n <span class="token operator">%</span> column<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//变换点</span>        y <span class="token operator">=</span> n <span class="token operator">/</span> column<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> list2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">>=</span><span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">--</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//从节点中找出路</span>    <span class="token keyword">int</span> x1 <span class="token operator">=</span> list2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">%</span>column<span class="token punctuation">;</span>    <span class="token keyword">int</span> y1 <span class="token operator">=</span> list2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">/</span>column<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> x1<span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>y <span class="token operator">-</span> y1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> x1<span class="token punctuation">;</span>        y <span class="token operator">=</span> y1<span class="token punctuation">;</span>        breadthList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//将找好的路放在breadthList中</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">int</span> size <span class="token operator">=</span> breadthList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> k <span class="token operator">&lt;</span>size<span class="token operator">/</span><span class="token number">2</span> <span class="token punctuation">;</span> k <span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//正向取路</span>    breadthList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> breadthList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token operator">+</span>breadthList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    breadthList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>k<span class="token punctuation">,</span> breadthList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token operator">-</span>breadthList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    breadthList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> breadthList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token operator">-</span>breadthList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPass</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//判断是不是路</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>rectangles<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>Color<span class="token punctuation">.</span>SANDYBROWN<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="深度遍历和最短路径"><a href="#深度遍历和最短路径" class="headerlink" title="深度遍历和最短路径"></a>深度遍历和最短路径</h3><p>主要思路是从图中一个未访问的顶点 V 开始，沿着一条路一直走到底，然后从这条路尽头的节点回退到上一个节点，再从另一条路开始走到底…，不断递归重复此过程，直到所有的顶点都遍历完成，它的特点是不撞南墙不回头，先走完一条路，再换一条路继续走。<br>有递归和非递归两种表现形式，接下来我们以二叉树为例来看下如何分别用递归和非递归来实现深度优先遍历。</p><ul><li>1、递归实现<br>递归实现比较简单，由于是前序遍历，所以我们依次遍历当前节点，左节点，右节点即可，对于左右节点来说，依次遍历它们的左右节点即可，依此不断递归下去，直到叶节点(递归终止条件)，代码如下：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 深度遍历找路* 递归实现寻找到所有的路* 方法为子类找到了所有可达路线*/</span>ArrayList<span class="token operator">&lt;</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> list<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//用于存放深度遍历的路   最短路径只需从所有路径中找出最短的即可</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用于存放深度遍历走过的点</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deepTraversal</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> startX <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> startY <span class="token punctuation">)</span> <span class="token punctuation">{</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断递归结束条件</span><span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> endX <span class="token operator">&amp;&amp;</span>  y <span class="token operator">==</span>endY<span class="token punctuation">)</span> <span class="token punctuation">{</span>    list1<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*把真正能走的点添加到list*/</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断四个方向能不能走</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPath</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">deepTraversal</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPath</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span>x<span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">deepTraversal</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPath</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span>x<span class="token punctuation">,</span> y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">deepTraversal</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPath</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">deepTraversal</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>list1<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//移除不能走的点</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断x，y是不是路  没有走过且不是墙才是路</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPath</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> arrayList<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>arrayList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rectangles<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>Color<span class="token punctuation">.</span>SANDYBROWN<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>2、非递归实现</li></ul><p>仔细观察深度优先遍历的特点，对二叉树来说，由于是先序遍历(先遍历当前节点，再遍历左节点，再遍历右节点)，所以我们有如下思路：<br>对于每个节点来说，先遍历当前节点，然后把右节点压栈，再压左节点(这样弹栈的时候会先拿到左节点遍历，符合深度优先遍历要求)。<br>弹栈，拿到栈顶的节点，如果节点不为空，重复步骤 1， 如果为空，结束遍历。<br>我们以以下二叉树为例来看下如何用栈来实现 <strong>DFS</strong>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * 使用栈来实现 dfs  * @param root  */</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">dfsWithStack</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      Stack<span class="token operator">&lt;</span>Node<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 先把根节点压栈 </span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         Node treeNode <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 遍历节点 </span>        <span class="token function">process</span><span class="token punctuation">(</span>treeNode<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 先压右节点 </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>treeNode<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>             stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>treeNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 再压左节点 </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>treeNode<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>             stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>treeNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考:<a href="https://blog.csdn.net/qq_40232834/article/details/121061244">深度优先遍历（DFS）和广度优先遍历（BFS）</a><br>参考:<a href="https://www.runoob.com/data-structures/graph-theory-short-path.html">广度优先遍历与最短路径</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS（四）</title>
      <link href="/2022/11/06/CSS%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2022/11/06/CSS%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-定位、精灵图、字体图标、三角制作"><a href="#简介-定位、精灵图、字体图标、三角制作" class="headerlink" title="简介  定位、精灵图、字体图标、三角制作"></a>简介  定位、精灵图、字体图标、三角制作</h1><span id="more"></span><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>1.当我们滚动窗口的时候，盒子是固定屏幕某个位置的<br>2.某个元素可以自由的在一个盒子内移动位置，并且压住其他盒子<br>要实现以上效果，**标准流 或 浮动都无法快速实现<br>所以：<br>1.浮动可以让多个块级盒子一行没有缝隙排列显示， 经常用于横向排列盒子。<br>2.定位则是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。</p><h3 id="定位组成"><a href="#定位组成" class="headerlink" title="定位组成"></a>定位组成</h3><p>  <strong>定位</strong>：将盒子<strong>定</strong>在某一个位置，所以<strong>定位也是在摆放盒子， 按照定位的方式移动盒子</strong><br>  <strong>定位 = 定位模式 + 边偏移</strong><br>  <strong>定位模式</strong> 用于指定一个元素在文档中的定位方式。<strong>边偏移</strong>则决定了该元素的最终位置。</p><ul><li><p>定位模式<br>定位模式决定元素的定位方式 ，它通过 CSS 的 position 属性来设置，其值可以分为四个：</p><table><thead><tr><th>值</th><th align="center">语义</th></tr></thead><tbody><tr><td><code>static</code></td><td align="center"><strong>静态</strong>定位</td></tr><tr><td><code>relative</code></td><td align="center"><strong>相对</strong>定位</td></tr><tr><td><code>absolute</code></td><td align="center"><strong>绝对</strong>定位</td></tr><tr><td><code>fixed</code></td><td align="center"><strong>固定</strong>定位</td></tr></tbody></table></li><li><p>边偏移<br> <strong>边偏移</strong> 就是定位的盒子移动到最终位置。有 top、bottom、left 和 right  4 个属性：</p><table><thead><tr><th>边偏移属性</th><th>示例</th><th>述</th></tr></thead><tbody><tr><td><code>top</code></td><td><code>top: 80px</code></td><td><strong>顶端</strong>偏移量，定义元素相对于其父元素<strong>上边线的距离</strong>。</td></tr><tr><td><code>bottom</code></td><td><code>bottom: 80px</code></td><td><strong>底部</strong>偏移量，定义元素相对于其父元素<strong>下边线的距离</strong>。</td></tr><tr><td><code>left</code></td><td><code>left: 80px</code></td><td><strong>左侧</strong>偏移量，定义元素相对于其父元素<strong>左边线的距离</strong>。</td></tr><tr><td><code>right</code></td><td><code>right: 80px</code></td><td><strong>右侧</strong>偏移量，定义元素相对于其父元素<strong>右边线的距离</strong></td></tr></tbody></table></li></ul><p>定位的盒子有了边偏移才有价值。 一般情况下，凡是有定位地方必定有边偏移。</p><h3 id="定位模式介绍"><a href="#定位模式介绍" class="headerlink" title="定位模式介绍"></a>定位模式介绍</h3><p>常见的几种定位模式特性</p><table><thead><tr><th><strong>定位模式</strong></th><th><strong>是否脱标</strong></th><th><strong>移动位置</strong></th><th><strong>是否常用</strong></th></tr></thead><tbody><tr><td>static   静态定位</td><td>否</td><td>不能使用边偏移</td><td>很少</td></tr><tr><td><strong>relative 相对定位</strong></td><td><strong>否 (占有位置)</strong></td><td><strong>相对于自身位置移动</strong></td><td><strong>基本单独使用</strong></td></tr><tr><td><strong>absolute绝对定位</strong></td><td><strong>是（不占有位置）</strong></td><td><strong>带有定位的父级</strong></td><td><strong>要和定位父级元素搭配使用</strong></td></tr><tr><td><strong>fixed 固定定位</strong></td><td><strong>是（不占有位置）</strong></td><td><strong>浏览器可视区</strong></td><td><strong>单独使用，不需要父级</strong></td></tr><tr><td>sticky 粘性定位</td><td>否   (占有位置)</td><td>浏览器可视区</td><td>当前阶段少</td></tr></tbody></table><h4 id="静态定位-static-了解"><a href="#静态定位-static-了解" class="headerlink" title="静态定位(static) - 了解"></a>静态定位(static) - 了解</h4><p><strong>静态定位</strong>是元素的<strong>默认</strong>定位方式，<strong>无定位的意思</strong>。它相当于 border 里面的none，静态定位static，不要定位的时候用。</p><ul><li>语法：</li></ul><pre><code>选择器 {     position: static; }</code></pre><p>1.静态定位按照标准流特性摆放位置，它没有边偏移。<br>2.静态定位在布局时我们几乎不用的 </p><h4 id="相对定位-relative-重要"><a href="#相对定位-relative-重要" class="headerlink" title="相对定位(relative) - 重要"></a>相对定位(relative) - 重要</h4><p><strong>相对定位</strong>是元素在移动位置的时候，是相对于它自己<strong>原来的位置</strong>来说的。</p><ul><li>语法：</li></ul><pre><code>选择器 {     position: relative; }</code></pre><ul><li><p>相对定位的特点：</p><ul><li><p>1.它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）。</p></li><li><p>2.<strong>原来</strong>在标准流的<strong>位置</strong>继续占有，后面的盒子仍然以标准流的方式对待它，不会占用他原来的位置,。因此，<strong>相对定位并没有脱标</strong>。</p></li></ul></li><li><p>效果图：</p></li></ul><img src="/images/04_相对定位案例.png" width="600"><h4 id="绝对定位-absolute-重要"><a href="#绝对定位-absolute-重要" class="headerlink" title="绝对定位(absolute) - 重要"></a>绝对定位(absolute) - 重要</h4><p><strong>绝对定位</strong>是元素在移动位置的时候，是相对于它<strong>祖先元素</strong>来说的</p><ol><li><p><strong>完全脱标</strong> —— 完全不占位置；  </p></li><li><p>*<em><strong>没有祖先元素</strong>或者</em><em>祖先元素没有定位</em><strong>，则以</strong>浏览器**为准定位（Document 文档）。</p></li></ol><img src="/images/05_绝对定位_父级无定位.png" width="600"><ol start="3"><li><p><strong>父元素有定位（相对、绝对、固定定位）</strong></p><ul><li>元素将依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位,以最近一级定位的祖先元素为参考点定位。</li></ul> <img src="/images/06_绝对定位_父级有定位.png" width="600"></li></ol><p>4.绝对定位<strong>不再占有原先的位置</strong>。所以绝对定位是脱离标准流的。（脱标）</p><h4 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h4><ul><li><p>介绍<br>“子绝父相”是定位中最常用的一种方式这句话的意思是：<strong>子级是绝对定位的话，父级要用相对定位。</strong><br>因为绝对定位的盒子是拼爹的，所以要和父级搭配一起来使用。<br>①子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子。<br>②父盒子需要加定位限制子盒子在父盒子内显示。<br>③父盒子布局时，需要占有位置，因此父亲只能是相对定位。<br>这就是子绝父相的由来，所以<strong>相对定位经常用来作为绝对定位的父级</strong>。<br>总结： <strong>因为父级需要占有位置，因此是相对定位， 子盒子不需要占有位置，则是绝对定位</strong><br>当然，子绝父相不是永远不变的，如果父元素不需要占有位置，<strong>子绝父绝</strong>也会遇到。</p></li><li><p>疑问<br>为什么在布局时，<strong>子级元素</strong>使用<strong>绝对定位</strong>时，<strong>父级元素</strong>就要用<strong>相对定位</strong>呢？<br>观察下图，思考一下在布局时，<strong>左右两个方向的箭头图片</strong>以及<strong>父级盒子</strong>的定位方式。</p></li></ul><img src="/images/27子绝父相.png" width="600"><ul><li>分析</li></ul><ol><li><strong>方向箭头</strong>叠加在其他图片上方，应该使用<strong>绝对定位</strong>，因为<strong>绝对定位完全脱标</strong>，完全不占位置。</li><li><strong>父级盒子</strong>应该使用<strong>相对定位</strong>，因为<strong>相对定位不脱标</strong>，后续盒子仍然以标准流的方式对待它。<ul><li>如果父级盒子也使用<strong>绝对定位</strong>，会完全脱标，那么下方的<strong>广告盒子</strong>会上移，这显然不是我们想要的。</li></ul></li></ol><p> <strong>结论</strong>：<strong>父级要占有位置，子级要任意摆放</strong>，这就是<strong>子绝父相</strong>的由来。</p><h4 id="固定定位-fixed-重要"><a href="#固定定位-fixed-重要" class="headerlink" title="固定定位(fixed) - 重要"></a>固定定位(fixed) - 重要</h4><ul><li><p><strong>固定定位</strong>是元素<strong>固定于浏览器可视区的位置</strong>。 主要使用场景： 可以在浏览器页面滚动时元素的位置不会改变。</p></li><li><p>语法：</p><pre><code> 选择器 {      position: fixed;  }</code></pre></li><li><p>固定定位的特点：（务必记住）：</p><p>1.以浏览器的可视窗口为参照点移动元素。</p><ul><li>跟父元素没有任何关系</li><li>不随滚动条滚动。</li></ul><p>2.固定定位<strong>不在占有原先的位置</strong>。</p></li><li><p>固定定位也是<strong>脱标</strong>的，其实<strong>固定定位也可以看做是一种特殊的绝对定位</strong>。（认死理型） </p><ul><li><strong>完全脱标</strong>—— 完全不占位置；</li><li>只认<strong>浏览器的可视窗口</strong> —— <code>浏览器可视窗口 + 边偏移属性</code> 来设置元素的位置；<ul><li>跟父元素没有任何关系；单独使用的</li><li>不随滚动条滚动。</li></ul></li></ul></li></ul><img src="/images/08_固定定位案例.png" width="600"><p><strong>提示</strong>：IE 6 等低版本浏览器不支持固定定位。</p><h4 id="粘性定位-sticky-了解"><a href="#粘性定位-sticky-了解" class="headerlink" title="粘性定位(sticky) - 了解"></a>粘性定位(sticky) - 了解</h4><ul><li><p><strong>粘性定位</strong>可以被认为是相对定位和固定定位的混合。 Sticky  粘性的 </p></li><li><p>语法：</p><pre><code> 选择器 {      position: sticky;      top: 10px;  }</code></pre></li><li><p>粘性定位的特点：</p><p>1.以浏览器的可视窗口为参照点移动元素（固定定位特点）</p><p>2.粘性定位占有原先的位置（相对定位特点）</p><p>3.必须添加 top 、left、right、bottom <strong>其中一个</strong>才有效</p><p>跟页面滚动搭配使用。 兼容性较差，IE 不支持。</p></li></ul><h4 id="定位的补充"><a href="#定位的补充" class="headerlink" title="定位的补充"></a>定位的补充</h4><ul><li>定位的重叠顺序<blockquote><p>当同时使用定位时，会出现盒子重叠的现象，需要用z-index来控制盒子的先后次序</p></blockquote><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">选择器</span><span class="token punctuation">{</span><span class="token property">z-index</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>*<strong>注意：</strong><br>1.数值可以是正整数，负整数，默认为auto，数值越大，盒子越靠上<br>2.如果属性值相同，则按书写顺序，后来居上<br>3.数字后面不能加单位<br>4.只有定位的盒子才有z-index属性</p><ul><li>绝对定位的居中显示<blockquote><p>加了绝对定位的盒子不能使用margin:auto水平居中，但是可以采取以下的方式实现水平和垂直居中</p></blockquote></li></ul><p>1.left:50%; 让盒子的左侧移动到父级元素的水平居中位置<br>2.margin-left:-100px;让盒子移动自身宽度的一半</p><ul><li>定位的特殊性<blockquote><p>绝对定位和固定定位也有和浮动相似的特性</p></blockquote></li></ul><p>1.行内元素添加绝对或者固定定位，可以直接设置高度和宽度<br>2.块元素添加绝对定位和固定定位，如果不给高度或者宽度，默认大小是内容的大小</p><h2 id="显示与隐藏"><a href="#显示与隐藏" class="headerlink" title="显示与隐藏"></a>显示与隐藏</h2><blockquote><p>让一个元素在页面中隐藏或显示出来</p></blockquote><h3 id="dispaly显示隐藏"><a href="#dispaly显示隐藏" class="headerlink" title="dispaly显示隐藏"></a>dispaly显示隐藏</h3><p>display属性用于设置一个对象该如何显示</p><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>none</td><td>隐藏对象</td></tr><tr><td>block</td><td>除转为块元素之外，还能显示对象</td></tr><tr><td><font color="red"><strong>display隐藏对象后，不在占用原来的位置</strong></font></td><td></td></tr></tbody></table><h3 id="visibility显示隐藏"><a href="#visibility显示隐藏" class="headerlink" title="visibility显示隐藏"></a>visibility显示隐藏</h3><p>visibility属性指定一个元素应该可见还是隐藏</p><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>visible</td><td>可视</td></tr><tr><td>hidden</td><td>隐藏</td></tr><tr><td><font color="red"><strong>visibility隐藏对象后，保留原来的位置</strong></font></td><td></td></tr></tbody></table><h3 id="overflow显示隐藏"><a href="#overflow显示隐藏" class="headerlink" title="overflow显示隐藏"></a>overflow显示隐藏</h3><p>overflow属性指定内容溢出的部分，显示还是隐藏，默认显示</p><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>visible</td><td>默认值，显示</td></tr><tr><td>hidden</td><td>不显示</td></tr><tr><td>scroll</td><td>溢出部分显示滚动条，没有超出也会显示滚动条</td></tr><tr><td>auto</td><td>溢出部分显示滚动条，没有超出不会显示滚动条</td></tr></tbody></table><p>如果有定位的盒子，<strong>慎用overflow：hidden</strong>，他会隐藏多余的部分</p><h2 id="精灵图（重点）"><a href="#精灵图（重点）" class="headerlink" title="精灵图（重点）"></a>精灵图（重点）</h2><h3 id="为什么需要精灵图"><a href="#为什么需要精灵图" class="headerlink" title="为什么需要精灵图"></a>为什么需要精灵图</h3><p>一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接收和发送请求图片，造成服务器请求压力过大，这将大大降低页面的加载速度。</p><p><strong>为什么使用精灵图（目的）：</strong></p><p>​    <strong>为了有效地减少服务器接收和发送请求的次数</strong>，<strong>提高</strong>页面的<strong>加载速度</strong>，出现了 <strong>CSS 精灵技术</strong>（也称 CSS Sprites、CSS 雪碧）。</p><p><strong>核心原理</strong>：</p><p>​    将网页中的一些小背景图像整合到一张大图中 ，这样服务器只需要一次请求就可以了。</p><h3 id="精灵图（sprites）的使用"><a href="#精灵图（sprites）的使用" class="headerlink" title="精灵图（sprites）的使用"></a>精灵图（sprites）的使用</h3><p>使用精灵图核心：</p><ol><li>精灵技术主要针对于背景图片使用。就是把多个小背景图片整合到一张大图片中。</li><li>这个大图片也称为 sprites  精灵图  或者 雪碧图</li><li>移动背景图片位置， 此时可以使用 background-position 。</li><li>移动的距离就是这个目标图片的 x 和 y 坐标。注意网页中的坐标有所不同</li><li>因为一般情况下都是往上往左移动，所以数值是负值。</li><li>使用精灵图的时候需要精确测量，每个小背景图片的大小和位置。</li></ol><p>使用精灵图核心总结：</p><ol><li><p>精灵图主要<strong>针对于小的背景图片</strong>使用。</p></li><li><p>主要借助于背景位置来实现—<strong>background-position</strong> 。</p></li><li><p>一般情况下精灵图都是<strong>负值</strong>。（千万注意网页中的坐标： x轴右边走是正值，左边走是负值， y轴同理。）</p></li></ol><h3 id="案例：拼出pink"><a href="#案例：拼出pink" class="headerlink" title="案例：拼出pink"></a>案例：拼出pink</h3><h4 id="案例效果"><a href="#案例效果" class="headerlink" title="案例效果"></a>案例效果</h4><img src="/images/1571519368229.png" width=" 300"><h4 id="代码参考"><a href="#代码参考" class="headerlink" title="代码参考"></a>代码参考</h4><p>结构</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>p<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>i<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>n<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>k<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>k<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>样式</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">span </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url(images/abcd.jpg)</span> no-repeat<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.p</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">112</span>px<span class="token punctuation">;</span>    <span class="token property">background-position</span><span class="token punctuation">:</span>  -<span class="token number">493</span>px -<span class="token number">276</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.i</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">108</span>px<span class="token punctuation">;</span>    <span class="token property">background-position</span><span class="token punctuation">:</span> -<span class="token number">327</span>px -<span class="token number">142</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.n</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">108</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">109</span>px<span class="token punctuation">;</span>    <span class="token property">background-position</span><span class="token punctuation">:</span> -<span class="token number">215</span>px -<span class="token number">141</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.k</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">105</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">114</span>px<span class="token punctuation">;</span>    <span class="token property">background-position</span><span class="token punctuation">:</span> -<span class="token number">495</span>px -<span class="token number">142</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h2><h3 id="字体图标的产生"><a href="#字体图标的产生" class="headerlink" title="字体图标的产生"></a>字体图标的产生</h3><p>字体图标使用场景：  主要用于显示网页中通用、常用的一些小图标。<br>精灵图是有诸多优点的，但是缺点很明显。<br>1.图片文件还是比较大的。<br>2.图片本身放大和缩小会失真。<br>3.一旦图片制作完毕想要更换非常复杂。<br>此时，有一种技术的出现很好的解决了以上问题，就是<strong>字体图标 iconfont</strong>。</p><p><strong>字体图标</strong>可以为前端工程师提供一种方便高效的图标使用方式，<strong>展示的是图标，本质属于字体</strong>。</p><h3 id="字体图标的优点"><a href="#字体图标的优点" class="headerlink" title="字体图标的优点"></a>字体图标的优点</h3><p><strong>轻量级</strong>：一个图标字体要比一系列的图像要小。一旦字体加载了，图标就会马上渲染出来，减少了服务器请求<br>1.灵活性：本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果、旋转等<br>2.兼容性：几乎支持所有的浏览器，请放心使用<br>3.注意： 字体图标不能替代精灵技术，只是对工作中图标部分技术的提升和优化。</p><p><strong>总结：</strong></p><p>如果遇到一些结构和样式比较简单的小图标，就用字体图标。<br><img src="/images/1571519724473.png"></p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p>字体图标是一些网页常见的小图标，我们直接网上下载即可。 因此使用可以分为：<br>1.字体图标的下载<br>2.字体图标的引入 （引入到我们html页面中）<br>3.字体图标的追加 （以后添加新的小图标）</p><h3 id="字体图标的下载"><a href="#字体图标的下载" class="headerlink" title="字体图标的下载"></a>字体图标的下载</h3><p><strong>推荐下载网站：</strong></p><ul><li><strong>icomoon</strong> <strong>字库</strong>  <a href="http://icomoon.io/">http://icomoon.io</a>    推荐指数  <strong>★★★★★</strong><br>IcoMoon 成立于 2011 年，推出了第一个自定义图标字体生成器，它允许用户选择所需要的图标，使它们成一字型。该字库内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。</li><li><strong>阿里</strong> <strong>iconfont</strong> <strong>字库</strong>   <a href="http://www.iconfont.cn/">http://www.iconfont.cn/</a>   推荐指数   <strong>★★★★★</strong> </li></ul><p>这个是阿里 M2UX 的一个 iconfont 字体图标字库，包含了淘宝图标库和阿里图标库。可以使用 AI制作图标上传生成。 重点是，免费！</p><h3 id="字体图标的引入"><a href="#字体图标的引入" class="headerlink" title="字体图标的引入"></a>字体图标的引入</h3><ul><li><p>1.把下载包里面的 <strong>fonts</strong> 文件夹放入页面根目录下</p><img src="/images/1571520092646.png" width="600"></li><li><ul><li>字体文件格式<br>不同浏览器所支持的字体格式是不一样的，字体图标之所以兼容，就是因为包含了主流浏览器支持的字体文件。<table><thead><tr><th>格式</th><th>支持的浏览器</th></tr></thead><tbody><tr><td>TureType(  <strong>.ttf</strong>  )格式.ttf字体是Windows和Mac的最常见的字体</td><td>IE9+、Firefox3.5+、Chrome4+、Safari3+、Opera10+、iOS Mobile、Safari4.2+</td></tr><tr><td>Web Open Font Format( <strong>.woff</strong> )格式woff字体</td><td>IE9+、Firefox3.5+、Chrome6+、Safari3.6+、Opera11.1+</td></tr><tr><td>Embedded Open Type( <strong>.eot</strong> )格式.eot字体是IE专用字体</td><td>IE4+</td></tr><tr><td>SVG(  .<strong>svg</strong>  )格式.svg字体是基于SVG字体渲染的一种格式</td><td>Chrome4+、Safari3.1+、Opera10.0+、iOS Mobile Safari3.2+</td></tr></tbody></table></li></ul></li></ul><ul><li>2.在 CSS 样式中全局声明字体： 简单理解把这些字体文件通过css引入到我们页面中。<pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*以下代码在刚刚下载的style.css文件中*/</span><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*将代码复制到css文件中即可*/</span><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'icomoon'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*字体声明*/</span><span class="token property">src</span><span class="token punctuation">:</span>  <span class="token url">url('fonts/icomoon.eot?7kkyc2')</span><span class="token punctuation">;</span><span class="token property">src</span><span class="token punctuation">:</span>  <span class="token url">url('fonts/icomoon.eot?7kkyc2#iefix')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span>,      <span class="token url">url('fonts/icomoon.ttf?7kkyc2')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span>,      <span class="token url">url('fonts/icomoon.woff?7kkyc2')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span>,      <span class="token url">url('fonts/icomoon.svg?7kkyc2#icomoon')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'svg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>      <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>      <span class="token property">font-display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><ol start="3"><li>在刚刚下载的demo.html文件中复制小图标。<img src="/images/1571520411345.png" width="600">将复制的字符粘贴到span标签中</li></ol></li><li><ol start="4"><li>给标签定义字体。<pre class="line-numbers language-css"><code class="language-css"><span class="token selector">span </span><span class="token punctuation">{</span><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'icomoon'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>注意：务必保证 这个字体和上面@font-face里面的字体保持一致 <h3 id="字体图标的追加"><a href="#字体图标的追加" class="headerlink" title="字体图标的追加"></a>字体图标的追加</h3>如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标到原来的字体文件中。<br>把压缩包里面的 <strong>selection.json</strong> 从新上传，然后选中自己想要新的图标，从新下载压缩包，并替换原来的文件即可。<br><img src="/images/1571520554317.png"></li></ol></li></ul><h3 id="字体图标加载的原理："><a href="#字体图标加载的原理：" class="headerlink" title="字体图标加载的原理："></a>字体图标加载的原理：</h3><img src="/images/字体图标加载的原理.gif" width="600"><h2 id="CSS三角制作"><a href="#CSS三角制作" class="headerlink" title="CSS三角制作"></a>CSS三角制作</h2><blockquote><p>网页中常见一些三角形，使用 CSS 直接画出来就可以，不必做成图片或者字体图标。</p></blockquote><p><img src="/images/1571520965966.png"></p><pre class="line-numbers language-css"><code class="language-css"> <span class="token selector">div </span><span class="token punctuation">{</span>     <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*三角就是利用边框的相交*/</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*50px控制三角形的大小，一个三角形的低高是50px*/</span>      <span class="token property">border-color</span><span class="token punctuation">:</span> red green blue black<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*为了照顾兼容性*/</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>我们用css 边框可以模拟三角效果</li><li>宽度高度为0</li><li>我们4个边框都要写， 只保留需要的边框颜色，其余的不能省略，都改为 transparent 透明就好了</li><li>为了照顾兼容性 低版本的浏览器，加上 font-size: 0;  line-height: 0;</li></ol><blockquote><p>参考<a href="https://www.bilibili.com/video/BV14J4114768?p=221&amp;vd_source=580cd891d54084c6f0158e0c631311d8">黑马程序员pink老师前端入门教程，零基础必看的h5(html5)+css3+移动端前端视频教程</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS（三）</title>
      <link href="/2022/10/30/CSS%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2022/10/30/CSS%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-CSS特性、盒子模型、浮动、基础布局"><a href="#简介-CSS特性、盒子模型、浮动、基础布局" class="headerlink" title="简介 CSS特性、盒子模型、浮动、基础布局"></a>简介 CSS特性、盒子模型、浮动、基础布局</h1><span id="more"></span><h2 id="CSS三大特性"><a href="#CSS三大特性" class="headerlink" title="CSS三大特性"></a>CSS三大特性</h2><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><blockquote><p>层叠性主要解决样式冲突的问题<br>层叠性原则：<br>    1.样式冲突，<font color="red">就近原则</font>，哪个样式离结构近，选择那个样式<br>    2.样式不冲突，不重叠</p></blockquote><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*会被覆盖*/</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*不会覆盖*/</span><span class="token punctuation">}</span><span class="token selector">div </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>子元素会继承父元素的样式（text-，font-，line-，color）</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/**包含在div标签中的标签颜色都会变为红色*/</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">font</span><span class="token punctuation">:</span> <span class="token number">15</span>px/<span class="token number">1.5</span> <span class="token string">'Microsoft YaHei'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*1.5表示当前文字的1.5倍行高*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>当一个元素指定多个选择器，就会有优先级的产生<br>    1.选择器相同，则执行层叠性<br>    2.选择器不同，则根据<font color="red">选择器权重</font>执行</p><ul><li>  选择器的权重<table><thead><tr><th>选择器</th><th>权重</th></tr></thead><tbody><tr><td>继承 或者 *（通用符选择器）</td><td>0，0，0，0</td></tr><tr><td>元素选择器</td><td>0，0，0，1</td></tr><tr><td>类选择器，伪类选择器</td><td>0，0，1，0</td></tr><tr><td>id选择器</td><td>0，1，0，0</td></tr><tr><td>行内格式</td><td>1，0，0，0</td></tr><tr><td>!important（重要）</td><td>无穷大</td></tr><tr><td>从上到下，优先性逐渐增加，权重比较从左到右</td><td></td></tr></tbody></table></li><li>权重叠加<br>复合选择器会有权重叠加，<font color="red">权重叠加不会进位</font><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2></li><li>盒子模型组成<table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>border</td><td>边框</td></tr><tr><td>content</td><td>内容</td></tr><tr><td>padding</td><td>内边距,内容和边框的距离</td></tr><tr><td>margin</td><td>外边距，盒子和另一个盒子的距离</td></tr></tbody></table></li></ul><img src="/images/盒子模型.png" width="600"><ul><li><p>边框</p><ul><li>边框的属性<table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>border-width</td><td>边框的宽度</td></tr><tr><td>border-style</td><td>边框的样式</td></tr><tr><td>border-color</td><td>边框的颜色</td></tr></tbody></table></li><li>边框的复合写法<pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*边框会影响盒子的大小,不给盒子指定宽高度就不会改变大小*/</span><span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">5</span>px solid red<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*顺序没有要求*/</span><span class="token comment" spellcheck="true">/*solid表示盒子边框的样式 实线*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li> 边框的分开写法<pre class="line-numbers language-css"><code class="language-css"><span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">5</span>px solid  blue<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*只改变边框的上边*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>表格的边框<pre class="line-numbers language-css"><code class="language-css">table ,<span class="token comment" spellcheck="true">/*表格*/</span>td ,<span class="token comment" spellcheck="true">/*表格的表头*/</span><span class="token selector">th </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*表格的单元格*/</span>  border：<span class="token number">5</span>px solid red<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*顺序没有要求*/</span>  <span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*合并相邻单元格的边框*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>内边距</p><ul><li><p>内边距属性<br>内边距就是内容和边框的距离，padding设置内边距</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>padding-left</td><td>左内边距</td></tr><tr><td>padding-top</td><td>上内边距</td></tr><tr><td>padding-right</td><td>右内边距</td></tr><tr><td>padding-bottom</td><td>下内边距</td></tr></tbody></table></li><li><p> 内边距的复合写法</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*padding会影响盒子的实际大小，盒子width和height改变大小即可*/</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*上下左右都是10px*/</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*上下是10px ,左右是15px*/</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">15</span>px <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*上是10px，左右是15px ，下是20px*/</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">15</span>px <span class="token number">20</span>px <span class="token number">25</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*上是10px，右是15px 下是20px 左是25px*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>外边距</p><ul><li><p>外边距属性<br>内边距就是相邻盒子的距离，margin设置外边距</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>margin-left</td><td>左外边距</td></tr><tr><td>margin-top</td><td>上外边距</td></tr><tr><td>margin-right</td><td>右外边距</td></tr><tr><td>margin-bottom</td><td>下外边距</td></tr></tbody></table><p>  margin用法和padding相似</p></li><li><p>外边距应用</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span>  auto<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*0设置上下外边距，auto水平居中对齐*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color="red"><b>注意：</b></font>以上方法是块元素居中，行内元素或者是行内块元素居中是给其父元素添加<font color="red"><b>text-align:center</b></font>即可</p></li></ul><ul><li><p>外边距合并<br>对于两个嵌套关系的块元素，父元素有上边距同时子元素也有上边距，此时父元素会塌陷较大的外边距<br>解决方案：<br>1.为父元素定义一个上边框<br>2.可以为父元素定义一个内边距<br>3.为父元素添加一个overflow:hidden</p></li><li><p>清除内外边距</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*将内外边距变为0*/</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>圆角矩形</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*border-adius设置和边角的圆形的半径，圆的弧度表示圆框弧度的大小*/</span>border-radius：<span class="token number">10</span>px <span class="token number">20</span>px <span class="token number">30</span>px <span class="token number">40</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*按顺序设置左上，右上，右下，左下*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>盒子阴影</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*box-shadow: h-shadow v-shadow blur spread color inset;*/</span><span class="token comment" spellcheck="true">/*h-shadow v-shadow控制阴影的位置*/</span><span class="token comment" spellcheck="true">/*blur越大表示越模糊*/</span><span class="token comment" spellcheck="true">/*spread表示阴影的大小*/</span><span class="token comment" spellcheck="true">/*inset表示内阴影，outset表示外阴影，默认是外阴影，outset一般不写*/</span><span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">10</span>px <span class="token number">10</span>px <span class="token number">10</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span> , <span class="token number">.3</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>h-shadow</td><td>必选，水平阴影的位置，允许负值</td></tr><tr><td>v-shadow</td><td>必选，竖直阴影位置，允许负值</td></tr><tr><td>blur</td><td>可选，模糊距离</td></tr><tr><td>spread</td><td>可选，模糊尺寸</td></tr><tr><td>color</td><td>可选，阴影颜色</td></tr><tr><td>inset</td><td>可选，将外部阴影改为内部阴影</td></tr></tbody></table></li><li><p>文字阴影</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*box-shadow: h-shadow v-shadow blur spread color inset;*/</span><span class="token comment" spellcheck="true">/*h-shadow v-shadow控制阴影的位置*/</span><span class="token comment" spellcheck="true">/*blur越大表示越模糊*/</span><span class="token property">text-shadow</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">10</span>px <span class="token number">6</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>,<span class="token number">.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>h-shadow</td><td>必选，水平阴影的位置，允许负值</td></tr><tr><td>v-shadow</td><td>必选，竖直阴影位置，允许负值</td></tr><tr><td>blur</td><td>可选，模糊距离</td></tr><tr><td>color</td><td>可选，阴影颜色</td></tr></tbody></table><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><blockquote><p>float属性用于创建浮动框，将其移动在一边，直到左边缘或右边缘以及包括另一个浮动框的边缘</p></blockquote></li><li><p>float的属性值</p><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>none</td><td>无浮动</td></tr><tr><td>left</td><td>左浮动</td></tr><tr><td>right</td><td>右浮动</td></tr></tbody></table></li><li><p>浮动特性<br>  1.脱离标准普通流的控制移动到指定位置（简称脱标）<br>  3.如果所有浮动的盒子会一行显示，并且上沿对齐<br>  4.添加浮动的元素具有行内块元素的相似特性<br>  5.浮动元素经常和标准流父元素搭配使用<br>  6.浮动的盒子只会影响浮动盒子后面的标准流不会影响前面的标准流</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;head>&lt;title>Document&lt;/title>&lt;style>  * </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*清除内外边距*/</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">li </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*去掉列表的标志*/</span>          <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1226</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">285</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> antiquewhite<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*居中*/</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.box</span> li </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">296</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">285</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*设置每个浮动元素的距离*/</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.box</span> <span class="token class">.li</span></span><span class="token punctuation">{</span>    <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*最后一个右侧没有内边距*/</span>  <span class="token punctuation">}</span>&lt;/style>&lt;/head>&lt;body>&lt;ul class=<span class="token string">"box"</span>>  &lt;li><span class="token number">1</span>&lt;/li>  &lt;li><span class="token number">2</span>&lt;/li>  &lt;li><span class="token number">3</span>&lt;/li>  &lt;li class=<span class="token string">"li"</span>><span class="token number">4</span>&lt;/li>&lt;/ul>&lt;/body><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>清除浮动<br>有时候父元素中的浮动元素个数不确定，所以父元素的高度不是定值，然而不给父元素设高度又会造成父元素高度为零。<br>清除浮动就是清除浮动元素的影响，清除浮动之后父元素会根据浮动盒子自动检测高度</p></li><li><ul><li>清除浮动的属性值<pre class="line-numbers language-css"><code class="language-css"><span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>清除左侧浮动</td></tr><tr><td>right</td><td>清除右侧浮动</td></tr><tr><td>both</td><td>清除左右侧浮动,经常使用</td></tr></tbody></table></li></ul></li><li><ul><li>清除浮动的方法</li></ul></li><li><ul><li><ul><li>额外标签法<pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.clear</span> </span><span class="token punctuation">{</span><span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*清除浮动*/</span><span class="token punctuation">}</span>&lt;div class=<span class="token string">"clear"</span>>&lt;/div><span class="token comment" spellcheck="true">/*在父元素的最后一个浮动元素之后加一个标签，这个标签必须是块元素，添加clear类*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><ul><li><ul><li>给父元素添加overflow属性<pre class="line-numbers language-css"><code class="language-css"><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*添加给父元素*/</span><span class="token comment" spellcheck="true">/*超出的元素会隐藏，不会占位*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li><li><ul><li><ul><li>after伪元素<pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*:after是额外标签法的升级版，相当于添加了一个额外标签*/</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*新标签的内容*/</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*默认元素元素是行内元素，所以要转为块元素*/</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>  <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*给父元素添加clearfix类*/</span><span class="token comment" spellcheck="true">/*IE6,7专有*/</span>  *<span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*为了兼容*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><ul><li><ul><li>双伪元素法<pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*双伪元素法用的比较多*/</span><span class="token comment" spellcheck="true">/*实际开发经常用*/</span><span class="token number">.</span><span class="token property">clearfix</span><span class="token punctuation">:</span><span class="token punctuation">:</span>before,<span class="token comment" spellcheck="true">/*相当于在伪元素的前后都加上一个标签*/</span><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*新标签的内容*/</span>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*转化为表格*/</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*给父元素添加clearfix类*/</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*IE6,7专有*/</span>*<span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><h2 id="PS切图"><a href="#PS切图" class="headerlink" title="PS切图"></a>PS切图</h2><h3 id="常见的图片格式"><a href="#常见的图片格式" class="headerlink" title="常见的图片格式"></a>常见的图片格式</h3><table><thead><tr><th>序号</th><th>格式</th><th>特点和常用的用途</th></tr></thead><tbody><tr><td>1</td><td>jpg</td><td>JPEG（.JPG）对色彩的信息保留较好，高清，颜色较多，我们<strong>产品类的图片</strong> 经常用jpg格式的</td></tr><tr><td>2</td><td>gif</td><td>GIF格式最多只能储存256色，所以通常用来显示简单图形及字体，但是可以保存透明背景和动画效果, 实际 <strong>经常用于一些图片小动画效果</strong></td></tr><tr><td>3</td><td>png</td><td>png图像格式，是一种新兴的网络图形格式，结合了GIF和JPEG的优点，具有存储形式丰富的特点，能够保持透明背景. 如果想要切成 <strong>背景透明的图片</strong> ,请选择png格式.</td></tr><tr><td>4</td><td>psd</td><td>PSD图像格式，Photoshop的专用格式，里面可以存放图层、通道、遮罩等多种设计稿. <strong>对我们前端人员来说,最大的优点,我们可以直接从上面复制文字,获得图片,还可以测量大小和距离</strong>.</td></tr></tbody></table><p>PS 有很多的切图方式：图层切图、切片切图、PS 插件切图等。 </p><h3 id="图层切图"><a href="#图层切图" class="headerlink" title="图层切图"></a>图层切图</h3><p>简单版步骤：</p><p>​    ① 使用<strong>移动工具</strong>，点击需要的图片</p><p><img src="/images/1571299959992.png"></p><p>​    ② 查看右侧，找到图片对应的图层，右击图层 → 快速导出为 PNG</p><p><img src="/images/1571300150618.png"></p><p>但是很多情况下,我们需要合并图层再导出:</p><p>步骤：</p><p>​    ① 选中需要的若干个图层：选择一个图层，再按住shift键，继续选第二个图层:  </p><p>​    ② 图层菜单 → 合并图层(ctrl+e)   </p><p>​    <img src="/images/1571300529539.png"></p><p>​    ③ 查看右侧生成的新图层，在合并后的图层上，右击 →  快速导出为 PNG</p><h3 id="切片切图"><a href="#切片切图" class="headerlink" title="切片切图"></a>切片切图</h3><p>步骤：</p><p>​    ① 利用切片选中图片 ：利用切片工具手动划出</p><p><img src="/images/1571301270696.png"> </p><p>​    ② 导出选中的图片：文件菜单  →  导出  → 存储为 web 设备所用格式  →  选择我们要的图片格式 →  存储 。</p><p>​    注意：保存的时候，要选“选中的切片”：</p><p><img src="/images/1571301357818.png"> </p><h3 id="插件切图"><a href="#插件切图" class="headerlink" title="插件切图"></a>插件切图</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>Cutterman是一款运行在photoshop中的插件，能够自动将你需要的图层进行输出， 以替代传统的手工 “导出web所用格式” 以及使用切片工具进行挨个切图的繁琐流程。 </p><p>它支持各种各样的图片尺寸、格式、形态输出，方便你在pc、ios、Android等端上使用。 它不需要你记住一堆的语法、规则，纯点击操作，方便、快捷，易于上手。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>注意： <strong>cutterman插件要求你的ps 必须是完整版</strong>，不能是绿色版，所以大家需要从新安装完整版本。</p><p>查看 “窗口菜单”里面的“扩展功能”：</p><p>​    ① 如果是扩展功能的是灰色的，表示就是绿色版的，需要重新安装PS</p><p>​    ② 如果是扩展功能右侧是可以使用的，表示就是完整版的，可以安装cutterman插件快速切图</p><p><img src="/images/1571302032310.png"></p><p>官网: <a href="http://www.cutterman.cn/zh/cutterman">http://www.cutterman.cn/zh/cutterman</a></p><p>当cutterman 安装完成后，重启PS，会发现扩展功能里面多了一个cutterman工具：</p><p><img src="/images/1571302286467.png"></p><p>使用步骤</p><p>​    ① 选择需要的图层</p><p>​    ② 选择web端，点击web下面的下拉三角</p><p>​    ③ 选择需要的图片格式</p><p>​    ④ 设置好存储路径</p><p>​    ⑤ 点击 “导出选中图层” 按钮</p><p><img src="/images/1571303715362.png"> </p><p>示意图：</p><img src="/images/sample1.gif"> <h2 id="CSS布局"><a href="#CSS布局" class="headerlink" title="CSS布局"></a>CSS布局</h2><h3 id="CSS书写规范"><a href="#CSS书写规范" class="headerlink" title="CSS书写规范"></a>CSS书写规范</h3><p>建议遵循以下顺序：</p><ol><li><strong>布局定位属性</strong>：display / position / float / clear / visibility / overflow（建议 display 第一个写，毕竟关系到模式）</li><li><strong>自身属性</strong>：width / height / margin / padding / border / background</li><li><strong>文本属性</strong>：color / font / text-decoration / text-align / vertical-align / white- space / break-word</li><li><strong>其他属性（CSS3）</strong>：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …</li></ol><p><strong>举例：</strong></p><pre class="line-numbers language-css"><code class="language-css"> <span class="token selector"><span class="token class">.jdc</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> Arial, <span class="token string">'Helvetica Neue'</span>, Helvetica, sans-serif<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#333</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="页面布局整体思路"><a href="#页面布局整体思路" class="headerlink" title="页面布局整体思路"></a>页面布局整体思路</h3><p>为了提高网页制作的效率，布局时通常有以下的整体思路，具体如下：</p><p>​    1.必须确定页面的<strong>版心</strong>（可视区），我们<strong>测量</strong>可得知。</p><p>​    2.分析页面中的行模块，以及每个行模块中的列模块。其实页面布局第一准则.</p><p>​    3.一行中的列模块经常浮动布局, 先确定每个列的大小,之后确定列的位置.  页面布局第二准则</p><p>​    4.制作 HTML 结构。我们还是遵循，先有结构，后有样式的原则。结构永远最重要.</p><p>​    5.所以, 先理清楚<strong>布局结构</strong>,再写代码尤为重要. 这需要我们多写多积累.</p><h3 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h3><p><font color="red">实际开发中，<strong>重要的导航栏</strong>，我们不会直接用链接a ，而是<strong>用 li  包含链接(li+a)的做法</strong></font></p><p>​    1.li+a 语义更清晰，一看这就是有条理的列表型内容。</p><p>​    2.如果直接用a，搜索引擎容易辨别为有堆砌关键字嫌疑（故意堆砌关键字容易被搜索引擎有降权的风险），从而影响网站排名</p><p><strong>注意:</strong> </p><p>​    1.让导航栏一行显示, 给 li 加浮动, 因为 li 是块级元素, 需要一行显示.</p><p>​    2.这个nav导航栏可以不给宽度,将来可以继续添加其余文字</p><p>​    3.因为导航栏里面文字不一样多,所以最好给链接 a 左右padding 撑开盒子,而不是指定宽度 </p><blockquote><p>参考<a href="https://www.bilibili.com/video/BV14J4114768?p=129&amp;vd_source=580cd891d54084c6f0158e0c631311d8">黑马程序员pink老师前端入门教程，零基础必看的h5(html5)+css3+移动端前端视频教程</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS（二）</title>
      <link href="/2022/10/29/CSS%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2022/10/29/CSS%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-复合选择器、背景设置"><a href="#简介-复合选择器、背景设置" class="headerlink" title="简介 复合选择器、背景设置"></a>简介 复合选择器、背景设置</h1><span id="more"></span><h2 id="Emmet语法"><a href="#Emmet语法" class="headerlink" title="Emmet语法"></a>Emmet语法</h2><blockquote><p>Emmet语法可以快速生成CSS语法和HTML语法，提高了代码书写</p></blockquote><ul><li><p>快速生成html<br>  1.标签*n，即可快速生成n个标签<br>  2.父子级关系的，div&gt;span,按tab<br>  3.兄弟级关系的，div+p,按tab<br>  4.带有类名，.nav,按tab，即可生成一个默认nav属性的div标签<br>  5.带有id，#nav,按tab，即可生成一个默认id为nav的div标签<br>  6.span.gray，按tab，即可生成一个gary属性的span标签<br>  7.span#gray，按tab，即可生成一个id为gary的span标签<br>  8..nav$*5,按tab，即可生成五个个默认nav属性的div标签，类的属性值从nav1-nav5</p></li><li><p>快速生成CSS<br>  简写属性的首字母，按tab，即可快速补全代码   </p><h2 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h2><p>  复合选择器是由两个或者两个以上的基础选择器，通过不同方式组合而成</p><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><pre class="line-numbers language-css"><code class="language-css">&lt;head>&lt;style>  <span class="token comment" spellcheck="true">/*父标签和子标签用空格隔开*/</span>  <span class="token selector">ol li </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*选择ol中的li，而不是所有的li*/</span>      <span class="token property">color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token selector"><span class="token class">.nav</span> li</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*只会改变nav类的字体大小*/</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>&lt;/style>&lt;/head>&lt;body>&lt;ol>  &lt;li><span class="token number">123</span>&lt;/li><span class="token comment" spellcheck="true">/*会变色，不会变大小*/</span>&lt;/ol>&lt;ol class  = <span class="token string">"nav"</span>>  &lt;li><span class="token number">4565</span>&lt;/li><span class="token comment" spellcheck="true">/*会变色，会变大小*/</span>&lt;/ol>&lt;ul>  &lt;li><span class="token number">13</span>&lt;/li><span class="token comment" spellcheck="true">/*颜色不会变化*/</span>&lt;/ul>&lt;/body><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>元素1 元素2 {样式}，元素1和元素2可以是任意基础选择器<br>元素2必须是元素1的后代，可以是多重后代</p><h3 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h3><blockquote><p>子选择器只能选择作为某一元素的最近的一级元素</p></blockquote><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;head>&lt;style>  div > a </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*div和a之间用一个">"隔开*/</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>&lt;/style>&lt;/head>&lt;body>&lt;div>  &lt;a href=<span class="token string">"#"</span>>亲儿子&lt;/a><span class="token comment" spellcheck="true">/*会变颜色*/</span>  &lt;p>    儿子<span class="token comment" spellcheck="true">/*不会变颜色*/</span>    &lt;a href=<span class="token string">"#"</span>>孙子&lt;/a><span class="token comment" spellcheck="true">/*不会变颜色*/</span>  &lt;/p>&lt;/div>&lt;/body><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>元素1 &gt;元素2 {样式}，元素1和元素2可以是任意基础选择器</p><h3 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h3><blockquote><p>并集选择器可以为多组标签定义相同的格式，用于集体声明</p></blockquote><pre class="line-numbers language-css"><code class="language-css">  div ,<span class="token comment" spellcheck="true">/*并集选择器常常竖着写*/</span>  <span class="token selector">p ,  <span class="token class">.nav</span> </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*div,p和nav属性都改变了颜色,选择器可以是任意选择器*/</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3></li><li><p>链接的伪类选择器</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">a<span class="token pseudo-class">:link</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span>aqua<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>链接伪类选择器</th><th>作用</th></tr></thead><tbody><tr><td>a:link</td><td>选择所有未被访问的链接</td></tr><tr><td>a:visited</td><td>选择所有已经被访问的链接</td></tr><tr><td>a:hover</td><td>选择鼠标指针在其位置上的链接</td></tr><tr><td>a:active</td><td>选择鼠标在其位置上摁下而未松开的链接</td></tr><tr><td>a:focus</td><td>点击后鼠标移开保持鼠标点击时的状态</td></tr></tbody></table><p>按照:link - :visited -:hover -:active的顺序声明<br>经常使用:hover选择器</p></li><li><p>focus伪类选择器<br>focus伪类选择器用于获得光标的<font color="red">表单元素</font>，一般input类表单元素才能获取.</p></li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">input<span class="token pseudo-class">:focus</span></span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*选择input表单中光标点击的元素*/</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> aquamarine<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>一般元素的伪类选择器<table><thead><tr><th>一般伪类选择器</th><th>作用</th></tr></thead><tbody><tr><td>a:focus</td><td>点击后鼠标移开保持鼠标点击时的状态</td></tr><tr><td>:hover</td><td>选择鼠标指针在其位置上的状态</td></tr><tr><td>:active</td><td>选择鼠标在其位置上摁下而未松开的状态</td></tr></tbody></table></li></ul><pre class="line-numbers language-css"><code class="language-css"> <span class="token selector">div<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*用法和链接伪类选择器差不多*/</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token selector">div<span class="token pseudo-class">:hover</span> span</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*当鼠标经过div时，div的子元素span颜色变化*/</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="元素显示模式"><a href="#元素显示模式" class="headerlink" title="元素显示模式"></a>元素显示模式</h2><ul><li>块元素<br>1.独占一行<br>2.可以设置宽度，高度，外边距和内边距都可以设置<br>3.宽度默认是父类的的宽度<br>4.可以放行内元素和块元素<br>常见的块元素有h1-h6,p,div,ul,ol,li等.</li><li>行内元素<br>1.一行可以放多个元素<br>2.宽和高直接设置是无效的<br>3.默认宽度就是它本身内容的宽度<br>4.不可以放块元素，只能放行内元素<br>常见的行内元素有a,strong,b,em,i,del,s,ins,u,span</li><li>行内块元素<br>1.可以一行放多个元素，元素之间有缝隙<br>2.默认宽度就是它本身内容的宽度<br>3.高度，行高，外边距以及内边距都是可以设置的<br>常见的有img,input, td</li><li>元素显示模式转化<br>简单来说将一个模式的元素转化为另一个模式的元素<pre class="line-numbers language-css"><code class="language-css"><span class="token selector">a </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*a标签是行内元素*/</span> <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*dispaly表示转换模式*/</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">153</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*转换之后就可以设置宽度和高度*/</span> <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">155</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*div标签是块元素*/</span> <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*dispaly表示转换模式*/</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">153</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*转换之后就不可以设置高度*/</span><span class="token punctuation">}</span><span class="token selector">span </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*span标签是行内元素*/</span> <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*dispaly表示转换模式，转换为行内块元素*/</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">153</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*转换之后就可以设置高度*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2></li><li>背景颜色<pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*颜色可以直接写相应的单词，十六进制，transparent为透明*/</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#456415</span>,pink,transparent<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*CSS3新增的渐变颜色*/</span><span class="token comment" spellcheck="true">/*background: linear-gradient(起始方向, 颜色1, 颜色2, ...);*/</span><span class="token comment" spellcheck="true">/*背景渐变必须添加浏览器私有前缀*/</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>left, red , blue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*起始方向可以是： 方位名词 或者 度数 ， 如果省略默认就是 top */</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>left top, red , blue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>背景图片<pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*images文件要和html文件在同一目录之下，文件目录要放在url()中，none默认没有背景图片*/</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(images/R-C.png)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*图片默认情况下视平铺的，no-repeat是平铺*/</span><span class="token comment" spellcheck="true">/*盒子的大小不会改变*/</span><span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><ul><li> 平铺属性值<table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>repeat</td><td>平铺</td></tr><tr><td>no-repeat</td><td>不平铺</td></tr><tr><td>repeat-x</td><td>列平铺</td></tr><tr><td>repeat-y</td><td>行平铺</td></tr></tbody></table></li></ul></li><li><ul><li>背景图片位置<pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*background-position: 方位名词;*/</span> <span class="token comment" spellcheck="true">/*仅仅写一个方位名词，则另一个默认居中*/</span><span class="token property">background-position</span><span class="token punctuation">:</span> center center<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*center和top的顺序可以颠倒，位置没有影响*/</span><span class="token comment" spellcheck="true">/*background-position: x y  仅写一个表示x*/</span><span class="token property">background-position</span><span class="token punctuation">:</span> <span class="token number">20</span>px <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*20px设置x 50px设置y*/</span><span class="token comment" spellcheck="true">/*两个可以混合使用，第一个是x，第二个是y*/</span><span class="token property">background-position</span><span class="token punctuation">:</span> <span class="token number">20</span>px center<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*20px设置x center设置y*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><ul><li>背景图片固定<pre class="line-numbers language-css"><code class="language-css"><span class="token property">background-attachment</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*背景图像随内容滚动*/</span><span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*背景图像固定*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><ul><li>背景复合写法<pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*background书写没有固定格式，一般background:color image repeat attachment position;*/</span><span class="token property">background</span><span class="token punctuation">:</span> black <span class="token url">url(images/R-C.png)</span> no-repeat scroll center top <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><ul><li>背景颜色半透明<pre class="line-numbers language-css"><code class="language-css"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.6</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*0.6设置透明度，0-1*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><blockquote><p>参考<a href="https://www.bilibili.com/video/BV14J4114768?p=97&amp;vd_source=580cd891d54084c6f0158e0c631311d8">黑马程序员pink老师前端入门教程，零基础必看的h5(html5)+css3+移动端前端视频教程</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表</title>
      <link href="/2022/10/29/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
      <url>/2022/10/29/%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-哈希表"><a href="#简介-哈希表" class="headerlink" title="简介 哈希表"></a>简介 哈希表</h1><span id="more"></span><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>哈希表一般是解决<b>快速</b>判断一个元素是否在数组中。<br>我们判断一个学生是不是在一个学校里，我们首先要将学生存储在学校里，查询时通过索引查询在不在学校里。<br>将学生映射在哈希表上需要用到<b>hash funtion（哈希函数）</b></p><h2 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h2><p>哈希函数，可以把把学生的姓名直接映射为哈希表上的索引，然后就可以查询。<br>通过hashCode把名字转化为数值，一般hashcode是通过特定编码方式，可以将其他数据格式转化为不同的数值，这样把学生名字映射为哈希表上的索引数字<br>   <img src="/images/哈希函数.png" width="600"><br>如果hashCode得到的数值大于哈希表的大小了，也就是大于tableSize<br>此时为了保证映射出来的索引数值都落在哈希表上，我们会在再次对数值做一个取模的操作，就要我们就保证了学生姓名一定可以映射到哈希表上了。<br>如果学生的数量大于哈希表的大小，必定会有几个学生映射在同一个索引表下，此时需要用到<b>哈希碰撞</b></p><h2 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h2><p>哈希表的组成取决于哈希算法，也就是哈希函数的构成，下面列举几种常见的哈希算法。<br>1） 直接定址法<br>取关键字或关键字的某个线性函数值为散列地址。<br>即 f(key) = key 或 f(key) = a*key + b，其中a和b为常数。<br>2） 除留余数法<br>取关键字被某个不大于散列表长度 m 的数 p 求余，得到的作为散列地址。<br>即 f(key) = key % p, p &lt; m。这是最为常见的一种哈希算法。<br>3） 数字分析法<br>当关键字的位数大于地址的位数，对关键字的各位分布进行分析，选出分布均匀的任意几位作为散列地址。<br>仅适用于所有关键字都已知的情况下，根据实际应用确定要选取的部分，尽量避免发生冲突。<br>4） 平方取中法<br>先计算出关键字值的平方，然后取平方值中间几位作为散列地址。<br>随机分布的关键字，得到的散列地址也是随机分布的。<br>5） 随机数法<br>选择一个随机函数，把关键字的随机函数值作为它的哈希值。<br>通常当关键字的长度不等时用这种方法。</p><h2 id="哈希碰撞"><a href="#哈希碰撞" class="headerlink" title="哈希碰撞"></a>哈希碰撞</h2><p>如果两个输入串的hash函数的值一样，则称这两个串是一个碰撞(Collision)。既然是把任意长度的字符串变成固定长度的字符串，所以必有一个输出串对应无穷多个输入串，碰撞是必然存在的。<br>一个优良的hash函数 f 应当满足以下三个条件：<br>（1）对于任意y，寻找x，使得f(x)=y，在计算上是不可行的。<br>（2）给定x1∈A,找x2∈B，，使得f(x1)=f(x2)，在计算上是不可能的，这也就是弱无碰撞性。<br>（3）寻找x1，x2，使得f(x1)=f(x2)，在计算上也是不可行的，这也就是强无碰撞性。<br>这样就称为安全保密的Hash函数，除了枚举外不可能有别的更快的方法。如第3条，根据生日定理，要想找到这样的x1，x2，理论上需要大约2^(n/2)的枚举次数。<br>因为前两条都能被破坏的hash函数太弱而被抛弃，几乎所有的hash函数的破解，都是指的破坏上面的第3条性质，即找到一个碰撞。在密码学上还有一个概念是理论破解，指的是提出一个算法，使得可以用低于理论值得枚举次数找到碰撞</p><img src="/images/哈希碰撞.png" width="600">将两个学生映射在同一下标下，这叫做哈希碰撞一般哈希碰撞有两个解决方法，拉链法和线性探测法<ul><li><p>拉伸法</p> <img src="/images/拉伸法.png" value="拉伸法" width="600">（数据规模是dataSize， 哈希表的大小为tableSize）将发生冲突的元素都存在列表中，这样就可以找到小王和小李拉伸法就是合理控制哈希表的大小，既不会造成资源的浪费，又不会增加查询时间</li><li><p> 线性探测法<br><img src="/images/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B%E6%B3%95.png" alt="线性探测法"><br>线性探测法要满足tableSize大于dateSize，利用空格解决哈希碰撞的问题，如果冲突位置放置了小李，就要在下一位置放置小王。</p></li></ul><blockquote><p>参考<a href="https://blog.csdn.net/YOUYOU0710/article/details/108761052">什么是hash？什么是hash碰撞？怎么处理hash碰撞？</a><br>参考<a href="https://www.cnblogs.com/lgg20/p/15910890.html">哈希碰撞和哈希冲突</a><br>参考<a href="https://programmercarl.com/%E5%93%88%E5%B8%8C%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E5%93%88%E5%B8%8C%E8%A1%A8">哈希表</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针</title>
      <link href="/2022/10/26/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
      <url>/2022/10/26/%E5%8F%8C%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-双指针操作数组"><a href="#简介-双指针操作数组" class="headerlink" title="简介 双指针操作数组"></a>简介 双指针操作数组</h1><span id="more"></span><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>双指针能通过一个快指针和慢指针在一个for循环下完成两个for循环的工作，能减少程序的时间和空间，对于删除，查找，排序元素的优化有很大的作用。<br><b>定义慢快指针：</b><br>1.快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组<br>2.慢指针：指向更新 新数组下标的位置</p><h2 id="双指针查找元素"><a href="#双指针查找元素" class="headerlink" title="双指针查找元素"></a>双指针查找元素</h2><p>双指针每次循环都从两边开始，减少运行时间</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">int</span> length <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span>           <span class="token keyword">return</span> i<span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//数组的开始和结尾一起查找</span>           <span class="token keyword">return</span> length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="双指针移除元素"><a href="#双指针移除元素" class="headerlink" title="双指针移除元素"></a>双指针移除元素</h2><p>数组中的删除是用覆盖完成的，双指针能在一个for循环中完成操作</p><iframe src="https://tva1.sinaimg.cn/large/008eGmZEly1gntrds6r59g30du09mnpd.gif" width="502" height="350" framebordor="0"></iframe><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 相向双指针方法，确保了移动最少元素* 时间复杂度：O(n)* 空间复杂度：O(1)*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">removeElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//返回数组的删除后的长度，数组发生了改变</span>        <span class="token comment" spellcheck="true">// 快慢指针</span>    <span class="token keyword">int</span> slowIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> fastIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> fastIndex <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> fastIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>fastIndex<span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//相等时，下次循环fastIndex会比slowIndex大</span>            nums<span class="token punctuation">[</span>slowIndex<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fastIndex<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//利用一直赋值的方法</span>            slowIndex<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> slowIndex<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="翻转字符串"><a href="#翻转字符串" class="headerlink" title="翻转字符串"></a>翻转字符串</h2><p>将字符串的前后顺序进行颠倒</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">removeElement</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//返回数组的删除后的长度，数组发生了改变</span>    <span class="token keyword">int</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">char</span> t <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         arr<span class="token punctuation">[</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> slowIndex<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="替换字符串"><a href="#替换字符串" class="headerlink" title="替换字符串"></a>替换字符串</h2><p>将字符替换成指定的字符，首先要扩容填充之后的大小，要从后面进行填充<br>下面将“ ”转为123</p><iframe src="https://tva1.sinaimg.cn/large/e6c9d24ely1go6qmevhgpg20du09m4qp.gif" width="502" height="350" framebordor="0"></iframe><pre class="line-numbers language-c"><code class="language-c"> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//统计空格数量</span>   <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span>       num<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//新的数组大小</span>   <span class="token keyword">int</span> newLength <span class="token operator">=</span> length<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>num<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//新数组的长度</span>   <span class="token keyword">char</span><span class="token operator">*</span> newArr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span>newLength<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> newLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//i是左侧的指针 j是右侧的指针</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span>        newArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将不是空格的字符添加给新数组</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>       newArr<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'3'</span><span class="token punctuation">;</span>       newArr<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'2'</span><span class="token punctuation">;</span>       newArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   newArr<span class="token punctuation">[</span>newLength<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考<a href="https://programmercarl.com/">代码随想录</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 查找 </tag>
            
            <tag> 移除 </tag>
            
            <tag> 翻转 </tag>
            
            <tag> 替换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找</title>
      <link href="/2022/10/26/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
      <url>/2022/10/26/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-二分法查找数据"><a href="#简介-二分法查找数据" class="headerlink" title="简介 二分法查找数据"></a>简介 二分法查找数据</h1><span id="more"></span><ul><li>思路</li></ul><p>二分查找适用于有序列表，当数组中含有重复元素时，可能会返回的下标不是唯一的。可看教程<a href="https://www.bilibili.com/video/BV1fA4y1o715/?vd_source=580cd891d54084c6f0158e0c631311d8" target="_blank">二分法</a></p><ul><li>写法<br>定义target在一个的区间内，用区间的的范围查找target，边界值的取值是二分法的核心</li></ul><ul><li><ul><li>写法一：while(start&lt; end) [start,end)区间 if(nums[(start+end)/2]&gt;=target),令end=(start+end)/2 , if(nums[(start+end)/2]&lt;=target),令start=(start+end)/2+1 注意等号的取值<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> end <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">></span>nums<span class="token punctuation">[</span>end<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">||</span>target<span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> index<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>start<span class="token operator">&lt;</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">int</span> mid<span class="token operator">=</span> <span class="token punctuation">(</span>start<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">)</span>            end<span class="token operator">=</span>mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>             start<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//nums[mid]==target</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><ul><li>写法二：while(start&lt;=end)，要用&lt;=，因为start==end也是会产生target [start,end]区间 if(nums[(start+end)/2]&gt;target),令end=(start+end)/2-1 , if(nums[(start+end)/2]&lt; target) , 令start=(start+end)/2+1 注意等号的取值<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> end <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">></span>nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token operator">||</span>target<span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> index<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>start<span class="token operator">&lt;=</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                index <span class="token operator">=</span>mid<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">)</span>            end<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>             start<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> index<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><blockquote><p>参考<a href="https://www.programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html#_704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE" target="_blank">二分查找</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS（一）</title>
      <link href="/2022/10/22/CSS%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2022/10/22/CSS%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-基础选择器、字体、文本"><a href="#简介-基础选择器、字体、文本" class="headerlink" title="简介 基础选择器、字体、文本"></a>简介 基础选择器、字体、文本</h1><span id="more"></span><ul><li>介绍<br>CSS主要有两部分组成：选择器以及一条或几条声明，放在style标签中,style标签放在head标枪中,可以参考<a href="https://www.w3school.com.cn/cssref/css_selectors.asp" target="_blank">CSS选择器</a><h2 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h2></li><li>标签选择器<pre class="line-numbers language-css"><code class="language-css">&lt;head>&lt;style>  <span class="token comment" spellcheck="true">/*标签选择器不能差异化设置*/</span>  <span class="token selector">p </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*p和{之间要有一个空格*/</span>      <span class="token comment" spellcheck="true">/*将p标签的属性改为设的值*/</span>      <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*：和属性值之间要有一个空格*/</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>&lt;/head>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>类选择器<pre class="line-numbers language-css"><code class="language-css">&lt;head>&lt;style>  <span class="token comment" spellcheck="true">/*目标标签添加class="red"*/</span>  <span class="token selector"><span class="token class">.red</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*类前面加一个.*/</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>id选择器<pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;head>  &lt;style>      <span class="token id">#pink</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*前面加一个# id是唯一的 只能被调用一次*/</span>        <span class="token property">color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  &lt;/style>&lt;head>&lt;body>&lt;table>    &lt;p id = <span class="token string">"pink"</span>><span class="token number">123</span>&lt;/p><span class="token comment" spellcheck="true">/*添加类*/</span>&lt;/table>&lt;/body><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>通配符选择器<pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;head>&lt;style>  * </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*将所有的标签都改属性值*/</span>    <span class="token property">color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>&lt;/style>&lt;head><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h2><p>CSS font用于更改字体</p><ul><li><p>字体系列</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'宋体'</span>,serif<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*font-family改字体系列 可写多个字体*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>字体大小</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*font-size改字体大小 别忘了px*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>字体粗细</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">font-wight</span><span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*font-weight改字体粗细  700加粗 400变细*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>字体样式</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*倾斜*/</span><span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*直立*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>font的复合属性</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*font: font-style font-weught font-size/lin-height fpnt-family; 语法规范不能颠倒顺序*/</span> <span class="token comment" spellcheck="true">/*不需要的行可以省略，但是font-size font-*family不能省略*/</span><span class="token property">font</span><span class="token punctuation">:</span> italic <span class="token number">700</span> <span class="token number">16</span>px/<span class="token number">28</span>px <span class="token string">'Microsoft yahei'</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*将font属性写在一行，减少代码*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h2></li><li><p>文本颜色</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ff6600</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*十六进制改颜色,#开头，不需要记鼠标放在"#ff6600"*/</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">250</span>,<span class="token number">0</span>,<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*三基色表示颜色*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>对齐文本</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*相对于文本的盒子居中对齐*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>left</td><td>左对齐（默认）</td></tr><tr><td>right</td><td>右对齐</td></tr><tr><td>center</td><td>居中对齐</td></tr></tbody></table></li><li><p>装饰文本</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">text-decoration</span><span class="token punctuation">:</span> line-through<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*x修饰文本的样式 加删除线*/</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>none</td><td>默认，没有下划线，最常用</td></tr><tr><td>underline</td><td>下划线，链接a自带下划线</td></tr><tr><td>overline</td><td>上划线</td></tr><tr><td>line-through</td><td>删除线</td></tr></tbody></table></li><li><p>首行缩进</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*text-indent只会首行缩进，输入负值会向左缩进*/</span><span class="token property">text-indent</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*输入一个数值，px像素*/</span><span class="token property">text-indent</span><span class="token punctuation">:</span> <span class="token number">2</span>em<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**em表示当前文字的单位距离*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>行间距</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">26</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*行间距改变上下行的距离*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h2></li><li><p>内部样式表<br>内部样式表是写在html页面内部，将css代码抽出，单独放在style标签中，控制整个html页面</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;style>p </span><span class="token punctuation">{</span>   <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#160545</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>行内样式表<br>行内样式表写在标签里，仅仅对该标签进行修改，用于属性较少的情况，使用较少</p><pre class="line-numbers language-css"><code class="language-css">&lt;p style=<span class="token string">"color: #165452;font: 54px sans-serif;"</span>>有点意思&lt;/p><span class="token comment" spellcheck="true">/*stylel里放要修改的的属性*/</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>外部样式表<br>外部样式表，将css单独写在一个css文件里，再把css文件引入到html界面中，用于样式较多的情况，完全实现样式和结构分离，可控制多个页面，实际开发常用</p></li></ul><p>1.新建一个css文件，将css代码写在文件里<br>2.在html页面中，使用<link>标签引入到其中</p><pre class="line-numbers language-css"><code class="language-css">&lt;link rel=<span class="token string">"stylesheet"</span> href=<span class="token string">"style.css"</span>><span class="token comment" spellcheck="true">/*放在head标签下，css文件要和html在同一目录之下*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Chrome调试工具"><a href="#Chrome调试工具" class="headerlink" title="Chrome调试工具"></a>Chrome调试工具</h2><ul><li>打开调试工具<br>打开Chrome浏览器，点击F12或者点击右键选择检查</li><li>使用Chrome调试工具</li></ul><ol><li><font color="red"><b>Ctrl+滚轮</b></font>可以放大开发者代码大小</li><li>左边是html结构，右边是CSS样式</li><li>右边CSS样式可以直接改动数值和看属性值</li><li><font color="red"><b>Ctrl+0</b></font>恢复浏览器的大小</li><li>点击元素，发现没有样式引入，可能是类名或样式引入错误</li><li>如果样式前面出现<font color="red"><b>黄色警告</b></font>，则可能是属性书写错误<br><font color="red"><b>注意：在浏览器上修改，必须将修改的内容复制到源码里，否则浏览器刷新，会恢复原貌<br></b></font></li></ol><blockquote><p>参考<a href="https://www.bilibili.com/video/BV14J4114768?p=61&amp;vd_source=580cd891d54084c6f0158e0c631311d8">黑马程序员pink老师前端入门教程，零基础必看的h5(html5)+css3+移动端前端视频教程</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5</title>
      <link href="/2022/10/19/HTML5/"/>
      <url>/2022/10/19/HTML5/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-HTML5的基本内容"><a href="#简介-HTML5的基本内容" class="headerlink" title="简介  HTML5的基本内容"></a>简介  HTML5的基本内容</h1><span id="more"></span><h2 id="标签的类型"><a href="#标签的类型" class="headerlink" title="标签的类型"></a>标签的类型</h2><h3 id="根标签"><a href="#根标签" class="headerlink" title="根标签"></a>根标签</h3><pre><code>&lt;html&gt;网页内容&lt;/html&gt;</code></pre><p>制作网页时，内容要都在根标签里面</p><h3 id="html标签的子标签"><a href="#html标签的子标签" class="headerlink" title="html标签的子标签"></a>html标签的子标签</h3><pre><code>&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;</code></pre><p>放在html标签中<br><br>head标签的内容不会出现在网页中，设置网页的属性，看不见<br><br>body标签的内容会出现在网页中,能看见</p><ul><li>head标签的子标签title<pre><code>&lt;title&gt;网页标题&lt;/title&gt;</code></pre>搜索引擎点击后，超链接的页面标题</li></ul><h3 id="解析类型标签"><a href="#解析类型标签" class="headerlink" title="解析类型标签"></a>解析类型标签</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>告诉网页以html5解析网页，html5应用广泛，放在html标签之前</p><h3 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h3><p>meta标签放在head标签中</p><pre class="line-numbers language-html"><code class="language-html">&lt;meta charset ="utf-8">&lt;meta name = "keywords" content = "html,前端">&lt;meta http-equiv = "refresh" content ="3;url = https://www.baidu.com/"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>meta标签放在head标签中<br>http-equiv 设置转到指定网页的时间，地址<br>name设置属性，content告诉搜索引擎网页的关键字</p><ul><li>name不同属性的设置：<table><thead><tr><th>标签</th><th>作用</th></tr></thead><tbody><tr><td>charset</td><td>网页字符集</td></tr><tr><td>kewords</td><td>网页搜索的关键字</td></tr><tr><td>discription</td><td>网页的描述</td></tr><tr><td>http-equiv</td><td>设置转到的网页</td></tr><tr><td>keywords</td><td>网页搜索的关键字</td></tr><tr><td>discription</td><td>网页的描述 显示在搜索引擎界面</td></tr></tbody></table></li></ul><h3 id="排版标签"><a href="#排版标签" class="headerlink" title="排版标签"></a>排版标签</h3><ul><li><p>头部标签<br>放在body标签中</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>某一部分的头部部分</p></li><li><p>主要主体标签<br>放在body标签中</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>主体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>网页的主体部分，一个网页只能有一个main标签</p></li><li><p> 底部标签<br>放在body标签中</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>底部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>导航标签<br>放在body标签中</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>导航<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>便于查找网页内容</p></li><li><p>边框标签<br>放在body标签中</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span>导航<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>放在网页的边栏部分</p><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--table表示表格，width和height限定表格的大小，border表示行距--></span>&lt;table align="center" width ="500" height ="250" border="1" >  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- tr表示每一行 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>排名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- th表格头部 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>名字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- td表格主体 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>x西游记<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span> <span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性名</th><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>align</td><td>left、certer、right</td><td>规定表格对周围元素的对齐方式</td></tr><tr><td>border</td><td>1 or “”</td><td>规定单元格是否有边框</td></tr><tr><td>cellpadding</td><td>像素值</td><td>规定单元格与其内容之间的空白</td></tr><tr><td>width</td><td>像素值或百分比</td><td>规定表格宽度</td></tr></tbody></table><h3 id="文章的标签"><a href="#文章的标签" class="headerlink" title="文章的标签"></a>文章的标签</h3></li><li><p>文章标签</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>导航<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>放在body标签中</p></li><li><p>语义化标签</p><table><thead><tr><th>标签</th><th>作用</th></tr></thead><tbody><tr><td>em</td><td>语气加重，斜体</td></tr><tr><td>strong</td><td>强调，加粗</td></tr><tr><td>blobkquote</td><td>引用标签</td></tr></tbody></table></li><li><p>分组标签</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hgroup</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hgroup</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将有关的的标签放在hgroup中</p></li><li><p> 标题标签 </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>****<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内容****放在标签中间，第二个标签加/与第一个标签进行区分，<br>h1表示一级标签，h2则表示二级标签，h1-h6</p></li><li><p> 段落标签</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>$$$<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>与标题标签用法相同,表示一个段落</p><h2 id="标签的属性"><a href="#标签的属性" class="headerlink" title="标签的属性"></a>标签的属性</h2></li><li><p> 标签属性的分类<br><a href="https://blog.csdn.net/u013519551/article/details/52525855" target="_blank">标签属性分类</a>转自<strong>独家记忆0408</strong></p><strong></strong></li><strong><li><p> 标签属性的使用</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>font-style</td><td>规定字体样子</td></tr><tr><td>font-variant</td><td>规定字体异体</td></tr><tr><td>font-weight</td><td>规定字体粗细</td></tr><tr><td>font-size/line-height</td><td>规定字体尺寸和行高</td></tr><tr><td>font-family</td><td>规定字体系列</td></tr><tr><td>caption</td><td>定义被标题控件（比如按钮、下拉列表等）使用的字体</td></tr><tr><td>icon</td><td>定义被图标标记使用的字体</td></tr><tr><td>menu</td><td>定义被下拉列表使用的字体</td></tr><tr><td>message-box</td><td>定义被对话框使用的字体</td></tr><tr><td>small-caption    caption</td><td>字体的小型版本</td></tr><tr><td>status-bar</td><td>定义被窗口状态栏使用的字体</td></tr></tbody></table><pre class="line-numbers language-html"><code class="language-html">&lt;font color = "yellow" size ='3'>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>color设置“内容”的颜色，属性值yellow放在””中,属性之间用空格隔开</p><h2 id="块元素和行内元素"><a href="#块元素和行内元素" class="headerlink" title="块元素和行内元素"></a>块元素和行内元素</h2></li><li><p>介绍<br>块元素：宏观展示，大多数都能放，用了会换行<br>行内元素：对一行内的元素，进行添加修饰，不会换行<br>行内元素一般可放在块元素中，而块元素很少放在行内元素中，用错了浏览器会自动修正</p></li><li><p> 分类<br>块元素</p><table><thead><tr><th>元素</th><th>标签</th></tr></thead><tbody><tr><td>行内元素</td><td>em,trong,p,a</td></tr><tr><td>块元素</td><td>blockquote,h</td></tr></tbody></table></li></strong></ul><strong><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li><p>无序列表<br>ul表示列表标签<br>li表示列表的项</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>结构<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>表现<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8.png"></p></li><li><p>有序列表<br>ol表示列表标签<br>li表示列表的项</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>结构<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>表现<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8.png"></p></li><li><p>定义列表<br>dl表示定义列表<br>dt表示要下定义的东西<br>dd表示下的定义</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>结构<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--被定义的对象--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>结构是...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>结构能..<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="表单案例"><a href="#表单案例" class="headerlink" title="表单案例"></a>表单案例</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &lt;table width = "600">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--第一行元素--></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            &lt;input type="radio" name="sex" value="nan" checked ="checked" id="man"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--第二行--></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>生日<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--下拉表单元素这里只测试几个--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--下拉表单元素--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">selected</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>--请选择年份--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2015<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2015<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2016<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2016<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--下拉表单元素--></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">selected</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>--请选择月份--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>11<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--下拉表单元素--></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">selected</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>--请选择日--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>11<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>所在地区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>爱好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            &lt;input type="checkbox" name = "love" id="qiu"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>qiu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>打球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            &lt;input type="checkbox" name = "love" id="sleep"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sleep<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>睡觉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span> 个人介绍<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>个人经历<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上传文件1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>重置<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E8%A1%A8%E5%8D%95%E5%9F%9F%E6%A1%88%E4%BE%8B.png"></p><ul><li><p>form的主要的属性 </p><table><thead><tr><th>属性</th><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>action</td><td>url地址</td><td>用于接收表单数据的服务器url地址</td></tr><tr><td>method</td><td>get/post</td><td>用于设置表单提交的方式</td></tr><tr><td>name</td><td>名称</td><td>表单域的名称</td></tr></tbody></table></li></ul><h3 id="表单控件-input输入表单元素"><a href="#表单控件-input输入表单元素" class="headerlink" title="表单控件-input输入表单元素"></a>表单控件-input输入表单元素</h3><ul><li><p>type属性及其描述</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>button</td><td>定义可点击的按钮</td></tr><tr><td>checkbox</td><td>定义复选框</td></tr><tr><td>file</td><td>定义输入字段和“浏览”按钮，供文件上传</td></tr><tr><td>hidden</td><td>定义隐藏的输入字段</td></tr><tr><td>image</td><td>定义图像的形式的提交按钮</td></tr><tr><td>password</td><td>定义密码字段，字段被掩码</td></tr><tr><td>radio</td><td>定义单选按钮</td></tr><tr><td>reset</td><td>定义重置按钮，会清除表单的搜有数据</td></tr><tr><td>submit</td><td>定义提交按钮，把表单数据提交给服务器</td></tr><tr><td>text</td><td>定义单行输入字段</td></tr></tbody></table></li><li><ul><li>label标签<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>for的属性值与id的属性值相同，浏览器点击“女”会直接转到相应的元素上，</li></ul></li><li><p>input中除type外的标签属性</p><table><thead><tr><th>属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>自定义</td><td>定义input元素的名称</td></tr><tr><td>value</td><td>自定义</td><td>规定input元素的值</td></tr><tr><td>checked</td><td>checked</td><td>决定input元素的默认值</td></tr><tr><td>maxlength</td><td>正整数</td><td>规定字段的字符最大长度</td></tr></tbody></table></li></ul><h3 id="表单控件-select下拉表单元素"><a href="#表单控件-select下拉表单元素" class="headerlink" title="表单控件-select下拉表单元素"></a>表单控件-select下拉表单元素</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token punctuation">></span></span>籍贯:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--选项名称--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token punctuation">></span></span>山东<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--选项--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        &lt;option selected ="selected">火星<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/select%E4%B8%8B%E6%8B%89%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0.png"></p><h3 id="表单控件-textarea文本域元素"><a href="#表单控件-textarea文本域元素" class="headerlink" title="表单控件-textarea文本域元素"></a>表单控件-textarea文本域元素</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token punctuation">></span></span>    今日反馈：<span class="token comment" spellcheck="true">&lt;!--文本域的名称--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--123表示文本域的默认文本值---></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/textarea%E8%A1%A8%E5%8D%95%E6%96%87%E6%9C%AC%E5%9F%9F%E5%85%83%E7%B4%A0.png"></p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><ul><li> 介绍<br>超链接路径分为相对路径和绝对路径<br>打开同一目录下的网页，用相对路径<br>打开外部网页，用绝对路径</li><li>网页跳转<pre class="line-numbers language-html"><code class="language-html">&lt;a href = "https://www12.baidu.com/" target = "_blank">超链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>href填网址，既可是绝对路径，也可是相对路径  target填是否打开新的网页，_blank代表打开，默认不打开</li><li> 超链接相互跳转<pre class="line-numbers language-html"><code class="language-html">&lt;a id = "top" href = "#bottom" target = "_blank">超链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>&lt;a id = "bottom" href = "#top" target = "_blank">超链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>为超链接赋给一个id，href填入#+id，即可到达该网页指定超链接的位置<br>href填入#，则默认返回该网页顶部，填入”javascrip:;”则不会跳转到任何界面</li></ul><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><ul><li><p>图片分类</p><table><thead><tr><th>图片类型</th><th>特点</th><th>用途</th></tr></thead><tbody><tr><td>jpg</td><td>支持的颜色比较丰富，不支持透明效果，不支持动图</td><td>一般用于显示照片</td></tr><tr><td>gif</td><td>支持颜色比较少，支持简单透明，支持动图</td><td>动图</td></tr><tr><td>png</td><td>支持颜色丰富，支持复杂透明，不支持动图</td><td>网页</td></tr><tr><td>base64</td><td>通过字符的形式引入图片</td><td>加载速度快</td></tr></tbody></table></li><li><p>用法</p><pre class="line-numbers language-html"><code class="language-html">&lt;img src = "https://tse3-mm.cn.bing.net/th/id/OIP-C.Rq5h9rKa8uBoUxtGTCCVRQHaKd?w=130&amp;h=184&amp;c=7&amp;r=0&amp;o=5&amp;dpr=1.3&amp;pid=1.7" width = "800" alt = "风景">&lt;img src = "./img.gif" alt = "1"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>src填本地图片的路径，图片要和网页在同一目录下，也可填图片网址<br>width设置图片的大小<br>alt对图片进行命名，一般不会在网页上显示，而会便于搜素引擎查找</p></li></ul><h2 id="内联框架"><a href="#内联框架" class="headerlink" title="内联框架"></a>内联框架</h2><ul><li>介绍<br>引入别的网页在自己的网页中，放在一个指定大小的框架中</li><li>用法<pre class="line-numbers language-html"><code class="language-html">&lt;iframe src ="https://www.baidu.com" width = "800" height = "600" framebordor = "0"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>src放网址，width和height设置大小，framebordor边框设置</li></ul><h2 id="音频、视频"><a href="#音频、视频" class="headerlink" title="音频、视频"></a>音频、视频</h2><h3 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">contrals</span><span class="token punctuation">></span></span>    &lt;source src = "./scorce/ji.mp3" >    &lt;embed src = "./scorce/ji.mp3" type = "audio/mp3 " width = "400" height = "300"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>contrals是否允许用户控制播放<br>sourse用于windows9以上的浏览器<br>embed用于windows8以下的浏览器</p><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">contrals</span><span class="token punctuation">></span></span>    &lt;source src = "./scorce/ji.mp4" >    &lt;embed src = "./scorce/ji.mp4" type = "audio/mp4 " width = "400" height = "300"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>contrals是否允许用户控制播放<br>sourse用于windows9以上的浏览器<br>embed用于windows8以下的浏览器</p><h3 id="第三方"><a href="#第三方" class="headerlink" title="第三方"></a>第三方</h3><iframe src="//player.bilibili.com/player.html?aid=77217003&amp;bvid=BV1XJ411X7Ud&amp;cid=132017557&amp;page=26" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe> <p>视频和音频一般较大，会占用外存和内存，可将自己的视频音频借用第三方网页进行打开，不会占用自己的网页空间<br>找到视频下的分享链接，复制代码即可  </p><blockquote><p>参考<a href="https://www.bilibili.com/video/BV14J4114768?p=1&amp;vd_source=580cd891d54084c6f0158e0c631311d8">黑马程序员pink老师前端入门教程，零基础必看的h5(html5)+css3+移动端前端视频教程</a></p></blockquote></strong>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL操作</title>
      <link href="/2022/10/11/MySQL%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/10/11/MySQL%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-操作MySQL"><a href="#简介-操作MySQL" class="headerlink" title="简介 操作MySQL"></a>简介 操作MySQL</h1><span id="more"></span><h1 id="MySQL语法"><a href="#MySQL语法" class="headerlink" title="MySQL语法"></a>MySQL语法</h1><ul><li><p> 创建数据库 以bjpowernode为例</p><pre><code>create database bjpowernode;</code></pre></li><li><p>使用bjpoernode的数据 以bjpowernode为例</p><pre><code>use bjpoernode;</code></pre></li><li><p>查看当前数据库的表格</p><pre><code>     show tables;</code></pre></li><li><p>初始化数据 复制在MySQL文件下resources文件下的bjpoernode.sql的路径 以bjpowernode为例</p><pre><code>      source D:\MySQL\resources\bjpoernode.sql</code></pre></li><li><p>删除数据库 以bjpowernode为例</p><pre><code>     drop database bjpowernode;</code></pre></li><li><p>查看表格结构 以dept为例</p><pre><code>     desc dept;</code></pre></li><li><p>查看表格数据 以dept为例</p><pre><code> select *from dept;</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL安装</title>
      <link href="/2022/10/11/MySQL%E5%AE%89%E8%A3%85/"/>
      <url>/2022/10/11/MySQL%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-下载MySQL"><a href="#简介-下载MySQL" class="headerlink" title="简介 下载MySQL"></a>简介 下载MySQL</h1><span id="more"></span><h1 id="MySQL的下载"><a href="#MySQL的下载" class="headerlink" title="MySQL的下载"></a>MySQL的下载</h1><p>下载网址：<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p><p><img src="/images/MySQLdownload.png"></p><h1 id="MySQL的配置"><a href="#MySQL的配置" class="headerlink" title="MySQL的配置"></a>MySQL的配置</h1><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><ul><li> 打开电脑高级系统配置<br><img src="/images/%E9%85%8D%E7%BD%AEMySQL%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png"></li><li>复制MySQL的路径</li></ul><p><img src="/images/MySQL%E7%9A%84%E8%B7%AF%E5%BE%84.png" alt="复制路径"></p><ul><li>新建MySQL_HOME环境变量</li></ul><p><img src="/images/%E6%96%B0%E5%BB%BAMySQL%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="新建环境变量"></p><ul><li>编辑path，点击“新建”</li></ul><p><img src="/images/%E6%B7%BB%E5%8A%A0path.png" alt="新建环境变量"></p><ul><li>点击“确定”，保存设置，这样环境变量就配置完成了</li></ul><h2 id="新建MySQL的配置文件"><a href="#新建MySQL的配置文件" class="headerlink" title="新建MySQL的配置文件"></a>新建MySQL的配置文件</h2><ul><li> 在MySQL的文件目录下，新建一个文件“my.ini”，把以下的内容粘贴复制到文件里<pre class="line-numbers language-sql"><code class="language-sql"><span class="token punctuation">[</span>mysql<span class="token punctuation">]</span><span class="token keyword">default</span><span class="token operator">-</span>character<span class="token operator">-</span><span class="token keyword">set</span><span class="token operator">=</span>utf8<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>character<span class="token operator">-</span><span class="token keyword">set</span><span class="token operator">-</span>server<span class="token operator">=</span>utf8<span class="token keyword">default</span><span class="token operator">-</span>storage<span class="token operator">-</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">INNODB</span>sql_mode<span class="token operator">=</span>STRICT_TRANS_TABLES<span class="token punctuation">,</span>NO_ZERO_IN_DATE<span class="token punctuation">,</span>NO_ZERO_DATE<span class="token punctuation">,</span>ERROR_FOR_DIVISION_BY_ZERO<span class="token punctuation">,</span>NO_AUTO_CREATE_USER<span class="token punctuation">,</span>NO_ENGINE_SUBSTITUTION<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="初始化MySQL"><a href="#初始化MySQL" class="headerlink" title="初始化MySQL"></a>初始化MySQL</h2><ul><li>用管理员命令打开命令框，进入到mysqlt下的bin，并输入.\mysqld       –initialize-insecure </li></ul><p><img src="/images/%E7%94%9F%E6%88%90data.png" alt=".\mysqld  --initialize-insecure"></p><h2 id="注册MySQL服务"><a href="#注册MySQL服务" class="headerlink" title="注册MySQL服务"></a>注册MySQL服务</h2><ul><li>在命令行中输入mysqld -Install  </li></ul><p><img src="/images/%E6%B3%A8%E5%86%8CMySQL.png" alt="mysqld -Install"></p><h2 id="启动MySQL服务"><a href="#启动MySQL服务" class="headerlink" title="启动MySQL服务"></a>启动MySQL服务</h2><ul><li>输入 net start mysql<pre><code>net start mysql</code></pre><blockquote><p>参考<a href="https://blog.csdn.net/weixin_42869365/article/details/83472466">MySQL下载与安装</a></p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
