<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript</title>
      <link href="/2022/11/11/JavaScript/"/>
      <url>/2022/11/11/JavaScript/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-JavaScript"><a href="#简介-JavaScript" class="headerlink" title="简介 JavaScript"></a>简介 JavaScript</h1><span id="more"></span><blockquote><p>JavaScript主要包括JavaScript基础（ECMAScript），Web APIs（DOM，BOM）<br>Web API 是浏览器提供的一套操作浏览器功能和页面元素的 API ( BOM 和 DOM )<br>MDN 详细 API : <a href="https://developer.mozilla.org/zh-CN/docs/Web/API">https://developer.mozilla.org/zh-CN/docs/Web/API</a></p></blockquote><h2 id="ECMAScript（JavaScript基础语法）"><a href="#ECMAScript（JavaScript基础语法）" class="headerlink" title="ECMAScript（JavaScript基础语法）"></a>ECMAScript（JavaScript基础语法）</h2><h3 id="输入、输出"><a href="#输入、输出" class="headerlink" title="输入、输出"></a>输入、输出</h3><table><thead><tr><th>方法</th><th>说明</th><th>归属</th></tr></thead><tbody><tr><td>alert(msg)</td><td>弹出警示框</td><td>浏览器</td></tr><tr><td>console.log(msg)</td><td>控制台打印输出信息</td><td>浏览器</td></tr><tr><td>prompt(info)</td><td>弹出输入框，提示用户输入</td><td>浏览器</td></tr></tbody></table><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><blockquote><p>变量是程序在内存申请的一块用于存放数据的空间</p></blockquote><ul><li>变量的使用<ul><li>声明<br>var age;//s声明一个age的变量</li><li>赋值<br>age=18;</li><li>初始化<br>var age=17;</li></ul></li></ul><p><strong>声明变量的特殊情况</strong></p><table><thead><tr><th>情况</th><th>结果</th></tr></thead><tbody><tr><td>只声明，不赋值</td><td>undefined</td></tr><tr><td>不声明，不赋值，直接用</td><td>报错</td></tr><tr><td>不声明，只赋值</td><td>正常</td></tr></tbody></table><p><strong>命名规范</strong><br>1.不能数字开头<br>2.不能是关键字，保留字<br>3.前面的单词小写，后面的单词首字母大写<br>4.区分大小写</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><blockquote><p>不同的数据类型占据的内存不同</p></blockquote><p><strong>JavaScripts是、是一种弱类型或者说动态语言</strong>，意味着相同的变量可用作不同的类型</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token operator">=</span> <span class="token string">'bill'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h4><table><thead><tr><th>简单数据类型</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>Number</td><td>数字型</td><td>0</td></tr><tr><td>Boolean</td><td>布尔型</td><td>false</td></tr><tr><td>String</td><td>字符串型</td><td>“”</td></tr><tr><td>Undefined</td><td>var a,声明了变量没有给值</td><td>Undefined</td></tr><tr><td>Null</td><td>var a =null,声明了变量a为空值</td><td>null</td></tr></tbody></table><p><strong>数字型Number</strong><br>1.num=10;表示十进制<br>2.num=010;表示八进制<br>3.num=0x10;表示十六进制<br>4.num=Infinity;表示无穷大<br>5.num=-Infinity;表示无穷小<br>6.NAN;非数字<br><strong>字符串型</strong><br>1.字符串用’’或””<br>2.字符串中出现引号，用引号嵌套<br>3.字符串可以和任何类型拼接后形成一个新的字符串 ‘+’<br><strong>布尔型</strong><br>1+true=2，参与运算时，true=1，false=0<br><strong>Undefined</strong><br>1.Undefined+1=NaN,Undefined与数字相加，结果是NaN<br>2.Undefined和字符串相加是字符串</p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul><li>转换为字符串</li></ul><table><thead><tr><th>方式</th><th>案例</th></tr></thead><tbody><tr><td>toString()</td><td>num.toString()</td></tr><tr><td>String()</td><td>String(num)</td></tr><tr><td>加号拼接</td><td>10+’’</td></tr></tbody></table><ul><li>转为数字型</li></ul><table><thead><tr><th>方式</th><th>案例</th></tr></thead><tbody><tr><td>parseInt(string)</td><td>parseInt(‘45’)</td></tr><tr><td>parseFloat(string)</td><td>parseFloat(‘15.2’)</td></tr><tr><td>Number()</td><td>Number(‘12’)</td></tr><tr><td>js隐式转换（-*/）</td><td>‘12’-0</td></tr></tbody></table><ul><li>转为布尔型</li></ul><p>Boolean()可以将其他类型转为布尔型，如Boolean(‘true’)<br>代表为空、否定的值都会被转为false，如“”，0，NaN，null，undefined<br>其余值都会被转为true</p><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><blockquote><p>流程控制主要有三种结构，分别是<strong>顺序结构</strong>、<strong>分支结构</strong>和<strong>循环结构</strong></p></blockquote><h4 id="if分支语句"><a href="#if分支语句" class="headerlink" title="if分支语句"></a>if分支语句</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span>条件语句<span class="token punctuation">)</span> <span class="token punctuation">{</span>    执行语句<span class="token comment" spellcheck="true">/*条件语句成立时 执行*/</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    执行语句<span class="token comment" spellcheck="true">/*条件语句不成立时 执行*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h4><p>条件表达式？表达式1：表达式2<br>如果条件为真，则返回表达式1，反之则返回表达式2<br>1&gt;2?1:2 ，返回2</p><h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><p>语法结构</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*利用表达式的值和case后面的选项进行匹配，全等 则执行该case*/</span><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> value1<span class="token punctuation">:</span>          执行语句<span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> value1<span class="token punctuation">:</span>         执行语句<span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> value1<span class="token punctuation">:</span>         执行语句<span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token operator">...</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        执行最后的语句；<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：只有当所有case都匹配不上，才会执行default</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>只有匹配不上才会执行          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出1</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><ul><li>for循环<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span>初始值<span class="token punctuation">;</span>循环条件<span class="token punctuation">;</span>操作表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>  循环体<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>while循环<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//当条件表达式为真时，进入循环，否则退出循环</span> 循环体<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>do-while循环<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">do</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//先执行一次循环</span>  循环体<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><blockquote><p>数组是指<strong>一组数据</strong>的集合，其中每个数据被称为<strong>元素</strong>，在数组中可以存放任意类型的<strong>元素</strong>。</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个空的数组</span><span class="token comment" spellcheck="true">//数组中的元素可以是不同的数据类型</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明一个空数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2.3</span><span class="token punctuation">,</span> <span class="token string">'hello'</span> <span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//利用数组字面量创建数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//访问整个数组数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//访问数组中的第一个元素</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取数值长度</span><span class="token comment" spellcheck="true">//新增数组元素有以下两种方法</span><span class="token comment" spellcheck="true">//1.修改数组长度 </span>arr<span class="token punctuation">.</span>length <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//扩大数组的长度 数组的大小可以任意修改 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//新增的元素为空</span><span class="token comment" spellcheck="true">//2.修改索引号 追加元素</span>arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//原来没有的索引号会追加元素 此时length会自动直接增加</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><blockquote><p>函数就是封装了一段可被<strong>重复调用执行</strong>的代码块</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//function 声明函数的关键字 getSum是函数名 num1和num2是函数的形参</span>    <span class="token keyword">var</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> num1 <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num2 <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*函数的返回值 返回给函数的调用者     return会终止函数     rerun只能返回一个值    return 1,2; return会返回最后一个值2    如果函数没有返回值，则会返回undefined    */</span><span class="token punctuation">}</span><span class="token keyword">var</span> <span class="token keyword">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//另外一种函数声明的方式  采用函数表达式赋值的形式</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'13'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用函数 1和100是函数的实参</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//当函数个数实参大于形参个数时，多余的实参不会传给形参 123没用</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当形参 个数大于实参个数时，形参相当于一个没有赋值的变量 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：js中会先将所有的var和function提到当前作用域的最前面</strong></p><ul><li><strong>预解析分为 变量预解析（变量提升） 和 函数预解析（函数提升）</strong></li><li><strong>变量提升 就是把所有变量声明提升到当前作用域的最前面 不提升复制操作</strong></li><li><strong>变量提升 就是把所有变量声明提升到当前作用域的最前面 不调用函数</strong></li></ul><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><blockquote><p>在JavaScript中，对象是一组无序的相关属性和方法的集合，是指某一特定的事物</p></blockquote><ul><li><p>创建对象</p><ul><li><p>字面量创建对象</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    uname<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//属性 不需要声明 </span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//多个属性值用逗号隔开</span>    sayHi<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//函数是单独声明调用的</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>uname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对象名.属性名 调用对象的属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对象名['属性名'] 调用对象的属性 没有age属性则会返回0</span><span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//可以判断obj中是否有'a'的属性 没有则返回0 表示为假</span>obj<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用对象的方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>new Object 创建对象</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建了一个空的对象 注意对象名的首字母要大写</span>obj<span class="token punctuation">.</span>uname <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//赋值添加对象属性</span>obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>sayHi <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//赋值添加函数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi ~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>uname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对象名.属性名 调用对象的属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对象名['属性名'] 调用对象的属性</span>obj<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用对象的方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>构造函数创建对象</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//构造函数的名字首字母大写</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//需要this赋值</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>sing <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>sang<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//属性和函数前面必须要有this</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sang<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//使用new创建一个对象</span>    <span class="token keyword">var</span> zs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    zs<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token string">'冰雨'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用对象的函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>遍历对象</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">;</span>  age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// for (变量 in 对象) {} </span><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出属性名</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出属性值</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>内置对象</p><blockquote><p>Mozilia开发者网络（MDN）提供了有关开放网络技术（Open Web）的信息，包括HTML、CSS和万维网及HTML5应用的API<br>MDN: <a href="https://developer.mozilla.org/zh-CN">https://developer.mozilla.org/zh-CN</a></p></blockquote></li><li><p>Math对象</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>Math.abs</td><td>取绝对值</td></tr><tr><td>Math.floor</td><td>向下取整</td></tr><tr><td>Math.ceil</td><td>向上取整</td></tr><tr><td>Math.round</td><td>四舍五入</td></tr><tr><td>Math.random</td><td>随机数</td></tr></tbody></table></li><li><p>Date对象</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>getFullYear()</td><td>获取当前年</td></tr><tr><td>getMonth()</td><td>获取当前月,得到的月份比实际小1</td></tr><tr><td>getDate()</td><td>获取当前日</td></tr><tr><td>getDay()</td><td>获取星期几,星期天返回0</td></tr><tr><td>getHours()</td><td>获取当前小时</td></tr><tr><td>getMinutes()</td><td>获取当前分钟</td></tr><tr><td>getSeconds()</td><td>获取当前秒钟</td></tr><tr><td>valueOf()</td><td>返回当前到1970.1.1总的毫秒数</td></tr><tr><td>getTime()</td><td>返回当前到1970.1.1总的毫秒数</td></tr><tr><td>+new Date()</td><td>返回指定时间到1970.1.1总的毫秒数</td></tr><tr><td>Date.now()</td><td>返回当前到1970.1.1总的毫秒数</td></tr></tbody></table></li><li><p>Array数组对象</p><table><thead><tr><th>方法名</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>instanceof</td><td>判断是不是数组</td><td>true/fasle</td></tr><tr><td>Array.isArray()</td><td>判断是不是数组</td><td>true/fasle</td></tr><tr><td>unshift()</td><td>在数组开头添加一个或者多个元素</td><td>返回新数组的长度</td></tr><tr><td>push()</td><td>在数组末尾添加一个或者多个元素</td><td>返回新数组的长度</td></tr><tr><td>shift()</td><td>删除数组的第一一个元素</td><td>返回删除的元素</td></tr><tr><td>pop()</td><td>删除数组的最后一个元素</td><td>返回删除的元素</td></tr><tr><td>reverse()</td><td>翻转数组</td><td>没有返回值</td></tr><tr><td>sort()</td><td>排序</td><td>没有返回值</td></tr><tr><td>indexOf()</td><td>数组中查找给定元素的第一个索引</td><td>如果存在返回索引号，如果不存在，返回-1</td></tr><tr><td>lastIndexOf()</td><td>数组中查找给定元素的最后一个索引</td><td>如果存在返回索引号，如果不存在，返回-1</td></tr><tr><td>join()</td><td>将数组转为字符串</td><td>转成的字符串</td></tr></tbody></table><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建空数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个长度为2的空数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表示数组红有两个数组元素 3 4</span><span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断arr是不是数组</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ie9+ html5新增的</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6.2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//头部添加元素</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span>，<span class="token string">'45'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//尾部追加元素</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除首元素</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除尾元素</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span> b <span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//升序</span>  <span class="token comment" spellcheck="true">//return b-a;//降序</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回下标</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转为字符串 ,分隔符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>字符串对象</p><blockquote><p>字符串里面的内容不可变，给字符串新赋值，改变的地址，=即在内存中新开辟了一个内存空间</p></blockquote><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>indexOf()</td><td>返回索引值</td></tr><tr><td>charAt(index)</td><td>返回指定位置的字符</td></tr><tr><td>charCodeAt(index)</td><td>返回指定位置字符的ASCLL码</td></tr><tr><td>str[index]</td><td>返回指定位置的字符，html5 ie8+支持</td></tr><tr><td>concat(str1,str2…)</td><td>连接两个或者多个字符串 等效于+</td></tr><tr><td>substr(start,length)</td><td>从start位置开始（索引号）length取长度 截取字符串</td></tr><tr><td>slice(start,end)</td><td>从start开始到end 截取字符串</td></tr><tr><td>substring(start,end)</td><td>从start开始到end 截取字符串 end取不到 不接受负值</td></tr><tr><td>replace(‘a’,’b’)</td><td>把’a’替换成’b’,只会替换第一个字符’a’</td></tr><tr><td>split(‘,’)</td><td>将字符串转为数组，以’,’为分隔符</td></tr></tbody></table></li></ul><h2 id="DOM（页面文档对象模型）"><a href="#DOM（页面文档对象模型）" class="headerlink" title="DOM（页面文档对象模型）"></a>DOM（页面文档对象模型）</h2><blockquote><p>文档对象模型（Document Object Model，简称 DOM），是 W3C 组织推荐的处理可扩展标记语言（HTML或者XML）的标准编程接口。<br>W3C 已经定义了一系列的 DOM 接口，通过这些 DOM 接口可以改变网页的内容、结构和样式。</p></blockquote><h3 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h3><p><img src="/images/DOM%E6%A0%91.png"></p><ul><li>文档：一个页面就是一个文档，DOM 中使用 document 表示</li><li>元素：页面中的所有标签都是元素，DOM 中使用 element 表示</li><li>节点：网页中的所有内容都是节点（标签、属性、文本、注释等），DOM 中使用 node 表示</li></ul><p><strong>DOM 把以上内容都看做是对象</strong></p><h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><p>获取页面中的元素可以使用以下几种方式:</p><ul><li>根据 ID 获取</li><li>根据标签名获取</li><li>通过 HTML5 新增的方法获取</li><li>特殊元素获取</li></ul><h4 id="根据-ID-获取"><a href="#根据-ID-获取" class="headerlink" title="根据 ID 获取"></a>根据 ID 获取</h4><p>使用 getElementById() 方法可以获取带有 ID 的元素对象。</p><pre class="line-numbers language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//**element**是一个 Element 对象。</span><span class="token comment" spellcheck="true">//如果当前文档中拥有特定 ID 的元素</span><span class="token comment" spellcheck="true">//不存在则返回 null. **id**是大小写敏感的字符串，代表了所要查找的元素的唯一 ID. </span><span class="token comment" spellcheck="true">// 返回一个匹配到 ID 的 DOM Element 对象。若在当前 Document 下没有找到，则返回 null。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="根据标签名获取"><a href="#根据标签名获取" class="headerlink" title="根据标签名获取"></a>根据标签名获取</h4><p>使用 getElementsByTagName() 方法可以返回带有指定标签名的对象的集合。</p><pre class="line-numbers language-js"><code class="language-js"> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'标签名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// var ol = document.getElementsByTagName('ol'); // [ol]</span><span class="token comment" spellcheck="true">// console.log(ol[0].getElementsByTagName('li'));</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><ul><li>因为得到的是一个对象的集合，所以我们想要操作里面的元素就需要遍历。</li><li>得到元素对象是动态的</li><li>如果获取不到元素,则返回为空的伪数组(因为获取不到对象)</li></ul><h4 id="HTML5新增的方法获取"><a href="#HTML5新增的方法获取" class="headerlink" title="HTML5新增的方法获取"></a>HTML5新增的方法获取</h4><pre class="line-numbers language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'类名'</span><span class="token punctuation">)</span>；<span class="token comment" spellcheck="true">// getElementsByClassName 根据类名获得某些元素集合</span><span class="token comment" spellcheck="true">// querySelector 返回指定选择器的第一个元素对象 切记 里面的选择器需要加符号 .box  #nav</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'选择器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> firstBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// querySelectorAll()返回指定选择器的所有元素对象集合</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'选择器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> allBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> bodyEle <span class="token operator">=</span> doucumnet<span class="token punctuation">.</span>body  <span class="token comment" spellcheck="true">// 返回body元素对象</span><span class="token keyword">var</span> htmlEle <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement  <span class="token comment" spellcheck="true">// 返回html元素对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h3><blockquote><p>JavaScript 使我们有能力创建动态页面，而事件是可以被 JavaScript 侦测到的行为。<br>事件三元素：事件源 事件类型  事件处理程序</p></blockquote><ul><li><p><strong>事件源</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//事件源 获取事件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>事件类型</strong></p><pre class="line-numbers language-js"><code class="language-js">btn<span class="token punctuation">.</span>onclick<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//绑定事件 注册事件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>常见的鼠标事件</strong><table><thead><tr><th>鼠标事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得鼠标焦点触发</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table></li></ul></li><li><p><strong>事件处理程序</strong></p></li></ul><pre class="line-numbers language-js"><code class="language-js">btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//添加事件处理程序  点击事件</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'1231'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//点击事件 弹窗</span><span class="token punctuation">}</span>input<span class="token punctuation">.</span>onfocus <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//焦点事件</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">'1564'</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token punctuation">}</span>input<span class="token punctuation">.</span>onblur <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//失去焦点事件</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">===</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'1564'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h3><blockquote><p>JavaScript 的 DOM 操作可以改变网页内容、结构和样式，我们可以利用 DOM 操作元素来改变元素里面的内容 、属性等。注意以下都是属性</p></blockquote><h4 id="改变元素内容"><a href="#改变元素内容" class="headerlink" title="改变元素内容"></a>改变元素内容</h4><ul><li>element.innerText 从起始位置到终止位置的内容, 但它去除 html 标签， 不识别标签，获取时会同时空格和换行也会去掉</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//事件源 获取事件</span><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    div<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'455'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//改变div的内容</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>element.innerHTML 起始位置到终止位置的全部内容，包括 html 标签，获取时会同时保留空格和换行 W3C标准</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//事件源 获取事件</span><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'455'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//改变div的内容</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="改变元素属性"><a href="#改变元素属性" class="headerlink" title="改变元素属性"></a>改变元素属性</h4><p>改变元素的基础属性 在html中设置的属性</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//element.属性 获取内置属性（元素自带的属性）</span>img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'images/zxy.jpg'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//直接可以改变图片的属性</span>img<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="改变元素的样式属性"><a href="#改变元素的样式属性" class="headerlink" title="改变元素的样式属性"></a>改变元素的样式属性</h4><p>改变元素的样式属性 在css中设置的属性 JS 修改 style 样式操作，产生的是行内样式，CSS 权重比较高</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//element.style  行内样式操作  样式较少 功能较少</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//element.className 类名样式操作 功能复杂的情况 样式多 </span>div<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'change'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//改变元素的类名 在css中添加change的类 会覆盖掉原来的类名</span><span class="token comment" spellcheck="true">//在css中添加change的类 不会覆盖掉原来的类名</span>div<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'old change'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="表单元素的属性操作"><a href="#表单元素的属性操作" class="headerlink" title="表单元素的属性操作"></a>表单元素的属性操作</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>button<span class="token operator">></span>按钮<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token string">"输入内容"</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">// 1. 获取元素</span>    <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. 注册事件 处理程序</span>    btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// input.innerHTML = '点击了';  这个是 普通盒子 比如 div 标签里面的内容</span>        <span class="token comment" spellcheck="true">// 表单里面的值 文字内容是通过 value 来修改的</span>        input<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'被点击了'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果想要某个表单被禁用 不能再点击 disabled  我们想要这个按钮 button禁用</span>        <span class="token comment" spellcheck="true">// btn.disabled = true;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// this 指向的是事件函数的调用者 btn</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自定义属性操作"><a href="#自定义属性操作" class="headerlink" title="自定义属性操作"></a>自定义属性操作</h4><blockquote><p>自定义属性目的：是为了保存并使用数据。有些数据可以保存到页面中而不用保存到数据库中。<br>|方法|作用|<br>|–|–|<br>|getAttribute(‘属性’)|获取自定义属性|<br>|setAttribute(‘属性’)|设置自定义属性|<br>|removeAttribute(‘属性’)|移除自定义属性|</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//自定义属性为了和H5的自定义属性相区分 自定义属性一般以‘date-’开头</span><span class="token operator">&lt;</span>div <span class="token keyword">class</span> <span class="token operator">=</span> <span class="token string">'nav'</span> date<span class="token operator">-</span>index <span class="token operator">=</span> <span class="token string">'1'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">//element.getAttribute('属性') 获取自定义属性 主要获取自定义属性</span>div<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'date-index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//index是程序员自己设置的属性</span><span class="token comment" spellcheck="true">//element.setAttribute('属性',值)  可以设置属性值 主要针对于自定义属性</span>div<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'date-index'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//针对以自定义属性</span>div<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">,</span><span class="token string">'footer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以设置元素的类 class特殊 写的就是class 不是className</span><span class="token comment" spellcheck="true">//element.removeAttribute('index');  移除自定义属性</span>div<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">'date-index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="H5自定义属性"><a href="#H5自定义属性" class="headerlink" title="H5自定义属性"></a>H5自定义属性</h4><pre class="line-numbers language-js"><code class="language-js">div<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'date-index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//element.dateset.属性/element.dateset['属性']  H5新增获取自定义属性的方法</span>div<span class="token punctuation">.</span>divdateset<span class="token punctuation">.</span>index<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取自定义属性index</span>div<span class="token punctuation">.</span>divdateset<span class="token punctuation">[</span><span class="token string">'index'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果自定义属性的名字有多个-链接 如date-index-name 只能采用如下的方法</span>div<span class="token punctuation">.</span>divdateset<span class="token punctuation">.</span>indexName<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//采用驼峰命名法调用</span>div<span class="token punctuation">.</span>divdateset<span class="token punctuation">[</span><span class="token string">'indexName'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS（六）</title>
      <link href="/2022/11/08/CSS%EF%BC%88%E5%85%AD%EF%BC%89/"/>
      <url>/2022/11/08/CSS%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-HTML5X新特性、CSS3新特性"><a href="#简介-HTML5X新特性、CSS3新特性" class="headerlink" title="简介 HTML5X新特性、CSS3新特性"></a>简介 HTML5X新特性、CSS3新特性</h1><span id="more"></span><h2 id="HTML5的新特性"><a href="#HTML5的新特性" class="headerlink" title="HTML5的新特性"></a>HTML5的新特性</h2><blockquote><p>HTML5 的新增特性主要是针对于以前的不足，增加了一些新的标签、新的表单和新的表单属性等。<br>这些新特性都有兼容性问题，基本是 <strong>IE9+ 以上版本的浏览器</strong>才支持，如果不考虑兼容性问题，可以大量使用这些新特性。</p></blockquote><h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3><p>发展到了HTML5后，新增了一些语义化标签，这样的话更加有利于浏览器的搜索引擎搜索，也方便了网站的seo（Search Engine Optimization，搜索引擎优化），下面就是新增的一些语义化标签</p><ul><li><code>&lt;header&gt;</code> 头部标签</li><li><code>&lt;nav&gt;</code> 导航标签</li><li><code>&lt;article&gt;</code> 内容标签</li><li><code>&lt;section&gt;</code> 定义文档某个区域</li><li><code>&lt;aside&gt;</code> 侧边栏标签</li><li><code>&lt;footer&gt;</code> 尾部标签</li></ul><img src = "/images/语义化标签.png" width =  "600"/><p><strong>注意：</strong></p><ol><li>这种语义化标准主要是针对搜索引擎的</li><li>这些新标签页面中可以使用多次</li><li>在 IE9 中，需要把这些元素转换为块级元素</li><li>移动端更喜欢使用这些标签</li></ol><h3 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h3><blockquote><p>多媒体标签分为 音频 <strong>audio</strong> 和视频 <strong>video</strong> 两个标签 使用它们，我们可以很方便的在页面中嵌入音频和视频，而不再去使用落后的flash和其他浏览器插件了。<br>因为多媒体标签的 属性、方法、事件比较多，因此我们需要什么功能的时候，就需要去查找相关的文档进行学习使用。</p></blockquote><h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><pre class="line-numbers language-html"><code class="language-html"> &lt;video src="media/mi.mp4" controls="controls" muted = "muted" loop="loop"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>video的支持情况<br>当前 <strong>video</strong> 元素支持三种视频格式： 尽量使用 <strong>mp4格式</strong><br>不同浏览器支持 <strong>video</strong> 视频格式的情况：<table><thead><tr><th>浏览器</th><th>MP4</th><th>WebM</th><th>Ogg</th></tr></thead><tbody><tr><td>Intemet Explorer</td><td>YES</td><td>NO</td><td>NO</td></tr><tr><td>Chrome</td><td>YES</td><td>YES</td><td>YES</td></tr><tr><td>Firefox</td><td>YES(从Firefox31开始，Linux从Firefox30开始)</td><td>YES</td><td>YES</td></tr><tr><td>Safari</td><td>YES</td><td>NO</td><td>NO</td></tr><tr><td>Opera</td><td>YES(从Opera25开始)</td><td>YES</td><td>YES</td></tr></tbody></table></li></ul><p><strong>上面这种写法，浏览器会匹配video标签中的source，如果支持就播放，如果不支持往下匹配，直到没有匹配的格式，就提示文本</strong></p><ul><li>兼容性<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span>  <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>controls<span class="token punctuation">"</span></span>  <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>move.ogg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/ogg<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>move.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  您的浏览器暂不支持 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span><span class="token punctuation">></span></span> 标签播放视频<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>video的属性<table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>src</td><td>url</td><td>要播放的视频的 URL</td></tr><tr><td>autoplay</td><td>autoplay</td><td>如果出现该属性，则视频在就绪后马上播放,chrome禁用该属性，添加muted，才可使用</td></tr><tr><td>controls</td><td>controls</td><td>如果出现该属性，则向用户显示控件，比如播放按钮</td></tr><tr><td>loop</td><td>loop</td><td>如果出现该属性，则当媒介文件完成播放后再次开始播放</td></tr><tr><td>muted</td><td>muted</td><td>规定视频的音频输出应该被静音</td></tr><tr><td>poster</td><td>URL</td><td>规定视频下载时显示的图像，或者在用户点击播放按钮前显示的图像</td></tr><tr><td>preload</td><td>preload</td><td>如果出现该属性，则视频在页面加载时进行加载，并预备播放,如果使用 “autoplay”，则忽略该属性</td></tr><tr><td>width</td><td>pixels</td><td>设置视频播放器的宽度</td></tr><tr><td>height</td><td>pixels</td><td>设置视频播放器的高度</td></tr></tbody></table></li></ul><h4 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h4><p><strong>使用语法：</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>media/music.mp3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>audio的支持情况<br>当前 <strong>audio</strong> 元素支持三种视频格式： 尽量使用 <strong>mp3格式</strong><br>不同浏览器支持 <strong>audio</strong> 视频格式的情况：</p><table><thead><tr><th>浏览器</th><th>MP3</th><th>Wav</th><th>Ogg</th></tr></thead><tbody><tr><td>Intemet Explorer</td><td>YES</td><td>NO</td><td>NO</td></tr><tr><td>Chrome</td><td>YES</td><td>YES</td><td>YES</td></tr><tr><td>Firefox</td><td>YES</td><td>YES</td><td>YES</td></tr><tr><td>Safari</td><td>YES</td><td>YES</td><td>NO</td></tr><tr><td>Opera</td><td>YES</td><td>YES</td><td>YES</td></tr></tbody></table></li><li><p>兼容性</p><pre class="line-numbers language-html"><code class="language-html">&lt; audio controls="controls"  >  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>happy.mp3<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>audio/mpeg<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>happy.ogg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>audio/ogg<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  您的浏览器暂不支持 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span><span class="token punctuation">></span></span> 标签。&lt;/ audio><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>上面这种写法，浏览器会匹配audio标签中的source，如果支持就播放，如果不支持往下匹配，直到没有匹配的格式，就提示文本</strong></p><ul><li>audio属性<table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>src</td><td>url</td><td>要播放的音频的 URL</td></tr><tr><td>autoplay</td><td>autoplay</td><td>如果出现该属性，则音频在就绪后马上播放,chrome禁用了该属性</td></tr><tr><td>controls</td><td>controls</td><td>如果出现该属性，则向用户显示控件，比如播放按钮</td></tr><tr><td>loop</td><td>loop</td><td>如果出现该属性，则每当音频结束时重新开始播放</td></tr><tr><td>muted</td><td>muted</td><td>规定视频输出应该被静音</td></tr><tr><td>preload</td><td>preload</td><td>如果出现该属性，则音频在页面加载时进行加载，并预备播放,如果使用 “autoplay”，则忽略该属性。</td></tr></tbody></table></li></ul><h3 id="新增的表单元素-（★★）"><a href="#新增的表单元素-（★★）" class="headerlink" title="新增的表单元素 （★★）"></a>新增的表单元素 （★★）</h3><p>在H5中，帮我们新增加了很多类型的表单</p><ul><li>案例<pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 我们验证的时候必须添加form表单域 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--type设置了输入的格式--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>邮箱: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>网址: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>日期: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>时间: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>time<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>数量: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>手机号码: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tel<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>搜索: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>颜色: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 当我们点击提交按钮就可以验证表单了 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>新增加的输入类型<img src = "/images/新增input表单.png" width= "700" /></li></ul><h3 id="新增加的表单属性"><a href="#新增加的表单属性" class="headerlink" title="新增加的表单属性"></a>新增加的表单属性</h3><table><thead><tr><th>属性</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>required</td><td>required</td><td>表明该元素是必填项，不能不填</td></tr><tr><td>placeholder</td><td>提示文本</td><td>在用户输入时进行提示</td></tr><tr><td>autofocus</td><td>autofocus</td><td>在打开页面时使元素自动获取焦点</td></tr><tr><td>autocomplete</td><td>off/on</td><td>使form元素或者input元素拥有自动完成功能，即记录户之前输入的值，关闭为off，默认为on</td></tr><tr><td>mutiple</td><td>mutiple</td><td>可以多选文件提交</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><pre class="line-numbers language-css"><code class="language-css">   <span class="token selector">input<span class="token pseudo-element">::placeholder</span> </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*改变表单提示的属性*/</span>       <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="CSS3的新特性"><a href="#CSS3的新特性" class="headerlink" title="CSS3的新特性"></a>CSS3的新特性</h2><blockquote><p>新增的CSS3特性有兼容性问题，ie9+才支持,移动端支持优于 PC 端 </p></blockquote><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p>属性选择器，按照字面意思，都是根据标签中的属性来选择元素</p><p><img src="/images/%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8.png"></p><p><strong>示例代码：</strong></p><pre class="line-numbers language-css"><code class="language-css"> <span class="token comment" spellcheck="true">/* 只选择 type =text 文本框的input 选取出来 */</span><span class="token selector">input<span class="token attribute">[type=text]</span> </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*input和[之间没有空格*/</span>    <span class="token property">color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 选择首先是div 然后 具有class属性 并且属性值 必须是 icon开头的这些元素 */</span><span class="token selector">div<span class="token attribute">[class^=icon]</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 选择首先是section 然后 具有class属性 并且属性值 必须是 data结尾的这些元素 */</span><span class="token selector">section<span class="token attribute">[class$=data]</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 选择首先是section 然后 具有class属性 并且属性值 含有 data 的这些元素 */</span><span class="token selector">section<span class="token attribute">[class*=da]</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>属性选择器，按照字面意思，都是根据标签中的属性来选择元素</li><li>属性选择器可以根据元素特定属性的来选择元素。 这样就可以不用借助于类或者id选择器</li><li>属性选择器也可以选择出来自定义的属性</li><li><strong>注意：</strong>类选择器、属性选择器、伪类选择器，权重为 10。</li></ul><h3 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h3><p>结构伪类选择器主要根据文档结构来选择器元素， 常用于根据父级选择器里面的子元素<br><img src="images/%E7%BB%93%E6%9E%84%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8-01.png"></p><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token comment" spellcheck="true">/*选择第一个li*/</span>    <span class="token selector">ul li<span class="token pseudo-class">:first-child</span></span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*选择最后一个li*/</span>     <span class="token selector">ul li<span class="token pseudo-class">:last-child</span></span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*选择第二个li*/</span>    <span class="token selector">ul li<span class="token pseudo-class">:nth-child(2)</span> </span><span class="token punctuation">{</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>       <span class="token selector">ul li<span class="token pseudo-class">:nth-child(2)</span></span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* 字体变成红色 */</span>        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">ul li<span class="token pseudo-class">:nth-of-type(2)</span></span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* 背景变成绿色 */</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>E:nth-child(n)（★★★）</strong></p><p>  匹配到父元素的第n个元素</p><ul><li>匹配到父元素的第2个子元素  </li></ul><p>  <code>ul li:nth-child(2)&#123;&#125;</code></p><ul><li>匹配到父元素的序号为奇数的子元素</li></ul><p>  <code>ul li:nth-child(odd)&#123;&#125;</code>    <strong>odd</strong> 是关键字  奇数的意思（3个字母 ）</p><ul><li>匹配到父元素的序号为偶数的子元素</li></ul><p>  <code>ul li:nth-child(even)&#123;&#125;</code>   <strong>even</strong>（4个字母 ）</p><ul><li><strong>匹配到父元素的前3个子元素</strong><br><code>ul li:nth-child(-n+3)&#123;&#125;</code>    这里面必须是<strong>n</strong><br>nth-child(n) 从0开始 每次加1 往后面计算  这里面必须是n 不能是其他的字母 选择了所有的孩子</li></ul></li><li><p><strong>nth-of-type（n）和nth-child（n）用法大致相同，但子元素不是相同的标签会有不同点</strong><br><img src="/images/nth-child%E4%B8%8Enth-of-type%E5%8C%BA%E5%88%AB.png"></p><p> 也就是说：</p><ul><li><code>E:nth-child(n)</code>     匹配父元素的第n个子元素E，也就是说，nth-child 对父元素里面所有孩子排序选择（序号是固定的）  先找到第n个孩子，然后看看是否和E匹配</li><li><code>E:nth-of-type(n)</code> 匹配同类型中的第n个同级兄弟元素E，也就是说，对父元素里面指定子元素进行排序选择。 先去匹配E ，然后再根据E 找第n个孩子</li></ul></li></ul><h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><blockquote><p>伪元素选择器可以帮助我们利用CSS创建新标签元素，而不需要HTML标签，从而简化HTML结构</p></blockquote><p>|选择符|简介|<br>|:before|在元素内部前面插入内容|<br>|:after|在元素内部后面插入内容|</p><pre class="line-numbers language-css"><code class="language-css">  <span class="token selector">div </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* div::before 权重是2 */</span>    <span class="token selector">div<span class="token pseudo-element">::before</span> </span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 这个content是必须要写的 */</span>        <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'我'</span><span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">40</span>px<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">div<span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>        <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'佩奇'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ul><li>before 和 after 创建一个元素，但是属于行内元素</li><li>可以和一般元素一样设属性值</li><li>新创建的这个元素在文档树中是找不到的，所以我们称为伪元素</li><li>语法：  element::before {}   </li><li>before 和 after 必须有 content 属性 </li><li>before 在父元素内容的前面创建元素，after 在父元素内容的后面插入元素<br>伪元素选择器和标签选择器一样，权重为 1</li></ul><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><blockquote><p>CSS3 中可以通过 box-sizing 来指定盒模型，有2个值：即可指定为 content-box、border-box，这样我们计算盒子大小的方式就发生了改变</p></blockquote><p>可以分成两种情况：</p><ul><li>box-sizing: content-box  盒子大小为 width + padding + border  （以前默认的）</li><li>box-sizing: border-box  盒子大小为 width<br>如果盒子模型我们改为了box-sizing: border-box  ， 那padding和border就不会撑大盒子了（前提padding和border不会超过width宽度）</li></ul><h3 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h3><h4 id="图片模糊"><a href="#图片模糊" class="headerlink" title="图片模糊"></a>图片模糊</h4><p>filter CSS属性将模糊或颜色偏移等图形效果应用于元素</p><pre class="line-numbers language-css"><code class="language-css"> <span class="token comment" spellcheck="true">/*filter:   函数()*/</span> <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span><span class="token number">5</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*blur模糊处理  数值越大越模糊*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="计算盒子宽度-–-calc-函数"><a href="#计算盒子宽度-–-calc-函数" class="headerlink" title="计算盒子宽度 – calc 函数"></a>计算盒子宽度 – calc 函数</h4><blockquote><p>calc() 此CSS函数让你在声明CSS属性值时执行一些计算</p></blockquote><pre class="line-numbers language-css"><code class="language-css"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100%</span> - <span class="token number">80</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*表示子元素比父元素短80px*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>括号里面可以使用 + - *  / 来进行计算</p><h4 id="CSS3-过渡（★★★）"><a href="#CSS3-过渡（★★★）" class="headerlink" title="CSS3 过渡（★★★）"></a>CSS3 过渡（★★★）</h4><blockquote><p>过渡（transition)是CSS3中具有颠覆性的特征之一，我们可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。</p></blockquote><p><strong>过渡动画：</strong> 是从一个状态 渐渐的过渡到另外一个状态<br>可以让我们页面更好看，更动感十足，虽然 低版本浏览器不支持（ie9以下版本） 但是不会影响页面布局,我们现在经常和 <strong>:hover</strong> 一起 搭配使用。</p><pre class="line-numbers language-css"><code class="language-css">   <span class="token comment" spellcheck="true">/*transition: 要过渡的属性  花费时间  运动曲线  何时开始;*/</span>  <span class="token selector">div </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> rebeccapurple<span class="token punctuation">;</span>        <span class="token property">transition</span><span class="token punctuation">:</span> width <span class="token number">3</span>s ,height <span class="token number">6</span>s<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*不同属性‘，’隔开*/</span>      <span class="token punctuation">}</span>      <span class="token selector">div<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">900</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>属性 ： 想要变化的 css 属性， 宽度高度 背景颜色 内外边距都可以 。如果想要所有的属性都变化过渡， 写一个all 就可以</li><li>花费时间： 单位是 秒（必须写单位） 比如 0.5s </li><li>运动曲线： 默认是 ease （可以省略）</li><li>何时开始：单位是 秒（必须写单位）可以设置延迟触发时间  默认是 0s  （可以省略）</li><li><strong>后面两个属性可以省略</strong></li><li><strong>记住过渡的使用口诀： 谁做过渡给谁加</strong></li></ul><h3 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h3><blockquote><p><strong>转换</strong>是CSS中具有颠覆性的的特征之一，可以实现元素的唯一，旋转，缩放等效果</p></blockquote><h4 id="2D转换之移动-translate"><a href="#2D转换之移动-translate" class="headerlink" title="2D转换之移动 translate"></a>2D转换之移动 translate</h4><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*transform: translate(x,y); 或者分开写*/</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">100</span>px,<span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*transform: translateX(n);*/</span><span class="token comment" spellcheck="true">/*只移动X*/</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*transform: translateY(n);*/</span><span class="token comment" spellcheck="true">/*只移动Y*/</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>重点</strong></p><ul><li>定义 2D 转换中的移动，沿着 X 和 Y 轴移动元素</li><li>translate最大的优点：不会影响到其他元素的位置</li><li>translate中的百分比单位是相对于自身元素的 translate:(50%,50%);</li><li>对行内标签没有效果</li></ul><h4 id="2D转换之旋转-rotate"><a href="#2D转换之旋转-rotate" class="headerlink" title="2D转换之旋转 rotate"></a>2D转换之旋转 rotate</h4><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*transform:rotate(度数)*/</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>重点</strong></p><ul><li>rotate里面跟度数， 单位是 deg 比如 rotate(45deg)</li><li>角度为正时，顺时针，负时，为逆时针</li><li>默认旋转的中心点是元素的中心点</li></ul><h4 id="2D转换中心点-transform-origin"><a href="#2D转换中心点-transform-origin" class="headerlink" title="2D转换中心点 transform-origin"></a>2D转换中心点 transform-origin</h4><pre class="line-numbers language-css"><code class="language-css"><span class="token property">transform-origin</span><span class="token punctuation">:</span> x y<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*方位名词*/</span><span class="token property">transform-origin</span><span class="token punctuation">:</span> left bottom<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*任意位置*/</span><span class="token property">transform-origin</span><span class="token punctuation">:</span> <span class="token number">50</span>px <span class="token number">50</span>px<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>重点</strong></p><ul><li>注意后面的参数 x 和 y 用空格隔开</li><li>x y 默认转换的中心点是元素的中心点 (50% 50%)</li><li>还可以给x y 设置 像素 或者 方位名词 （top bottom left right center）</li></ul><h4 id="2D转换之缩放scale"><a href="#2D转换之缩放scale" class="headerlink" title="2D转换之缩放scale"></a>2D转换之缩放scale</h4><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*x y分别表示width height放大的倍数*/</span><span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">scale</span><span class="token punctuation">(</span>x,y<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意</strong></p><ul><li>注意其中的x和y用逗号分隔</li><li>transform:scale(1,1) ：宽和高都放大一倍，相对于没有放大</li><li>transform:scale(2,2) ：宽和高都放大了2倍</li><li>transform:scale(2) ：只写一个参数，第二个参数则和第一个参数一样，相当于 scale(2,2)</li><li>transform:scale(0.5,0.5)：缩小</li><li>sacle缩放最大的优势：可以设置转换中心点缩放，默认以中心点缩放的，而且不影响其他盒子</li></ul><h4 id="2D转换综合写法"><a href="#2D转换综合写法" class="headerlink" title="2D转换综合写法"></a>2D转换综合写法</h4><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">div<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">400</span>px,<span class="token number">400</span>px<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">360</span>deg<span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">1.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><ol><li>同时使用多个转换，其格式为：transform: translate() rotate() scale() …等，</li><li>其顺序会影转换的效果。（先旋转会改变坐标轴方向）</li><li>当我们同时有位移和其他属性的时候，记得要将位移放到最前</li></ol><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><blockquote><p>动画（animation）是CSS3中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常<br>用来实现复杂的动画效果。相比较过渡，动画可以实现更多变化，更多控制，连续自动播放等效果。</p></blockquote><h4 id="动画的基本使用"><a href="#动画的基本使用" class="headerlink" title="动画的基本使用"></a>动画的基本使用</h4><ul><li> 动画的基本使用</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> 动画名称</span> <span class="token punctuation">{</span>  <span class="token selector">0%</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token selector">100%</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*例如*/</span><span class="token atrule"><span class="token rule">@keyframes</span> move</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*开始状态*/</span>  <span class="token selector">0% </span><span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">0</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*结束状态*/</span>  <span class="token selector">100% </span><span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">1000</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>动画序列</strong></p><ul><li>0% 是动画的开始，100% 是动画的完成。这样的规则就是动画序列。</li><li>在 @keyframes 中规定某项 CSS 样式，就能创建由当前样式逐渐改为新样式的动画效果。</li><li>动画是使元素从一种样式逐渐变化为另一种样式的效果。您可以改变任意多的样式任意多的次数。</li><li>请用百分比来规定变化发生的时间，或用关键词 “from” 和 “to”，等同于 0% 和 100%。</li></ul><img src = "/images/animation.png" width="400" /><ul><li> 元素使用动画</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 调用动画 */</span>  <span class="token property">animation-name</span><span class="token punctuation">:</span> 动画名称<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 持续时间 */</span>  <span class="token property">animation-duration</span><span class="token punctuation">:</span> 持续时间<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="动画常用的属性"><a href="#动画常用的属性" class="headerlink" title="动画常用的属性"></a>动画常用的属性</h4><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>@keyframes</td><td>规定动画。</td></tr><tr><td>animation</td><td>所有动画属性的简写属性，除了animation-play-state属性。</td></tr><tr><td>animation-name</td><td>规定@keyframes动画的名称。（必须的）</td></tr><tr><td>animation-duration</td><td>规定动画完成一个周期所花费的秒或毫秒，默认是0。（必须的）</td></tr><tr><td>animation-timing-function</td><td>规定动画的速度曲线，默认是“ease”。</td></tr><tr><td>animation-delay</td><td>规定动画何时开始，默认是0。</td></tr><tr><td>animation-iteration-count</td><td>规定动画被播放的次数，默认是1，还有infinite(无限)</td></tr><tr><td>animation-direction</td><td>规定动画是否在下一周期逆向播放，默认是“normal“,alternate逆播放</td></tr><tr><td>animation-play-state</td><td>规定动画是否正在运行或暂停。默认是”running”,还有”paused”。</td></tr><tr><td>animation-fill-mode</td><td>规定动画结束后状态，保持结束（forwards）  回到起始（backwards）</td></tr></tbody></table><p><strong>示例</strong></p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*调用动画*/</span>  <span class="token property">animation-name</span><span class="token punctuation">:</span> move<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*持续时间*/</span>  <span class="token property">animation-duration</span><span class="token punctuation">:</span> <span class="token number">6</span>s<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*动画匀速*/</span>  <span class="token property">animation-timing-function</span><span class="token punctuation">:</span> ease<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*延迟时间*/</span>  <span class="token property">animation-delay</span><span class="token punctuation">:</span> <span class="token number">1</span>s<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*播放无限次*/</span>  <span class="token property">animation-iteration-count</span><span class="token punctuation">:</span> infinite<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*下一次逆向播放*/</span>  <span class="token property">animation-direction</span><span class="token punctuation">:</span> alternate<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*动画结束停到终点*/</span>  <span class="token property">animation-fill-mode</span><span class="token punctuation">:</span> forwards<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token property">animation-play-state</span><span class="token punctuation">:</span> paused<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*鼠标经过动画停止*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>nimation-timing-function规定动画的速度曲线<table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>linear</td><td>动画从头到尾的速度是相同的。匀速</td></tr><tr><td>ease</td><td>默认。动画以低速开始，然后加快，在结束前变慢。</td></tr><tr><td>ease-in</td><td>动画以低速开始。</td></tr><tr><td>ease-out</td><td>动画以低速结束。</td></tr><tr><td>ease-in-out</td><td>动画以低速开始和结束。</td></tr><tr><td>steps()</td><td>指定了时间函数中的间隔数量（步长）</td></tr></tbody></table><h4 id="动画简写属性"><a href="#动画简写属性" class="headerlink" title="动画简写属性"></a>动画简写属性</h4></li></ul><blockquote><p>animation：动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 动画起始或者结束的状态;</p></blockquote><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*animation: myfirst 5s linear 2s infinite alternate;*/</span><span class="token property">animation</span><span class="token punctuation">:</span> pulse <span class="token number">1.2</span>s linear <span class="token number">2</span>s infinite alternate forwards<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3D转换"><a href="#3D转换" class="headerlink" title="3D转换"></a>3D转换</h3><h4 id="3D转换之移动-translate3d"><a href="#3D转换之移动-translate3d" class="headerlink" title="3D转换之移动 translate3d"></a>3D转换之移动 translate3d</h4><blockquote><p>3D移动在2D移动的基础上多加了一个可以移动的方向，就是z轴方向。</p></blockquote><ul><li>translform:translateX(100px)：仅仅是在x轴上移动</li><li>translform:translateY(100px)：仅仅是在Y轴上移动</li><li>translform:translateZ(100px)：仅仅是在Z轴上移动（注意：translateZ一般用px单位）</li><li>transform:translate3d(x,y,z)：其中 x、y、z 分别指要移动的轴的方向的距离 因为z轴是垂直屏幕，由里指向外面，所以默认是看不到元素在z轴的方向上移动</li></ul><h4 id="3D转换之透视-perspective"><a href="#3D转换之透视-perspective" class="headerlink" title="3D转换之透视 perspective"></a>3D转换之透视 perspective</h4><blockquote><p>在2D平面产生近大远小视觉立体，但是只是效果二维的</p></blockquote><ul><li>如果想要在网页产生3D效果需要透视（理解成3D物体投影在2D平面内）。</li><li>模拟人类的视觉位置，可认为安排一只眼睛去看 </li><li>透视我们也称为视距：视距就是人的眼睛到屏幕的距离</li><li>距离视觉点越近的在电脑平面成像越大，越远成像越小 </li><li>透视的单位是像素<br><font color="red"> <strong>透视写在被观察元素的父盒子上面的</strong></font><br>d：就是视距，视距就是一个距离人的眼睛到屏幕的距离。<br>z：就是 z轴，物体距离屏幕的距离，z轴越大（正值） 我们看到的物体就越大。</li></ul><h4 id="3D转换之旋转-rotate3d"><a href="#3D转换之旋转-rotate3d" class="headerlink" title="3D转换之旋转 rotate3d"></a>3D转换之旋转 rotate3d</h4><blockquote><p>3D旋转指可以让元素在三维平面内沿着 x轴，y轴，z轴或者自定义轴进行旋转。</p></blockquote><p>语法:</p><ul><li>transform:rotateX(45deg)：沿着x轴正方向旋转 45度</li><li>transform:rotateY(45deg) ：沿着y轴正方向旋转 45deg</li><li>transform:rotateZ(45deg) ：沿着Z轴正方向旋转 45deg</li><li>transform:rotate3d(x,y,z,deg)： 沿着自定义轴旋转 deg为角度（了解即可）</li></ul><h4 id="3D转换之呈现-transfrom-style"><a href="#3D转换之呈现-transfrom-style" class="headerlink" title="3D转换之呈现 transfrom-style"></a>3D转换之呈现 transfrom-style</h4><blockquote><p>3D呈现实现3D空间，达到3D效果</p></blockquote><ol><li>控制子元素是否开启三维立体环境。</li><li>transform-style: flat 子元素不开启3d立体空间 默认的</li><li>transform-style: preserve-3d; 子元素开启立体空间</li><li>代码写给父级，但是影响的是子盒子</li><li>这个属性很重要，后面必用</li></ol>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS（五）</title>
      <link href="/2022/11/07/CSS%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2022/11/07/CSS%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-界面样式、对齐属性、省略、布局技巧"><a href="#简介-界面样式、对齐属性、省略、布局技巧" class="headerlink" title="简介 界面样式、对齐属性、省略、布局技巧"></a>简介 界面样式、对齐属性、省略、布局技巧</h1><span id="more"></span><h2 id="CSS用户界面样式"><a href="#CSS用户界面样式" class="headerlink" title="CSS用户界面样式"></a>CSS用户界面样式</h2><h3 id="鼠标样式"><a href="#鼠标样式" class="headerlink" title="鼠标样式"></a>鼠标样式</h3><pre class="line-numbers language-css"><code class="language-css"> <span class="token selector">li </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*选择要改变的标签*/</span>     <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>  <span class="token punctuation">}</span>&lt;span style = <span class="token string">"cursor: text;"</span> >文本&lt;/span><span class="token comment" spellcheck="true">/*也可直接在标签里改*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>default</td><td>默认</td></tr><tr><td>pointer</td><td>小手</td></tr><tr><td>move</td><td>移动</td></tr><tr><td>text</td><td>文本</td></tr><tr><td>not-allowed</td><td>禁止</td></tr><tr><td>url()</td><td>自定义</td></tr></tbody></table><h3 id="轮廓线-outline"><a href="#轮廓线-outline" class="headerlink" title="轮廓线 outline"></a>轮廓线 outline</h3><p>给表单添加 outline: 0;   或者  outline: none; 样式之后，就可以去掉默认的蓝色边框。</p><pre class="line-numbers language-css"><code class="language-css"> <span class="token selector">input </span><span class="token punctuation">{</span>     <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*取消点击后的蓝色边框*/</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="防止拖拽文本域-resize"><a href="#防止拖拽文本域-resize" class="headerlink" title="防止拖拽文本域 resize"></a>防止拖拽文本域 resize</h3><p> 实际开发中，我们文本域右下角是不可以拖拽的。</p><pre class="line-numbers language-css"><code class="language-css"> <span class="token selector">textarea</span><span class="token punctuation">{</span>      <span class="token property">resize</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="vertical-align-属性应用"><a href="#vertical-align-属性应用" class="headerlink" title="vertical-align 属性应用"></a>vertical-align 属性应用</h2><blockquote><p>CSS 的 <strong>vertical-align</strong> 属性使用场景： 经常用于设置图片或者表单(行内块元素）和文字垂直对齐，用于设置一个元素的<strong>垂直对齐方式</strong>，但是它只针对于行内元素或者行内块元素有效。</p></blockquote><p>语法：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">vertical-align</span> <span class="token punctuation">:</span> baseline | top | middle | bottom <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>baseline</td><td>默认，元素放置在父元素的基线上</td></tr><tr><td>top</td><td>把元素顶端与行内最高元素的顶端对齐</td></tr><tr><td>middle</td><td>把元素放置在父元素的中间</td></tr><tr><td>botto</td><td>把元素底端与行内最高元素的底端对齐</td></tr></tbody></table><img src = "/images/1571522040645.png" width = "600" /><h3 id="图片、表单和文字对齐"><a href="#图片、表单和文字对齐" class="headerlink" title="图片、表单和文字对齐"></a>图片、表单和文字对齐</h3><p>图片、表单都属于行内块元素，默认的 vertical-align 是基线对齐。<br>此时可以给图片、表单这些行内块元素的 <strong>vertical-align 属性设置为 middle</strong> 就可以让文字和图片垂直居中对齐了。</p><h3 id="解决图片底部默认空白缝隙问题"><a href="#解决图片底部默认空白缝隙问题" class="headerlink" title="解决图片底部默认空白缝隙问题"></a>解决图片底部默认空白缝隙问题</h3><p>bug：图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐。</p><p>主要解决方法有两种：</p><p>1.<strong>给图片</strong>添加 <strong>vertical-align:middle | top| bottom</strong> 等。 （提倡使用的）<br>2.把图片转换为块级元素  <strong>display: block</strong>; </p><h2 id="溢出的文字省略号显示"><a href="#溢出的文字省略号显示" class="headerlink" title="溢出的文字省略号显示"></a>溢出的文字省略号显示</h2><h3 id="单行文本溢出显示省略号"><a href="#单行文本溢出显示省略号" class="headerlink" title="单行文本溢出显示省略号"></a>单行文本溢出显示省略号</h3><p>单行文本溢出显示省略号–必须满足三个条件：</p><pre class="line-numbers language-css"><code class="language-css">  <span class="token comment" spellcheck="true">/*1. 先强制一行内显示文本*/</span>   <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>  （ 默认 normal 自动换行）  <span class="token comment" spellcheck="true">/*2. 超出的部分隐藏*/</span>   <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*3. 文字用省略号替代超出的部分*/</span>   <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多行文本溢出显示省略号（了解）"><a href="#多行文本溢出显示省略号（了解）" class="headerlink" title="多行文本溢出显示省略号（了解）"></a>多行文本溢出显示省略号（了解）</h3><p>多行文本溢出显示省略号，<strong>有较大兼容性问题</strong>，适合于webKit浏览器或移动端（移动端大部分是webkit内核）</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*1. 超出的部分隐藏 */</span><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*2. 文字用省略号替代超出的部分 */</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 3. 弹性伸缩盒子模型显示 */</span><span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 4. 限制在一个块元素显示的文本的行数 */</span><span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 5. 设置或检索伸缩盒对象的子元素的排列方式 */</span><span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>更推荐让后台人员来做这个效果，因为后台人员可以设置显示多少个字，操作更简单。</strong></p><h2 id="常见的布局技巧"><a href="#常见的布局技巧" class="headerlink" title="常见的布局技巧"></a>常见的布局技巧</h2><h3 id="网站标志"><a href="#网站标志" class="headerlink" title="网站标志"></a>网站标志</h3><h4 id="网站-favicon-图标（★★★）"><a href="#网站-favicon-图标（★★★）" class="headerlink" title="网站 favicon 图标（★★★）"></a>网站 favicon 图标（★★★）</h4><blockquote><p>favicon.ico 一般用于作为缩略的网站标志，它显示在浏览器的地址栏或者标签上。目前主要的浏览器都支持 favicon.ico 图标。</p></blockquote><ul><li>制作favicon图标</li></ul><ol><li>把图标切成 <code>png</code> 图片</li><li>把 <code>png</code> 图片转换为 <code>ico</code> 图标，这需要借助于第三方转换网站，例如比特虫：<a href="http://www.bitbug.net/">http://www.bitbug.net/</a></li></ol><ul><li>使用favicon图标</li></ul><p><strong>favicon图标放到网站根目录下</strong></p><ul><li>HTML页面引入favicon图标<br>在html 页面里面的 <code>&lt;head&gt; &lt;/head&gt;</code>元素之间引入代码<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>favicon.ico<span class="token punctuation">"</span></span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/x-icon<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="TDK三大标签SEO优化（★★）"><a href="#TDK三大标签SEO优化（★★）" class="headerlink" title="TDK三大标签SEO优化（★★）"></a>TDK三大标签SEO优化（★★）</h4><h5 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h5><blockquote><p><strong>SEO（Search Engine Optimization）</strong>汉译为搜索引擎优化，是一种利用搜索引擎的规则提高网站在有关搜索引擎内自然排名的方式。<br><strong>SEO</strong> 的目的是对网站进行深度的优化，从而帮助网站获取免费的流量，进而在搜索引擎上提升网站的排名，提高网站的知名度。</p></blockquote><p>页面必须有三个标签用来符合 SEO 优化</p><p><img src="/images/SEO%E4%BC%98%E5%8C%96.png"></p><h5 id="TDK"><a href="#TDK" class="headerlink" title="TDK"></a>TDK</h5><ul><li>T – Title（网站标题）</li></ul><p><strong>title</strong> 具有不可替代性，是我们内页的第一个重要标签，是搜索引擎了解网页的入口和对网页主题归属的最佳判断点。<br><strong>建议：</strong>网站名（产品名）- 网站的介绍  （尽量不要超过30个汉字）<br><strong>例如：</strong></p><ul><li><p>京东(JD.COM)-综合网购首选-正品低价、品质保障、配送及时、轻松购物！</p></li><li><p>小米商城 - 小米5s、红米Note 4、小米MIX、小米笔记本官方网站</p></li><li><p> D – description（网站描述）</p></li></ul><p>简要说明我们网站主要是做什么的。<br><strong>我们提倡</strong>，description 作为网站的总体业务和主题概括，多采用“我们是…”、“我们提供…”、“×××网作为…”、“电话：010…”之类语句。<br><strong>例如：</strong><br><code>&lt;meta name=&quot;description&quot; content=&quot;京东JD.COM-专业的综合网上购物商城,销售家电、数码通讯、电脑、家居百货、服装服饰、母婴、图书、食品等数万个品牌优质商品.便捷、诚信的服务，为您提供愉悦的网上购物体验!&quot; /&gt;</code></p><ul><li>K – keywords （关键字）</li></ul><p><strong>keywords 是页面关键词</strong>，是搜索引擎的关注点之一。<br>keywords 最好限制为 6～8 个关键词，关键词之间用英文逗号隔开，采用 关键词1,关键词2 的形式<br><strong>例如：</strong><br><code>&lt;meta name= &quot; keywords&quot; content=&quot;网上购物,网上商城,手机,笔记本,电脑,MP3,CD,VCD,DV,相机,数码,配件,手表,存储卡,京东&quot; /&gt;</code></p><p><strong>对于我们前端人员来说，我们只需要准备好这三个标签，具体里面的内容，有专门的 SEO 人员准备</strong></p><p><strong>示例代码</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>品优购商城-综合网购首选-正品低价、品质保障、配送及时、轻松购物！    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 网站说明 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span>        <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>品优购商城-专业的综合网上购物商城,销售家电、数码通讯、电脑、家居百货、服装服饰、母婴、图书、食品等数万个品牌优质商品.便捷、诚信的服务，为您提供愉悦的网上购物体验!<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 关键字 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>网上购物,网上商城,手机,笔记本,电脑,MP3,CD,VCD,DV,相机,数码,配件,手表,存储卡,京东<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>LOGO SEO优化<br>在正常开发过程中，<strong>logo的布局其实是有讲究的，需要进行 <code>logoSEO</code>的优化 （★★★）</strong></p></li><li><p><code>logo</code> 里面首先放一个 <code>h1</code> 标签，目的是为了提权，告诉搜索引擎，这个地方很重要</p></li><li><p><code>h1</code> 里面再放一个链接，可以返回首页的，把 <code>logo</code> 的背景图片给链接即可</p></li><li><p>为了搜索引擎收录我们，我们链接里面要放文字（网站名称），但是文字不要显示出来</p></li><li><p>方法1：<code>text-indent</code> 移到盒子外面（<code>text-indent: -9999px</code>) ，然后 <code>overflow:hidden</code> ，淘宝的做法</p></li><li><p>方法2：直接给 <code>font-size: 0;</code>  就看不到文字了，京东的做法</p></li><li><p>最后给链接一个 <code>title</code> 属性，这样鼠标放到 <code>logo</code> 上就可以看到提示文字了</p><p><strong>结构代码</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- logo模块 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.html<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>品优购商城<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>品优购商城<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="主体部分"><a href="#主体部分" class="headerlink" title="主体部分"></a>主体部分</h3><ul><li>margin负值应用</li></ul><img src = "/images/1571522683897.png" width = "600" />1.让每个盒子margin 往左侧移动 -1px 正好压住相邻盒子边框2.鼠标经过某个盒子的时候，提高当前盒子的层级即可（如果没有有定位，则加相对定位（保留位置），如果有定位，则加z-index）<ul><li>文字围绕浮动元素</li></ul><p><strong>布局示意图</strong><br><img src="/images/1571522761996.png"><br><strong>巧妙运用浮动元素不会压住文字的特性</strong></p><ul><li>行内块巧妙运用</li></ul><ol><li>把这些链接盒子转换为行内块， 之后给父级指定  text-align:center;</li><li>利用行内块元素中间有缝隙，并且给父级添加 text-align:center; 行内块元素会水平会居中</li></ol><ul><li>CSS三角强化<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.box1</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 把上边框宽度调大 */</span>        <span class="token comment" spellcheck="true">/* border-top: 100px solid transparent;        border-right: 50px solid skyblue; */</span>        <span class="token comment" spellcheck="true">/* 左边和下边的边框宽度设置为0 */</span>        <span class="token comment" spellcheck="true">/* border-bottom: 0 solid blue;        border-left: 0 solid green; */</span>        <span class="token comment" spellcheck="true">/* 1.只保留右边的边框有颜色 */</span>        <span class="token property">border-color</span><span class="token punctuation">:</span> transparent red transparent transparent<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 2. 样式都是solid */</span>        <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 3. 上边框宽度要大， 右边框 宽度稍小， 其余的边框该为 0 */</span>        <span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">50</span>px <span class="token number">0</span> <span class="token number">0</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CSS初始化"><a href="#CSS初始化" class="headerlink" title="CSS初始化"></a>CSS初始化</h3><blockquote><p>不同浏览器对有些标签的默认值是不同的，为了消除不同浏览器对HTML文本呈现的差异，照顾浏览器的兼容，我们需要对CSS 初始化<br>简单理解： CSS初始化是指重设浏览器的样式。 (也称为CSS reset）</p></blockquote></li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 把我们所有标签的内外边距清零 */</span><span class="token selector">* </span><span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* em 和 i 斜体的文字不倾斜 */</span><span class="token selector">em,i </span><span class="token punctuation">{</span>    <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 去掉li 的小圆点 */</span><span class="token selector">li </span><span class="token punctuation">{</span>    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">img </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* border 0 照顾低版本浏览器 如果 图片外面包含了链接会有边框的问题 */</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 取消图片底侧有空白缝隙的问题 */</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">button </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 当我们鼠标经过button 按钮的时候，鼠标变成小手 */</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#666</span><span class="token punctuation">;</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*鼠标经过链接，改变颜色*/</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#c81623</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">button,input </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* "\5B8B\4F53" 就是宋体的意思 这样浏览器兼容性比较好 */</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, <span class="token string">"\5B8B\4F53"</span>, sans-serif<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* CSS3 抗锯齿形 让文字显示的更加清晰 */</span>    <span class="token property">-webkit-font-smoothing</span><span class="token punctuation">:</span> antialiased<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">font</span><span class="token punctuation">:</span> <span class="token number">12</span>px/<span class="token number">1.5</span> Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, <span class="token string">"\5B8B\4F53"</span>, sans-serif<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#666</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.hide</span>,<span class="token class">.none</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 清除浮动 */</span><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"."</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span>    *<span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Unicode编码字体：</strong><br>把中文字体的名称用相应的Unicode编码来代替，这样就可以有效的避免浏览器解释CSS代码时候出现乱码的问题。<br>比如：<br>黑体 \9ED1\4F53<br>宋体 \5B8B\4F53<br>微软雅黑 \5FAE\8F6F\96C5\9ED1</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A*算法</title>
      <link href="/2022/11/07/A%E6%98%9F%E7%AE%97%E6%B3%95/"/>
      <url>/2022/11/07/A%E6%98%9F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-A-遍历"><a href="#简介-A-遍历" class="headerlink" title="简介 A*遍历"></a>简介 A*遍历</h1><span id="more"></span><ul><li>A*算法运用的是估价思想。</li></ul><p>查找过程：<br>1.在待遍历列表中（刚开始只有点A），我们在列表中查找一个估价（当前点到终点距离估价，后续会讲）最小的点（k），<br>2.对点k进行一次广度优先查找，也就是它移动一次到底的下一个坐标（右，右上，上，左上，左，左下，下，右下）不包含已经遍历过的点和不能到达的点，将能查找的点添加到队列中，并将点K从队列中移除。<br>3.重复1、2步骤直到到底B点，或者队列已经为空说明没有路径可以到达点B</p><ul><li><p>A<em>搜寻算法<br>A</em>搜寻算法，俗称A星算法，作为启发式搜索算法中的一种，这是一种在图形平面上，有多个节点的路径，求出最低通过成本的算法。常用于游戏中的NPC的移动计算，或线上游戏的BOT的移动计算上。该算法像Dijkstra算法一样，可以找到一条最短路径；也像BFS一样，进行启发式的搜索。<br>A<em>算法最为核心的部分，就在于它的一个估值函数的设计上：<br>f(n)=g(n)+h(n)<br>其中f(n)是每个可能试探点的估值，它有两部分组成：<br>一部分，为g(n)，它表示从起始搜索点到当前点的代价（通常用某结点在搜索树中的深度来表示）。<br>另一部分，即h(n)，它表示启发式搜索中最为重要的一部分，即当前结点到目标结点的估值，<br>h(n)设计的好坏，直接影响着具有此种启发式函数的启发式算法的是否能称为A</em>算法。<br>一种具有f(n)=g(n)+h(n)策略的启发式算法能成为A<em>算法的充分条件是：<br>1、搜索树上存在着从起始点到终了点的最优路径。<br>2、问题域是有限的。<br>3、所有结点的子结点的搜索代价值&gt;0。<br>4、h(n)=&lt;h</em>(n) （h*(n)为实际问题的代价值）。<br>当此四个条件都满足时，一个具有f(n)=g(n)+h(n)策略的启发式算法能成为A<em>算法，并一定能找到最优解。<br>对于一个搜索问题，显然，条件1,2,3都是很容易满足的，而条件4： h(n)&lt;=h</em>(n)是需要精心设计的，由于h*(n)显然是无法知道的，所以，一个满足条件4的启发策略h(n)就来的难能可贵了。<br>不过，对于图的最优路径搜索和八数码问题，有些相关策略h(n)不仅很好理解，而且已经在理论上证明是满足条件4的，从而为这个算法的推广起到了决定性的作用。<br>且h(n)距离h*(n)的呈度不能过大，否则h(n)就没有过强的区分能力，算法效率并不会很高。对一个好的h(n)的评价是：h(n)在h*(n)的下界之下，并且尽量接近h*(n)。  </p></li><li><p>A<em>搜寻算法的实现<br>先举一个小小的例子：即求V0-&gt;V5的路径，V0-&gt;V5的过程中，可以经由V1，V2，V3，V4各点达到目的点V5。下面的问题，即是求此起始顶点V0-&gt;途径任意顶点V1、V2、V3、V4-&gt;目标顶点V5的最短路径。<br>就是：一个队列，open 往close 插入元素。<br>我们可以看出：：A</em>算法最为核心的过程，就在每次选择下一个当前搜索点时，是从所有已探知的但未搜索过点中(可能是不同层，亦可不在同一条支路上)，选取f值最小的结点进行展开。<br>而所有“已探知的但未搜索过点”可以通过一个按f值升序的队列(即优先队列)进行排列。<br>这样，在整体的搜索过程中，只要按照类似广度优先的算法框架，从优先队列中弹出队首元素（f值），对其可能子结点计算g、h和f值，直到优先队列为空(无解)或找到终止点为止。<br>A<em>算法与广度、深度优先和Dijkstra 算法的联系就在于：当g(n)=0时，该算法类似于DFS，当h(n)=0时，该算法类似于BFS。且同时，如果h(n)为0，只需求出g(n)，即求出起点到任意顶点n的最短路径，则转化为单源最短路径问题，即Dijkstra算法。这一点，可以通过上面的A</em>搜索树的具体过程中将h(n)设为0或将g(n)设为0而得到。</p></li><li><p>A*算法流程<br>首先将起始结点S放入OPEN表，CLOSE表置空，算法开始时：<br>1、如果OPEN表不为空，从表头取一个结点n，如果为空算法失败。<br>2、n是目标解吗？是，找到一个解（继续寻找，或终止算法）。<br>3、将n的所有后继结点展开，就是从n可以直接关联的结点（子结点），如果不在CLOSE表中，就将它们放入OPEN表，并把S放入CLOSE表，同时计算每一个后继结点的估价值f(n)，将OPEN表按f(x)排序，最小的放在表头，重复算法，回到1。</p></li></ul><img src = "/images/A星.png" width ="600" /><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** A*算法寻路* closeList放有效路径* openList放走过的无用路径* 用曼哈顿距离判断向哪里走*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> startX<span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> startY<span class="token punctuation">;</span>closeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加起始点</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">==</span> endX <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> endY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断终止点</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> row <span class="token operator">*</span> column<span class="token punctuation">;</span>    <span class="token keyword">int</span> minIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化曼哈顿距离</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPath</span><span class="token punctuation">(</span>closeList<span class="token punctuation">,</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断四条路</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPath</span><span class="token punctuation">(</span>openList<span class="token punctuation">,</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>startX <span class="token operator">-</span> x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>startY <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>endX <span class="token operator">-</span> x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>endY <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPath</span><span class="token punctuation">(</span>closeList<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPath</span><span class="token punctuation">(</span>openList<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>startX <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>startY <span class="token operator">-</span> y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>endX <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>endY <span class="token operator">-</span> y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPath</span><span class="token punctuation">(</span>closeList<span class="token punctuation">,</span> x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPath</span><span class="token punctuation">(</span>openList<span class="token punctuation">,</span> x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>        f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>startX <span class="token operator">-</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>startY <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>endX <span class="token operator">-</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>endY <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPath</span><span class="token punctuation">(</span>closeList<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPath</span><span class="token punctuation">(</span>openList<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        f<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>startX <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>startY <span class="token operator">-</span> y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>endX <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>endY <span class="token operator">-</span> y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> f<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//找到周围最近的曼哈顿距离</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>min<span class="token operator">></span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                minIndex <span class="token operator">=</span> i <span class="token punctuation">;</span>                min <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">}</span>                <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minIndex <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断四周能不能走</span>        closeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不能走返回上一步</span>    <span class="token punctuation">}</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>minIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断那条路最近</span>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> x<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> y<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> x<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> y<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>返回上一步        closeList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>closeList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        openList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> closeList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>closeList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>column<span class="token punctuation">;</span>        y <span class="token operator">=</span> closeList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>closeList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>column<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断x，y是不是路  没有走过且不是墙才是路</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPath</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> arrayList<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>arrayList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rectangles<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>Color<span class="token punctuation">.</span>SANDYBROWN<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考：<a href = "https://blog.csdn.net/v_JULY_v/article/details/6093380" >一、A*搜索算法</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遍历</title>
      <link href="/2022/11/07/%E9%81%8D%E5%8E%86/"/>
      <url>/2022/11/07/%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-广度遍历和深度遍历"><a href="#简介-广度遍历和深度遍历" class="headerlink" title="简介 广度遍历和深度遍历"></a>简介 广度遍历和深度遍历</h1><span id="more"></span><ul><li>介绍</li></ul><p>1.广度优先遍历（BFS）：类似于树中的层次遍历，需要用队列来体现结点访问的次序关系。<br>2.深度优先遍历（DFS）：类似于树中的先序遍历，整体思想是：先输出当前结点，在根据一定的次序去递归查找孩子。<br><img src = "images/sample.gif" width="600" /></p><h3 id="广度遍历和最短路径"><a href="#广度遍历和最短路径" class="headerlink" title="广度遍历和最短路径"></a>广度遍历和最短路径</h3><p>广度优先遍历从某个顶点 v 出发，首先访问这个结点，并将其标记为已访问过，然后顺序访问结点v的所有未被访问的邻接点 {vi,..,vj} ，并将其标记为已访问过，然后将 {vi,…,vj} 中的每一个节点重复节点v的访问方法，直到所有结点都被访问完为止。</p><p>我们可以分为三个步骤：<br>（1）使用一个辅助队列 q，首先将顶点 v 入队，将其标记为已访问，然后循环检测队列是否为空。<br>（2）如果队列不为空，则取出队列第一个元素，并将与该元素相关联的所有未被访问的节点入队，将这些节点标记为已访问。<br>（3）如果队列为空，则说明已经按照广度优先遍历了所有的节点。<br>下图所示，右边蓝色表示从 0 开始遍历节点的顺序，下面是记录距离 0 的距离，<strong>可知广度优先遍历能求出无权图的最短路径</strong>。<br><img src="images/shortest-01.png" width="600" /><br>下面用代码展示如何用广度优先遍历方式完成遍历，并且查询到最短路径。我们在上一小节代码的基础上增加一全局变量 ord 数组，记录路径中节点的次序。ord[i] 表示 i 节点在路径中的次序。同时构造函数做出相应调整，在遍历相邻节点时 每访问一个未被访问的节点进行 ord[i] = ord[v] + 1记录距离。邻接表的广度优先遍历时间复杂度为 O(V+E)，邻接矩阵的时间复杂度为O(V^2)。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 广度遍历找路* x，y加下点的坐标* */</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">breadthTraversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//广度遍历队列  </span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用于存放广度遍历的节点</span><span class="token keyword">int</span> x <span class="token operator">=</span> startX<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始点</span><span class="token keyword">int</span> y <span class="token operator">=</span> startY<span class="token punctuation">;</span>queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//循环</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> endX <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> endY<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//判断是否到终点</span>        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//找相邻节点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPass</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPass</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPass</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPass</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span>        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//取出队列的结点</span>        Integer n <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         x <span class="token operator">=</span> n <span class="token operator">%</span> column<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//变换点</span>        y <span class="token operator">=</span> n <span class="token operator">/</span> column<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> list2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">>=</span><span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">--</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//从节点中找出路</span>    <span class="token keyword">int</span> x1 <span class="token operator">=</span> list2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">%</span>column<span class="token punctuation">;</span>    <span class="token keyword">int</span> y1 <span class="token operator">=</span> list2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">/</span>column<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> x1<span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>y <span class="token operator">-</span> y1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> x1<span class="token punctuation">;</span>        y <span class="token operator">=</span> y1<span class="token punctuation">;</span>        breadthList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//将找好的路放在breadthList中</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">int</span> size <span class="token operator">=</span> breadthList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> k <span class="token operator">&lt;</span>size<span class="token operator">/</span><span class="token number">2</span> <span class="token punctuation">;</span> k <span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//正向取路</span>    breadthList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> breadthList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token operator">+</span>breadthList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    breadthList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>k<span class="token punctuation">,</span> breadthList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token operator">-</span>breadthList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    breadthList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> breadthList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token operator">-</span>breadthList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPass</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//判断是不是路</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>rectangles<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>Color<span class="token punctuation">.</span>SANDYBROWN<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="深度遍历和最短路径"><a href="#深度遍历和最短路径" class="headerlink" title="深度遍历和最短路径"></a>深度遍历和最短路径</h3><p>主要思路是从图中一个未访问的顶点 V 开始，沿着一条路一直走到底，然后从这条路尽头的节点回退到上一个节点，再从另一条路开始走到底…，不断递归重复此过程，直到所有的顶点都遍历完成，它的特点是不撞南墙不回头，先走完一条路，再换一条路继续走。<br>有递归和非递归两种表现形式，接下来我们以二叉树为例来看下如何分别用递归和非递归来实现深度优先遍历。</p><ul><li>1、递归实现<br>递归实现比较简单，由于是前序遍历，所以我们依次遍历当前节点，左节点，右节点即可，对于左右节点来说，依次遍历它们的左右节点即可，依此不断递归下去，直到叶节点(递归终止条件)，代码如下：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 深度遍历找路* 递归实现寻找到所有的路* 方法为子类找到了所有可达路线*/</span>ArrayList<span class="token operator">&lt;</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> list<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//用于存放深度遍历的路   最短路径只需从所有路径中找出最短的即可</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用于存放深度遍历走过的点</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deepTraversal</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> startX <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> startY <span class="token punctuation">)</span> <span class="token punctuation">{</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断递归结束条件</span><span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> endX <span class="token operator">&amp;&amp;</span>  y <span class="token operator">==</span>endY<span class="token punctuation">)</span> <span class="token punctuation">{</span>    list1<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*把真正能走的点添加到list*/</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断四个方向能不能走</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPath</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">deepTraversal</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPath</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span>x<span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">deepTraversal</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPath</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span>x<span class="token punctuation">,</span> y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">deepTraversal</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPath</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">deepTraversal</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>list1<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//移除不能走的点</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断x，y是不是路  没有走过且不是墙才是路</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPath</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> arrayList<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>arrayList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">*</span>column<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rectangles<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>Color<span class="token punctuation">.</span>SANDYBROWN<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>2、非递归实现</li></ul><p>仔细观察深度优先遍历的特点，对二叉树来说，由于是先序遍历(先遍历当前节点，再遍历左节点，再遍历右节点)，所以我们有如下思路：<br>对于每个节点来说，先遍历当前节点，然后把右节点压栈，再压左节点(这样弹栈的时候会先拿到左节点遍历，符合深度优先遍历要求)。<br>弹栈，拿到栈顶的节点，如果节点不为空，重复步骤 1， 如果为空，结束遍历。<br>我们以以下二叉树为例来看下如何用栈来实现 <strong>DFS</strong>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * 使用栈来实现 dfs  * @param root  */</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">dfsWithStack</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      Stack<span class="token operator">&lt;</span>Node<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 先把根节点压栈 </span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         Node treeNode <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 遍历节点 </span>        <span class="token function">process</span><span class="token punctuation">(</span>treeNode<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 先压右节点 </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>treeNode<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>             stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>treeNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 再压左节点 </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>treeNode<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>             stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>treeNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考:<a href = "https://blog.csdn.net/qq_40232834/article/details/121061244">深度优先遍历（DFS）和广度优先遍历（BFS）</a><br>参考:<a href = "https://www.runoob.com/data-structures/graph-theory-short-path.html">广度优先遍历与最短路径</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS（四）</title>
      <link href="/2022/11/06/CSS%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2022/11/06/CSS%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-定位、精灵图、字体图标、三角制作"><a href="#简介-定位、精灵图、字体图标、三角制作" class="headerlink" title="简介  定位、精灵图、字体图标、三角制作"></a>简介  定位、精灵图、字体图标、三角制作</h1><span id="more"></span><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>1.当我们滚动窗口的时候，盒子是固定屏幕某个位置的<br>2.某个元素可以自由的在一个盒子内移动位置，并且压住其他盒子<br>要实现以上效果，**标准流 或 浮动都无法快速实现<br>所以：<br>1.浮动可以让多个块级盒子一行没有缝隙排列显示， 经常用于横向排列盒子。<br>2.定位则是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。</p><h3 id="定位组成"><a href="#定位组成" class="headerlink" title="定位组成"></a>定位组成</h3><p>  <strong>定位</strong>：将盒子<strong>定</strong>在某一个位置，所以<strong>定位也是在摆放盒子， 按照定位的方式移动盒子</strong><br>  <strong>定位 = 定位模式 + 边偏移</strong><br>  <strong>定位模式</strong> 用于指定一个元素在文档中的定位方式。<strong>边偏移</strong>则决定了该元素的最终位置。</p><ul><li><p>定位模式<br>定位模式决定元素的定位方式 ，它通过 CSS 的 position 属性来设置，其值可以分为四个：</p><table><thead><tr><th>值</th><th align="center">语义</th></tr></thead><tbody><tr><td><code>static</code></td><td align="center"><strong>静态</strong>定位</td></tr><tr><td><code>relative</code></td><td align="center"><strong>相对</strong>定位</td></tr><tr><td><code>absolute</code></td><td align="center"><strong>绝对</strong>定位</td></tr><tr><td><code>fixed</code></td><td align="center"><strong>固定</strong>定位</td></tr></tbody></table></li><li><p>边偏移<br> <strong>边偏移</strong> 就是定位的盒子移动到最终位置。有 top、bottom、left 和 right  4 个属性：</p><table><thead><tr><th>边偏移属性</th><th>示例</th><th>述</th></tr></thead><tbody><tr><td><code>top</code></td><td><code>top: 80px</code></td><td><strong>顶端</strong>偏移量，定义元素相对于其父元素<strong>上边线的距离</strong>。</td></tr><tr><td><code>bottom</code></td><td><code>bottom: 80px</code></td><td><strong>底部</strong>偏移量，定义元素相对于其父元素<strong>下边线的距离</strong>。</td></tr><tr><td><code>left</code></td><td><code>left: 80px</code></td><td><strong>左侧</strong>偏移量，定义元素相对于其父元素<strong>左边线的距离</strong>。</td></tr><tr><td><code>right</code></td><td><code>right: 80px</code></td><td><strong>右侧</strong>偏移量，定义元素相对于其父元素<strong>右边线的距离</strong></td></tr></tbody></table></li></ul><p>定位的盒子有了边偏移才有价值。 一般情况下，凡是有定位地方必定有边偏移。</p><h3 id="定位模式介绍"><a href="#定位模式介绍" class="headerlink" title="定位模式介绍"></a>定位模式介绍</h3><p>常见的几种定位模式特性</p><table><thead><tr><th><strong>定位模式</strong></th><th><strong>是否脱标</strong></th><th><strong>移动位置</strong></th><th><strong>是否常用</strong></th></tr></thead><tbody><tr><td>static   静态定位</td><td>否</td><td>不能使用边偏移</td><td>很少</td></tr><tr><td><strong>relative 相对定位</strong></td><td><strong>否 (占有位置)</strong></td><td><strong>相对于自身位置移动</strong></td><td><strong>基本单独使用</strong></td></tr><tr><td><strong>absolute绝对定位</strong></td><td><strong>是（不占有位置）</strong></td><td><strong>带有定位的父级</strong></td><td><strong>要和定位父级元素搭配使用</strong></td></tr><tr><td><strong>fixed 固定定位</strong></td><td><strong>是（不占有位置）</strong></td><td><strong>浏览器可视区</strong></td><td><strong>单独使用，不需要父级</strong></td></tr><tr><td>sticky 粘性定位</td><td>否   (占有位置)</td><td>浏览器可视区</td><td>当前阶段少</td></tr></tbody></table><h4 id="静态定位-static-了解"><a href="#静态定位-static-了解" class="headerlink" title="静态定位(static) - 了解"></a>静态定位(static) - 了解</h4><p><strong>静态定位</strong>是元素的<strong>默认</strong>定位方式，<strong>无定位的意思</strong>。它相当于 border 里面的none，静态定位static，不要定位的时候用。</p><ul><li>语法：</li></ul><pre><code>选择器 &#123;     position: static; &#125;</code></pre><p>1.静态定位按照标准流特性摆放位置，它没有边偏移。<br>2.静态定位在布局时我们几乎不用的 </p><h4 id="相对定位-relative-重要"><a href="#相对定位-relative-重要" class="headerlink" title="相对定位(relative) - 重要"></a>相对定位(relative) - 重要</h4><p><strong>相对定位</strong>是元素在移动位置的时候，是相对于它自己<strong>原来的位置</strong>来说的。</p><ul><li>语法：</li></ul><pre><code>选择器 &#123;     position: relative; &#125;</code></pre><ul><li><p>相对定位的特点：</p><ul><li><p>1.它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）。</p></li><li><p>2.<strong>原来</strong>在标准流的<strong>位置</strong>继续占有，后面的盒子仍然以标准流的方式对待它，不会占用他原来的位置,。因此，<strong>相对定位并没有脱标</strong>。</p></li></ul></li><li><p>效果图：</p></li></ul><img src="/images/04_相对定位案例.png" width="600" /><h4 id="绝对定位-absolute-重要"><a href="#绝对定位-absolute-重要" class="headerlink" title="绝对定位(absolute) - 重要"></a>绝对定位(absolute) - 重要</h4><p><strong>绝对定位</strong>是元素在移动位置的时候，是相对于它<strong>祖先元素</strong>来说的</p><ol><li><p><strong>完全脱标</strong> —— 完全不占位置；  </p></li><li><p>*<em><strong>没有祖先元素</strong>或者</em><em>祖先元素没有定位</em><strong>，则以</strong>浏览器**为准定位（Document 文档）。</p></li></ol><img src="/images/05_绝对定位_父级无定位.png" width="600" /><ol start="3"><li><p><strong>父元素有定位（相对、绝对、固定定位）</strong></p><ul><li>元素将依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位,以最近一级定位的祖先元素为参考点定位。</li></ul> <img src="/images/06_绝对定位_父级有定位.png" width="600" /></li></ol><p>4.绝对定位<strong>不再占有原先的位置</strong>。所以绝对定位是脱离标准流的。（脱标）</p><h4 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h4><ul><li><p>介绍<br>“子绝父相”是定位中最常用的一种方式这句话的意思是：<strong>子级是绝对定位的话，父级要用相对定位。</strong><br>因为绝对定位的盒子是拼爹的，所以要和父级搭配一起来使用。<br>①子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子。<br>②父盒子需要加定位限制子盒子在父盒子内显示。<br>③父盒子布局时，需要占有位置，因此父亲只能是相对定位。<br>这就是子绝父相的由来，所以<strong>相对定位经常用来作为绝对定位的父级</strong>。<br>总结： <strong>因为父级需要占有位置，因此是相对定位， 子盒子不需要占有位置，则是绝对定位</strong><br>当然，子绝父相不是永远不变的，如果父元素不需要占有位置，<strong>子绝父绝</strong>也会遇到。</p></li><li><p>疑问<br>为什么在布局时，<strong>子级元素</strong>使用<strong>绝对定位</strong>时，<strong>父级元素</strong>就要用<strong>相对定位</strong>呢？<br>观察下图，思考一下在布局时，<strong>左右两个方向的箭头图片</strong>以及<strong>父级盒子</strong>的定位方式。</p></li></ul><img src="/images/27子绝父相.png" width="600" /><ul><li>分析</li></ul><ol><li><strong>方向箭头</strong>叠加在其他图片上方，应该使用<strong>绝对定位</strong>，因为<strong>绝对定位完全脱标</strong>，完全不占位置。</li><li><strong>父级盒子</strong>应该使用<strong>相对定位</strong>，因为<strong>相对定位不脱标</strong>，后续盒子仍然以标准流的方式对待它。<ul><li>如果父级盒子也使用<strong>绝对定位</strong>，会完全脱标，那么下方的<strong>广告盒子</strong>会上移，这显然不是我们想要的。</li></ul></li></ol><p> <strong>结论</strong>：<strong>父级要占有位置，子级要任意摆放</strong>，这就是<strong>子绝父相</strong>的由来。</p><h4 id="固定定位-fixed-重要"><a href="#固定定位-fixed-重要" class="headerlink" title="固定定位(fixed) - 重要"></a>固定定位(fixed) - 重要</h4><ul><li><p><strong>固定定位</strong>是元素<strong>固定于浏览器可视区的位置</strong>。 主要使用场景： 可以在浏览器页面滚动时元素的位置不会改变。</p></li><li><p>语法：</p><pre><code> 选择器 &#123;      position: fixed;  &#125;</code></pre></li><li><p>固定定位的特点：（务必记住）：</p><p>1.以浏览器的可视窗口为参照点移动元素。</p><ul><li>跟父元素没有任何关系</li><li>不随滚动条滚动。</li></ul><p>2.固定定位<strong>不在占有原先的位置</strong>。</p></li><li><p>固定定位也是<strong>脱标</strong>的，其实<strong>固定定位也可以看做是一种特殊的绝对定位</strong>。（认死理型） </p><ul><li><strong>完全脱标</strong>—— 完全不占位置；</li><li>只认<strong>浏览器的可视窗口</strong> —— <code>浏览器可视窗口 + 边偏移属性</code> 来设置元素的位置；<ul><li>跟父元素没有任何关系；单独使用的</li><li>不随滚动条滚动。</li></ul></li></ul></li></ul><img src = "/images/08_固定定位案例.png" width="600" /><p><strong>提示</strong>：IE 6 等低版本浏览器不支持固定定位。</p><h4 id="粘性定位-sticky-了解"><a href="#粘性定位-sticky-了解" class="headerlink" title="粘性定位(sticky) - 了解"></a>粘性定位(sticky) - 了解</h4><ul><li><p><strong>粘性定位</strong>可以被认为是相对定位和固定定位的混合。 Sticky  粘性的 </p></li><li><p>语法：</p><pre><code> 选择器 &#123;      position: sticky;      top: 10px;  &#125;</code></pre></li><li><p>粘性定位的特点：</p><p>1.以浏览器的可视窗口为参照点移动元素（固定定位特点）</p><p>2.粘性定位占有原先的位置（相对定位特点）</p><p>3.必须添加 top 、left、right、bottom <strong>其中一个</strong>才有效</p><p>跟页面滚动搭配使用。 兼容性较差，IE 不支持。</p></li></ul><h4 id="定位的补充"><a href="#定位的补充" class="headerlink" title="定位的补充"></a>定位的补充</h4><ul><li>定位的重叠顺序<blockquote><p>当同时使用定位时，会出现盒子重叠的现象，需要用z-index来控制盒子的先后次序</p></blockquote><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">选择器</span><span class="token punctuation">{</span><span class="token property">z-index</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>*<strong>注意：</strong><br>1.数值可以是正整数，负整数，默认为auto，数值越大，盒子越靠上<br>2.如果属性值相同，则按书写顺序，后来居上<br>3.数字后面不能加单位<br>4.只有定位的盒子才有z-index属性</p><ul><li>绝对定位的居中显示<blockquote><p>加了绝对定位的盒子不能使用margin:auto水平居中，但是可以采取以下的方式实现水平和垂直居中</p></blockquote></li></ul><p>1.left:50%; 让盒子的左侧移动到父级元素的水平居中位置<br>2.margin-left:-100px;让盒子移动自身宽度的一半</p><ul><li>定位的特殊性<blockquote><p>绝对定位和固定定位也有和浮动相似的特性</p></blockquote></li></ul><p>1.行内元素添加绝对或者固定定位，可以直接设置高度和宽度<br>2.块元素添加绝对定位和固定定位，如果不给高度或者宽度，默认大小是内容的大小</p><h2 id="显示与隐藏"><a href="#显示与隐藏" class="headerlink" title="显示与隐藏"></a>显示与隐藏</h2><blockquote><p>让一个元素在页面中隐藏或显示出来</p></blockquote><h3 id="dispaly显示隐藏"><a href="#dispaly显示隐藏" class="headerlink" title="dispaly显示隐藏"></a>dispaly显示隐藏</h3><p>display属性用于设置一个对象该如何显示</p><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>none</td><td>隐藏对象</td></tr><tr><td>block</td><td>除转为块元素之外，还能显示对象</td></tr><tr><td><font color = "red"><strong>display隐藏对象后，不在占用原来的位置</strong></font></td><td></td></tr></tbody></table><h3 id="visibility显示隐藏"><a href="#visibility显示隐藏" class="headerlink" title="visibility显示隐藏"></a>visibility显示隐藏</h3><p>visibility属性指定一个元素应该可见还是隐藏</p><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>visible</td><td>可视</td></tr><tr><td>hidden</td><td>隐藏</td></tr><tr><td><font color = "red"><strong>visibility隐藏对象后，保留原来的位置</strong></font></td><td></td></tr></tbody></table><h3 id="overflow显示隐藏"><a href="#overflow显示隐藏" class="headerlink" title="overflow显示隐藏"></a>overflow显示隐藏</h3><p>overflow属性指定内容溢出的部分，显示还是隐藏，默认显示</p><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>visible</td><td>默认值，显示</td></tr><tr><td>hidden</td><td>不显示</td></tr><tr><td>scroll</td><td>溢出部分显示滚动条，没有超出也会显示滚动条</td></tr><tr><td>auto</td><td>溢出部分显示滚动条，没有超出不会显示滚动条</td></tr></tbody></table><p>如果有定位的盒子，<strong>慎用overflow：hidden</strong>，他会隐藏多余的部分</p><h2 id="精灵图（重点）"><a href="#精灵图（重点）" class="headerlink" title="精灵图（重点）"></a>精灵图（重点）</h2><h3 id="为什么需要精灵图"><a href="#为什么需要精灵图" class="headerlink" title="为什么需要精灵图"></a>为什么需要精灵图</h3><p>一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接收和发送请求图片，造成服务器请求压力过大，这将大大降低页面的加载速度。</p><p><strong>为什么使用精灵图（目的）：</strong></p><p>​    <strong>为了有效地减少服务器接收和发送请求的次数</strong>，<strong>提高</strong>页面的<strong>加载速度</strong>，出现了 <strong>CSS 精灵技术</strong>（也称 CSS Sprites、CSS 雪碧）。</p><p><strong>核心原理</strong>：</p><p>​    将网页中的一些小背景图像整合到一张大图中 ，这样服务器只需要一次请求就可以了。</p><h3 id="精灵图（sprites）的使用"><a href="#精灵图（sprites）的使用" class="headerlink" title="精灵图（sprites）的使用"></a>精灵图（sprites）的使用</h3><p>使用精灵图核心：</p><ol><li>精灵技术主要针对于背景图片使用。就是把多个小背景图片整合到一张大图片中。</li><li>这个大图片也称为 sprites  精灵图  或者 雪碧图</li><li>移动背景图片位置， 此时可以使用 background-position 。</li><li>移动的距离就是这个目标图片的 x 和 y 坐标。注意网页中的坐标有所不同</li><li>因为一般情况下都是往上往左移动，所以数值是负值。</li><li>使用精灵图的时候需要精确测量，每个小背景图片的大小和位置。</li></ol><p>使用精灵图核心总结：</p><ol><li><p>精灵图主要<strong>针对于小的背景图片</strong>使用。</p></li><li><p>主要借助于背景位置来实现—<strong>background-position</strong> 。</p></li><li><p>一般情况下精灵图都是<strong>负值</strong>。（千万注意网页中的坐标： x轴右边走是正值，左边走是负值， y轴同理。）</p></li></ol><h3 id="案例：拼出pink"><a href="#案例：拼出pink" class="headerlink" title="案例：拼出pink"></a>案例：拼出pink</h3><h4 id="案例效果"><a href="#案例效果" class="headerlink" title="案例效果"></a>案例效果</h4><img src = "/images/1571519368229.png" width = " 300"/><h4 id="代码参考"><a href="#代码参考" class="headerlink" title="代码参考"></a>代码参考</h4><p>结构</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>p<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>i<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>n<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>k<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>k<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>样式</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">span </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url(images/abcd.jpg)</span> no-repeat<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.p</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">112</span>px<span class="token punctuation">;</span>    <span class="token property">background-position</span><span class="token punctuation">:</span>  -<span class="token number">493</span>px -<span class="token number">276</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.i</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">108</span>px<span class="token punctuation">;</span>    <span class="token property">background-position</span><span class="token punctuation">:</span> -<span class="token number">327</span>px -<span class="token number">142</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.n</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">108</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">109</span>px<span class="token punctuation">;</span>    <span class="token property">background-position</span><span class="token punctuation">:</span> -<span class="token number">215</span>px -<span class="token number">141</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.k</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">105</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">114</span>px<span class="token punctuation">;</span>    <span class="token property">background-position</span><span class="token punctuation">:</span> -<span class="token number">495</span>px -<span class="token number">142</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h2><h3 id="字体图标的产生"><a href="#字体图标的产生" class="headerlink" title="字体图标的产生"></a>字体图标的产生</h3><p>字体图标使用场景：  主要用于显示网页中通用、常用的一些小图标。<br>精灵图是有诸多优点的，但是缺点很明显。<br>1.图片文件还是比较大的。<br>2.图片本身放大和缩小会失真。<br>3.一旦图片制作完毕想要更换非常复杂。<br>此时，有一种技术的出现很好的解决了以上问题，就是<strong>字体图标 iconfont</strong>。</p><p><strong>字体图标</strong>可以为前端工程师提供一种方便高效的图标使用方式，<strong>展示的是图标，本质属于字体</strong>。</p><h3 id="字体图标的优点"><a href="#字体图标的优点" class="headerlink" title="字体图标的优点"></a>字体图标的优点</h3><p><strong>轻量级</strong>：一个图标字体要比一系列的图像要小。一旦字体加载了，图标就会马上渲染出来，减少了服务器请求<br>1.灵活性：本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果、旋转等<br>2.兼容性：几乎支持所有的浏览器，请放心使用<br>3.注意： 字体图标不能替代精灵技术，只是对工作中图标部分技术的提升和优化。</p><p><strong>总结：</strong></p><p>如果遇到一些结构和样式比较简单的小图标，就用字体图标。<br><img src="/images/1571519724473.png"></p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p>字体图标是一些网页常见的小图标，我们直接网上下载即可。 因此使用可以分为：<br>1.字体图标的下载<br>2.字体图标的引入 （引入到我们html页面中）<br>3.字体图标的追加 （以后添加新的小图标）</p><h3 id="字体图标的下载"><a href="#字体图标的下载" class="headerlink" title="字体图标的下载"></a>字体图标的下载</h3><p><strong>推荐下载网站：</strong></p><ul><li><strong>icomoon</strong> <strong>字库</strong>  <a href="http://icomoon.io/">http://icomoon.io</a>    推荐指数  <strong>★★★★★</strong><br>IcoMoon 成立于 2011 年，推出了第一个自定义图标字体生成器，它允许用户选择所需要的图标，使它们成一字型。该字库内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。</li><li><strong>阿里</strong> <strong>iconfont</strong> <strong>字库</strong>   <a href="http://www.iconfont.cn/">http://www.iconfont.cn/</a>   推荐指数   <strong>★★★★★</strong> </li></ul><p>这个是阿里 M2UX 的一个 iconfont 字体图标字库，包含了淘宝图标库和阿里图标库。可以使用 AI制作图标上传生成。 重点是，免费！</p><h3 id="字体图标的引入"><a href="#字体图标的引入" class="headerlink" title="字体图标的引入"></a>字体图标的引入</h3><ul><li><p>1.把下载包里面的 <strong>fonts</strong> 文件夹放入页面根目录下</p><img src = "/images/1571520092646.png" width="600" /></li><li><ul><li>字体文件格式<br>不同浏览器所支持的字体格式是不一样的，字体图标之所以兼容，就是因为包含了主流浏览器支持的字体文件。<table><thead><tr><th>格式</th><th>支持的浏览器</th></tr></thead><tbody><tr><td>TureType(  <strong>.ttf</strong>  )格式.ttf字体是Windows和Mac的最常见的字体</td><td>IE9+、Firefox3.5+、Chrome4+、Safari3+、Opera10+、iOS Mobile、Safari4.2+</td></tr><tr><td>Web Open Font Format( <strong>.woff</strong> )格式woff字体</td><td>IE9+、Firefox3.5+、Chrome6+、Safari3.6+、Opera11.1+</td></tr><tr><td>Embedded Open Type( <strong>.eot</strong> )格式.eot字体是IE专用字体</td><td>IE4+</td></tr><tr><td>SVG(  .<strong>svg</strong>  )格式.svg字体是基于SVG字体渲染的一种格式</td><td>Chrome4+、Safari3.1+、Opera10.0+、iOS Mobile Safari3.2+</td></tr></tbody></table></li></ul></li></ul><ul><li>2.在 CSS 样式中全局声明字体： 简单理解把这些字体文件通过css引入到我们页面中。<pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*以下代码在刚刚下载的style.css文件中*/</span><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*将代码复制到css文件中即可*/</span><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'icomoon'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*字体声明*/</span><span class="token property">src</span><span class="token punctuation">:</span>  <span class="token url">url('fonts/icomoon.eot?7kkyc2')</span><span class="token punctuation">;</span><span class="token property">src</span><span class="token punctuation">:</span>  <span class="token url">url('fonts/icomoon.eot?7kkyc2#iefix')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span>,      <span class="token url">url('fonts/icomoon.ttf?7kkyc2')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span>,      <span class="token url">url('fonts/icomoon.woff?7kkyc2')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span>,      <span class="token url">url('fonts/icomoon.svg?7kkyc2#icomoon')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'svg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>      <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>      <span class="token property">font-display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><ol start="3"><li>在刚刚下载的demo.html文件中复制小图标。<img src = "/images/1571520411345.png" width = "600" />将复制的字符粘贴到span标签中</li></ol></li><li><ol start="4"><li>给标签定义字体。<pre class="line-numbers language-css"><code class="language-css"><span class="token selector">span </span><span class="token punctuation">{</span><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'icomoon'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>注意：务必保证 这个字体和上面@font-face里面的字体保持一致 <h3 id="字体图标的追加"><a href="#字体图标的追加" class="headerlink" title="字体图标的追加"></a>字体图标的追加</h3>如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标到原来的字体文件中。<br>把压缩包里面的 <strong>selection.json</strong> 从新上传，然后选中自己想要新的图标，从新下载压缩包，并替换原来的文件即可。<br><img src="/images/1571520554317.png"></li></ol></li></ul><h3 id="字体图标加载的原理："><a href="#字体图标加载的原理：" class="headerlink" title="字体图标加载的原理："></a>字体图标加载的原理：</h3><img src = "/images/字体图标加载的原理.gif" width = "600" /><h2 id="CSS三角制作"><a href="#CSS三角制作" class="headerlink" title="CSS三角制作"></a>CSS三角制作</h2><blockquote><p>网页中常见一些三角形，使用 CSS 直接画出来就可以，不必做成图片或者字体图标。</p></blockquote><p><img src="/images/1571520965966.png"></p><pre class="line-numbers language-css"><code class="language-css"> <span class="token selector">div </span><span class="token punctuation">{</span>     <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*三角就是利用边框的相交*/</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*50px控制三角形的大小，一个三角形的低高是50px*/</span>      <span class="token property">border-color</span><span class="token punctuation">:</span> red green blue black<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*为了照顾兼容性*/</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>我们用css 边框可以模拟三角效果</li><li>宽度高度为0</li><li>我们4个边框都要写， 只保留需要的边框颜色，其余的不能省略，都改为 transparent 透明就好了</li><li>为了照顾兼容性 低版本的浏览器，加上 font-size: 0;  line-height: 0;</li></ol>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS（三）</title>
      <link href="/2022/10/30/CSS%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2022/10/30/CSS%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-CSS特性、盒子模型、浮动、基础布局"><a href="#简介-CSS特性、盒子模型、浮动、基础布局" class="headerlink" title="简介 CSS特性、盒子模型、浮动、基础布局"></a>简介 CSS特性、盒子模型、浮动、基础布局</h1><span id="more"></span><h2 id="CSS三大特性"><a href="#CSS三大特性" class="headerlink" title="CSS三大特性"></a>CSS三大特性</h2><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><blockquote><p>层叠性主要解决样式冲突的问题<br>层叠性原则：<br>    1.样式冲突，<font color = "red">就近原则</font>，哪个样式离结构近，选择那个样式<br>    2.样式不冲突，不重叠</p></blockquote><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*会被覆盖*/</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*不会覆盖*/</span><span class="token punctuation">}</span><span class="token selector">div </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>子元素会继承父元素的样式（text-，font-，line-，color）</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/**包含在div标签中的标签颜色都会变为红色*/</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">font</span><span class="token punctuation">:</span> <span class="token number">15</span>px/<span class="token number">1.5</span> <span class="token string">'Microsoft YaHei'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*1.5表示当前文字的1.5倍行高*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>当一个元素指定多个选择器，就会有优先级的产生<br>    1.选择器相同，则执行层叠性<br>    2.选择器不同，则根据<font color = "red" >选择器权重</font>执行</p><ul><li>  选择器的权重<table><thead><tr><th>选择器</th><th>权重</th></tr></thead><tbody><tr><td>继承 或者 *（通用符选择器）</td><td>0，0，0，0</td></tr><tr><td>元素选择器</td><td>0，0，0，1</td></tr><tr><td>类选择器，伪类选择器</td><td>0，0，1，0</td></tr><tr><td>id选择器</td><td>0，1，0，0</td></tr><tr><td>行内格式</td><td>1，0，0，0</td></tr><tr><td>!important（重要）</td><td>无穷大</td></tr><tr><td>从上到下，优先性逐渐增加，权重比较从左到右</td><td></td></tr></tbody></table></li><li>权重叠加<br>复合选择器会有权重叠加，<font color = "red" >权重叠加不会进位</font><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2></li><li>盒子模型组成<table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>border</td><td>边框</td></tr><tr><td>content</td><td>内容</td></tr><tr><td>padding</td><td>内边距,内容和边框的距离</td></tr><tr><td>margin</td><td>外边距，盒子和另一个盒子的距离</td></tr></tbody></table></li></ul><img src="/images/盒子模型.png" width="600" /><ul><li>边框</li><li><ul><li>边框的属性<table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>border-width</td><td>边框的宽度</td></tr><tr><td>border-style</td><td>边框的样式</td></tr><tr><td>border-color</td><td>边框的颜色</td></tr></tbody></table></li></ul></li></ul><ul><li><ul><li> 边框的复合写法<pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*边框会影响盒子的大小,不给盒子指定宽高度就不会改变大小*/</span><span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">5</span>px solid red<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*顺序没有要求*/</span><span class="token comment" spellcheck="true">/*solid表示盒子边框的样式 实线*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><ul><li> 边框的分开写法<pre class="line-numbers language-css"><code class="language-css"><span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">5</span>px solid  blue<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*只改变边框的上边*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><ul><li>表格的边框<pre class="line-numbers language-css"><code class="language-css">table ,<span class="token comment" spellcheck="true">/*表格*/</span>td ,<span class="token comment" spellcheck="true">/*表格的表头*/</span><span class="token selector">th </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*表格的单元格*/</span>border：<span class="token number">5</span>px solid red<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*顺序没有要求*/</span><span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*合并相邻单元格的边框*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>内边距</li><li><ul><li>内边距属性<br>内边距就是内容和边框的距离，padding设置内边距<table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>padding-left</td><td>左内边距</td></tr><tr><td>padding-top</td><td>上内边距</td></tr><tr><td>padding-right右内边距</td><td></td></tr><tr><td>padding-bottom</td><td>下内边距</td></tr></tbody></table></li></ul></li><li><ul><li>内边距的复合写法<pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*padding会影响盒子的实际大小，盒子width和height改变大小即可*/</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*上下左右都是10px*/</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*上下是10px ,左右是15px*/</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">15</span>px <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*上是10px，左右是15px ，下是20px*/</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">15</span>px <span class="token number">20</span>px <span class="token number">25</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*上是10px，右是15px 下是20px 左是25px*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>外边距</li><li><ul><li>外边距属性<br>内边距就是相邻盒子的距离，margin设置外边距<table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>margin-left</td><td>左外边距</td></tr><tr><td>margin-top</td><td>上外边距</td></tr><tr><td>margin-right</td><td>右外边距</td></tr><tr><td>margin-bottom</td><td>下外边距</td></tr><tr><td>margin用法和padding相似</td><td></td></tr></tbody></table></li></ul></li><li><ul><li>外边距应用<pre class="line-numbers language-css"><code class="language-css"><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span>  auto<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*0设置上下外边距，auto水平居中对齐*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><font color="red" ><b>注意：</b></font>以上方法是块元素居中，行内元素或者是行内块元素居中是给其父元素添加<font color="red" ><b>text-align:center</b></font>即可</li></ul></li></ul><ul><li><ul><li>外边距合并<br>对于两个嵌套关系的块元素，父元素有上边距同时子元素也有上边距，此时父元素会塌陷较大的外边距<br>解决方案：<br>1.为父元素定义一个上边框<br>2.可以为父元素定义一个内边距<br>3.为父元素添加一个overflow:hidden</li></ul></li><li><ul><li>清除内外边距<pre class="line-numbers language-css"><code class="language-css"><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*将内外边距变为0*/</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>圆角矩形</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*border-adius设置和边角的圆形的半径，圆的弧度表示圆框弧度的大小*/</span>border-radius：<span class="token number">10</span>px <span class="token number">20</span>px <span class="token number">30</span>px <span class="token number">40</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*按顺序设置左上，右上，右下，左下*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>盒子阴影</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*box-shadow: h-shadow v-shadow blur spread color inset;*/</span><span class="token comment" spellcheck="true">/*h-shadow v-shadow控制阴影的位置*/</span><span class="token comment" spellcheck="true">/*blur越大表示越模糊*/</span><span class="token comment" spellcheck="true">/*spread表示阴影的大小*/</span><span class="token comment" spellcheck="true">/*inset表示内阴影，outset表示外阴影，默认是外阴影，outset一般不写*/</span><span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">10</span>px <span class="token number">10</span>px <span class="token number">10</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span> , <span class="token number">.3</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>h-shadow</td><td>必选，水平阴影的位置，允许负值</td></tr><tr><td>v-shadow</td><td>必选，竖直阴影位置，允许负值</td></tr><tr><td>blur</td><td>可选，模糊距离</td></tr><tr><td>spread</td><td>可选，模糊尺寸</td></tr><tr><td>color</td><td>可选，阴影颜色</td></tr><tr><td>inset</td><td>可选，将外部阴影改为内部阴影</td></tr></tbody></table></li><li><p>文字阴影</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*box-shadow: h-shadow v-shadow blur spread color inset;*/</span><span class="token comment" spellcheck="true">/*h-shadow v-shadow控制阴影的位置*/</span><span class="token comment" spellcheck="true">/*blur越大表示越模糊*/</span><span class="token property">text-shadow</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">10</span>px <span class="token number">6</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>,<span class="token number">.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>h-shadow</td><td>必选，水平阴影的位置，允许负值</td></tr><tr><td>v-shadow</td><td>必选，竖直阴影位置，允许负值</td></tr><tr><td>blur</td><td>可选，模糊距离</td></tr><tr><td>color</td><td>可选，阴影颜色</td></tr></tbody></table><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><blockquote><p>float属性用于创建浮动框，将其移动在一边，直到左边缘或右边缘以及包括另一个浮动框的边缘</p></blockquote></li><li><p>float的属性值</p><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>none</td><td>无浮动</td></tr><tr><td>left</td><td>左浮动</td></tr><tr><td>right</td><td>右浮动</td></tr></tbody></table></li><li><p>浮动特性<br>  1.脱离标准普通流的控制移动到指定位置（简称脱标）<br>  3.如果所有浮动的盒子会一行显示，并且上沿对齐<br>  4.添加浮动的元素具有行内块元素的相似特性<br>  5.浮动元素经常和标准流父元素搭配使用<br>  6.浮动的盒子只会影响浮动盒子后面的标准流不会影响前面的标准流</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;head>&lt;title>Document&lt;/title>&lt;style>  * </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*清除内外边距*/</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">li </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*去掉列表的标志*/</span>          <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1226</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">285</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> antiquewhite<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*居中*/</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.box</span> li </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">296</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">285</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*设置每个浮动元素的距离*/</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.box</span> <span class="token class">.li</span></span><span class="token punctuation">{</span>    <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*最后一个右侧没有内边距*/</span>  <span class="token punctuation">}</span>&lt;/style>&lt;/head>&lt;body>&lt;ul class=<span class="token string">"box"</span>>  &lt;li><span class="token number">1</span>&lt;/li>  &lt;li><span class="token number">2</span>&lt;/li>  &lt;li><span class="token number">3</span>&lt;/li>  &lt;li class=<span class="token string">"li"</span>><span class="token number">4</span>&lt;/li>&lt;/ul>&lt;/body><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>清除浮动<br>有时候父元素中的浮动元素个数不确定，所以父元素的高度不是定值，然而不给父元素设高度又会造成父元素高度为零。<br>清除浮动就是清除浮动元素的影响，清除浮动之后父元素会根据浮动盒子自动检测高度</p></li><li><ul><li>清除浮动的属性值<pre class="line-numbers language-css"><code class="language-css"><span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>清除左侧浮动</td></tr><tr><td>right</td><td>清除右侧浮动</td></tr><tr><td>both</td><td>清除左右侧浮动,经常使用</td></tr></tbody></table></li></ul></li><li><ul><li>清除浮动的方法</li></ul></li><li><ul><li><ul><li>额外标签法<pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.clear</span> </span><span class="token punctuation">{</span><span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*清除浮动*/</span><span class="token punctuation">}</span>&lt;div class=<span class="token string">"clear"</span>>&lt;/div><span class="token comment" spellcheck="true">/*在父元素的最后一个浮动元素之后加一个标签，这个标签必须是块元素，添加clear类*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><ul><li><ul><li>给父元素添加overflow属性<pre class="line-numbers language-css"><code class="language-css"><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*添加给父元素*/</span><span class="token comment" spellcheck="true">/*超出的元素会隐藏，不会占位*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li><li><ul><li><ul><li>after伪元素<pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*:after是额外标签法的升级版，相当于添加了一个额外标签*/</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*新标签的内容*/</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*默认元素元素是行内元素，所以要转为块元素*/</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>  <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*给父元素添加clearfix类*/</span><span class="token comment" spellcheck="true">/*IE6,7专有*/</span>  *<span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*为了兼容*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><ul><li><ul><li>双伪元素法<pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*双伪元素法用的比较多*/</span><span class="token comment" spellcheck="true">/*实际开发经常用*/</span><span class="token number">.</span><span class="token property">clearfix</span><span class="token punctuation">:</span><span class="token punctuation">:</span>before,<span class="token comment" spellcheck="true">/*相当于在伪元素的前后都加上一个标签*/</span><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*新标签的内容*/</span>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*转化为表格*/</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*给父元素添加clearfix类*/</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*IE6,7专有*/</span>*<span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><h2 id="PS切图"><a href="#PS切图" class="headerlink" title="PS切图"></a>PS切图</h2><h3 id="常见的图片格式"><a href="#常见的图片格式" class="headerlink" title="常见的图片格式"></a>常见的图片格式</h3><table><thead><tr><th>序号</th><th>格式</th><th>特点和常用的用途</th></tr></thead><tbody><tr><td>1</td><td>jpg</td><td>JPEG（.JPG）对色彩的信息保留较好，高清，颜色较多，我们<strong>产品类的图片</strong> 经常用jpg格式的</td></tr><tr><td>2</td><td>gif</td><td>GIF格式最多只能储存256色，所以通常用来显示简单图形及字体，但是可以保存透明背景和动画效果, 实际 <strong>经常用于一些图片小动画效果</strong></td></tr><tr><td>3</td><td>png</td><td>png图像格式，是一种新兴的网络图形格式，结合了GIF和JPEG的优点，具有存储形式丰富的特点，能够保持透明背景. 如果想要切成 <strong>背景透明的图片</strong> ,请选择png格式.</td></tr><tr><td>4</td><td>psd</td><td>PSD图像格式，Photoshop的专用格式，里面可以存放图层、通道、遮罩等多种设计稿. <strong>对我们前端人员来说,最大的优点,我们可以直接从上面复制文字,获得图片,还可以测量大小和距离</strong>.</td></tr></tbody></table><p>PS 有很多的切图方式：图层切图、切片切图、PS 插件切图等。 </p><h3 id="图层切图"><a href="#图层切图" class="headerlink" title="图层切图"></a>图层切图</h3><p>简单版步骤：</p><p>​    ① 使用<strong>移动工具</strong>，点击需要的图片</p><p><img src="/images/1571299959992.png"></p><p>​    ② 查看右侧，找到图片对应的图层，右击图层 → 快速导出为 PNG</p><p><img src="/images/1571300150618.png"></p><p>但是很多情况下,我们需要合并图层再导出:</p><p>步骤：</p><p>​    ① 选中需要的若干个图层：选择一个图层，再按住shift键，继续选第二个图层:  </p><p>​    ② 图层菜单 → 合并图层(ctrl+e)   </p><p>​    <img src="/images/1571300529539.png"></p><p>​    ③ 查看右侧生成的新图层，在合并后的图层上，右击 →  快速导出为 PNG</p><h3 id="切片切图"><a href="#切片切图" class="headerlink" title="切片切图"></a>切片切图</h3><p>步骤：</p><p>​    ① 利用切片选中图片 ：利用切片工具手动划出</p><p><img src="/images/1571301270696.png"> </p><p>​    ② 导出选中的图片：文件菜单  →  导出  → 存储为 web 设备所用格式  →  选择我们要的图片格式 →  存储 。</p><p>​    注意：保存的时候，要选“选中的切片”：</p><p><img src="/images/1571301357818.png"> </p><h3 id="插件切图"><a href="#插件切图" class="headerlink" title="插件切图"></a>插件切图</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>Cutterman是一款运行在photoshop中的插件，能够自动将你需要的图层进行输出， 以替代传统的手工 “导出web所用格式” 以及使用切片工具进行挨个切图的繁琐流程。 </p><p>它支持各种各样的图片尺寸、格式、形态输出，方便你在pc、ios、Android等端上使用。 它不需要你记住一堆的语法、规则，纯点击操作，方便、快捷，易于上手。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>注意： <strong>cutterman插件要求你的ps 必须是完整版</strong>，不能是绿色版，所以大家需要从新安装完整版本。</p><p>查看 “窗口菜单”里面的“扩展功能”：</p><p>​    ① 如果是扩展功能的是灰色的，表示就是绿色版的，需要重新安装PS</p><p>​    ② 如果是扩展功能右侧是可以使用的，表示就是完整版的，可以安装cutterman插件快速切图</p><p><img src="/images/1571302032310.png"></p><p>官网: <a href ="http://www.cutterman.cn/zh/cutterman">http://www.cutterman.cn/zh/cutterman</a></p><p>当cutterman 安装完成后，重启PS，会发现扩展功能里面多了一个cutterman工具：</p><p><img src="/images/1571302286467.png"></p><p>使用步骤</p><p>​    ① 选择需要的图层</p><p>​    ② 选择web端，点击web下面的下拉三角</p><p>​    ③ 选择需要的图片格式</p><p>​    ④ 设置好存储路径</p><p>​    ⑤ 点击 “导出选中图层” 按钮</p><p><img src="/images/1571303715362.png"> </p><p>示意图：</p><img src="/images/sample1.gif" /> <h2 id="CSS布局"><a href="#CSS布局" class="headerlink" title="CSS布局"></a>CSS布局</h2><h3 id="CSS书写规范"><a href="#CSS书写规范" class="headerlink" title="CSS书写规范"></a>CSS书写规范</h3><p>建议遵循以下顺序：</p><ol><li><strong>布局定位属性</strong>：display / position / float / clear / visibility / overflow（建议 display 第一个写，毕竟关系到模式）</li><li><strong>自身属性</strong>：width / height / margin / padding / border / background</li><li><strong>文本属性</strong>：color / font / text-decoration / text-align / vertical-align / white- space / break-word</li><li><strong>其他属性（CSS3）</strong>：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …</li></ol><p><strong>举例：</strong></p><pre class="line-numbers language-css"><code class="language-css"> <span class="token selector"><span class="token class">.jdc</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> Arial, <span class="token string">'Helvetica Neue'</span>, Helvetica, sans-serif<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#333</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="页面布局整体思路"><a href="#页面布局整体思路" class="headerlink" title="页面布局整体思路"></a>页面布局整体思路</h3><p>为了提高网页制作的效率，布局时通常有以下的整体思路，具体如下：</p><p>​    1.必须确定页面的<strong>版心</strong>（可视区），我们<strong>测量</strong>可得知。</p><p>​    2.分析页面中的行模块，以及每个行模块中的列模块。其实页面布局第一准则.</p><p>​    3.一行中的列模块经常浮动布局, 先确定每个列的大小,之后确定列的位置.  页面布局第二准则</p><p>​    4.制作 HTML 结构。我们还是遵循，先有结构，后有样式的原则。结构永远最重要.</p><p>​    5.所以, 先理清楚<strong>布局结构</strong>,再写代码尤为重要. 这需要我们多写多积累.</p><h3 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h3><p><font color ="red">实际开发中，<strong>重要的导航栏</strong>，我们不会直接用链接a ，而是<strong>用 li  包含链接(li+a)的做法</strong></font></p><p>​    1.li+a 语义更清晰，一看这就是有条理的列表型内容。</p><p>​    2.如果直接用a，搜索引擎容易辨别为有堆砌关键字嫌疑（故意堆砌关键字容易被搜索引擎有降权的风险），从而影响网站排名</p><p><strong>注意:</strong> </p><p>​    1.让导航栏一行显示, 给 li 加浮动, 因为 li 是块级元素, 需要一行显示.</p><p>​    2.这个nav导航栏可以不给宽度,将来可以继续添加其余文字</p><p>​    3.因为导航栏里面文字不一样多,所以最好给链接 a 左右padding 撑开盒子,而不是指定宽度 </p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS（二）</title>
      <link href="/2022/10/29/CSS%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2022/10/29/CSS%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-复合选择器、背景设置"><a href="#简介-复合选择器、背景设置" class="headerlink" title="简介 复合选择器、背景设置"></a>简介 复合选择器、背景设置</h1><span id="more"></span><h2 id="Emmet语法"><a href="#Emmet语法" class="headerlink" title="Emmet语法"></a>Emmet语法</h2><blockquote><p>Emmet语法可以快速生成CSS语法和HTML语法，提高了代码书写</p></blockquote><ul><li><p>快速生成html<br>  1.标签*n，即可快速生成n个标签<br>  2.父子级关系的，div&gt;span,按tab<br>  3.兄弟级关系的，div+p,按tab<br>  4.带有类名，.nav,按tab，即可生成一个默认nav属性的div标签<br>  5.带有id，#nav,按tab，即可生成一个默认id为nav的div标签<br>  6.span.gray，按tab，即可生成一个gary属性的span标签<br>  7.span#gray，按tab，即可生成一个id为gary的span标签<br>  8..nav$*5,按tab，即可生成五个个默认nav属性的div标签，类的属性值从nav1-nav5</p></li><li><p>快速生成CSS<br>  简写属性的首字母，按tab，即可快速补全代码   </p><h2 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h2><p>  复合选择器是由两个或者两个以上的基础选择器，通过不同方式组合而成</p><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><pre class="line-numbers language-css"><code class="language-css">&lt;head>&lt;style>  <span class="token comment" spellcheck="true">/*父标签和子标签用空格隔开*/</span>  <span class="token selector">ol li </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*选择ol中的li，而不是所有的li*/</span>      <span class="token property">color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token selector"><span class="token class">.nav</span> li</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*只会改变nav类的字体大小*/</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>&lt;/style>&lt;/head>&lt;body>&lt;ol>  &lt;li><span class="token number">123</span>&lt;/li><span class="token comment" spellcheck="true">/*会变色，不会变大小*/</span>&lt;/ol>&lt;ol class  = <span class="token string">"nav"</span>>  &lt;li><span class="token number">4565</span>&lt;/li><span class="token comment" spellcheck="true">/*会变色，会变大小*/</span>&lt;/ol>&lt;ul>  &lt;li><span class="token number">13</span>&lt;/li><span class="token comment" spellcheck="true">/*颜色不会变化*/</span>&lt;/ul>&lt;/body><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>元素1 元素2 {样式}，元素1和元素2可以是任意基础选择器<br>元素2必须是元素1的后代，可以是多重后代</p><h3 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h3><blockquote><p>子选择器只能选择作为某一元素的最近的一级元素</p></blockquote><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;head>&lt;style>  div > a </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*div和a之间用一个">"隔开*/</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>&lt;/style>&lt;/head>&lt;body>&lt;div>  &lt;a href=<span class="token string">"#"</span>>亲儿子&lt;/a><span class="token comment" spellcheck="true">/*会变颜色*/</span>  &lt;p>    儿子<span class="token comment" spellcheck="true">/*不会变颜色*/</span>    &lt;a href=<span class="token string">"#"</span>>孙子&lt;/a><span class="token comment" spellcheck="true">/*不会变颜色*/</span>  &lt;/p>&lt;/div>&lt;/body><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>元素1 &gt;元素2 {样式}，元素1和元素2可以是任意基础选择器</p><h3 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h3><blockquote><p>并集选择器可以为多组标签定义相同的格式，用于集体声明</p></blockquote><pre class="line-numbers language-css"><code class="language-css">  div ,<span class="token comment" spellcheck="true">/*并集选择器常常竖着写*/</span>  <span class="token selector">p ,  <span class="token class">.nav</span> </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*div,p和nav属性都改变了颜色,选择器可以是任意选择器*/</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3></li><li><p>链接的伪类选择器</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">a<span class="token pseudo-class">:link</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span>aqua<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>链接伪类选择器</th><th>作用</th></tr></thead><tbody><tr><td>a:link</td><td>选择所有未被访问的链接</td></tr><tr><td>a:visited</td><td>选择所有已经被访问的链接</td></tr><tr><td>a:hover</td><td>选择鼠标指针在其位置上的链接</td></tr><tr><td>a:active</td><td>选择鼠标在其位置上摁下而未松开的链接</td></tr></tbody></table><p>按照:link - :visited -:hover -:active的顺序声明<br>经常使用:hover选择器</p></li><li><p>focus伪类选择器<br>focus伪类选择器用于获得光标的<font color = "red">表单元素</font>，一般input类表单元素才能获取.</p></li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">input<span class="token pseudo-class">:focus</span></span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*选择input表单中光标点击的元素*/</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> aquamarine<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>一般元素的伪类选择器<pre class="line-numbers language-css"><code class="language-css"><span class="token selector">div<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*用法和链接伪类选择器差不多*/</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token pseudo-class">:hover</span> span</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*当鼠标经过div时，div的子元素span颜色变化*/</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="元素显示模式"><a href="#元素显示模式" class="headerlink" title="元素显示模式"></a>元素显示模式</h2><ul><li>块元素<br>1.独占一行<br>2.可以设置宽度，高度，外边距和内边距都可以设置<br>3.宽度默认是父类的的宽度<br>4.可以放行内元素和块元素<br>常见的块元素有h1-h6,p,div,ul,ol,li等.</li><li>行内元素<br>1.一行可以放多个元素<br>2.宽和高直接设置是无效的<br>3.默认宽度就是它本身内容的宽度<br>4.不可以放块元素，只能放行内元素<br>常见的行内元素有a,strong,b,em,i,del,s,ins,u,span</li><li>行内块元素<br>1.可以一行放多个元素，元素之间有缝隙<br>2.默认宽度就是它本身内容的宽度<br>3.高度，行高，外边距以及内边距都是可以设置的<br>常见的有img,input, td</li><li>元素显示模式转化<br>简单来说将一个模式的元素转化为另一个模式的元素<pre class="line-numbers language-css"><code class="language-css"><span class="token selector">a </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*a标签是行内元素*/</span> <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*dispaly表示转换模式*/</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">153</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*转换之后就可以设置宽度和高度*/</span> <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">155</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*div标签是块元素*/</span> <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*dispaly表示转换模式*/</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">153</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*转换之后就不可以设置高度*/</span><span class="token punctuation">}</span><span class="token selector">span </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*span标签是行内元素*/</span> <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*dispaly表示转换模式，转换为行内块元素*/</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">153</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*转换之后就可以设置高度*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2></li><li>背景颜色<pre class="line-numbers language-css"><code class="language-css"><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#456415</span>,pink,transparent<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*颜色可以直接写相应的单词，十六进制，transparent为透明*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>背景图片<pre class="line-numbers language-css"><code class="language-css"><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(images/R-C.png)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*images文件要和html文件在同一目录之下，文件目录要放在url()中，none默认没有背景图片*/</span><span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*图片默认情况下视平铺的，no-repeat是平铺*/</span><span class="token comment" spellcheck="true">/*盒子的大小不会改变*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><ul><li> 平铺属性值<table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>repeat</td><td>平铺</td></tr><tr><td>no-repeat</td><td>不平铺</td></tr><tr><td>repeat-x</td><td>列平铺</td></tr><tr><td>repeat-y</td><td>行平铺</td></tr></tbody></table></li></ul></li><li><ul><li>背景图片位置<pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*background-position: 方位名词;*/</span> <span class="token comment" spellcheck="true">/*仅仅写一个方位名词，则另一个默认居中*/</span><span class="token property">background-position</span><span class="token punctuation">:</span> center center<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*center和top的顺序可以颠倒，位置没有影响*/</span><span class="token comment" spellcheck="true">/*background-position: x y  仅写一个表示x*/</span><span class="token property">background-position</span><span class="token punctuation">:</span> <span class="token number">20</span>px <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*20px设置x 50px设置y*/</span><span class="token comment" spellcheck="true">/*两个可以混合使用，第一个是x，第二个是y*/</span><span class="token property">background-position</span><span class="token punctuation">:</span> <span class="token number">20</span>px center<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*20px设置x center设置y*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><ul><li>背景图片固定<pre class="line-numbers language-css"><code class="language-css"><span class="token property">background-attachment</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*背景图像随内容滚动*/</span><span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*背景图像固定*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><ul><li>背景复合写法<pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*background书写没有固定格式，一般background:color image repeat attachment position;*/</span><span class="token property">background</span><span class="token punctuation">:</span> black <span class="token url">url(images/R-C.png)</span> no-repeat scroll center top <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><ul><li>背景颜色半透明<pre class="line-numbers language-css"><code class="language-css"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.6</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*0.6设置透明度，0-1*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表</title>
      <link href="/2022/10/29/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
      <url>/2022/10/29/%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-哈希表"><a href="#简介-哈希表" class="headerlink" title="简介 哈希表"></a>简介 哈希表</h1><span id="more"></span><ul><li><p>介绍<br>哈希表一般是解决<b>快速</b>判断一个元素是否在数组中。<br>我们判断一个学生是不是在一个学校里，我们首先要将学生存储在学校里，查询时通过索引查询在不在学校里。<br>将学生映射在哈希表上需要用到<b>hash funtion（哈希函数）</b></p></li><li><p>哈希函数<br>哈希函数，可以把把学生的姓名直接映射为哈希表上的索引，然后就可以查询。<br>通过hashCode把名字转化为数值，一般hashcode是通过特定编码方式，可以将其他数据格式转化为不同的数值，这样把学生名字映射为哈希表上的索引数字</p> <img src="/images/哈希函数.png" width="600" />如果hashCode得到的数值大于哈希表的大小了，也就是大于tableSize此时为了保证映射出来的索引数值都落在哈希表上，我们会在再次对数值做一个取模的操作，就要我们就保证了学生姓名一定可以映射到哈希表上了。如果学生的数量大于哈希表的大小，必定会有几个学生映射在同一个索引表下，此时需要用到<b>哈希碰撞</b></li><li><p>哈希算法<br>哈希表的组成取决于哈希算法，也就是哈希函数的构成，下面列举几种常见的哈希算法。<br>1） 直接定址法<br>取关键字或关键字的某个线性函数值为散列地址。<br>即 f(key) = key 或 f(key) = a*key + b，其中a和b为常数。<br>2） 除留余数法<br>取关键字被某个不大于散列表长度 m 的数 p 求余，得到的作为散列地址。<br>即 f(key) = key % p, p &lt; m。这是最为常见的一种哈希算法。<br>3） 数字分析法<br>当关键字的位数大于地址的位数，对关键字的各位分布进行分析，选出分布均匀的任意几位作为散列地址。<br>仅适用于所有关键字都已知的情况下，根据实际应用确定要选取的部分，尽量避免发生冲突。<br>4） 平方取中法<br>先计算出关键字值的平方，然后取平方值中间几位作为散列地址。<br>随机分布的关键字，得到的散列地址也是随机分布的。<br>5） 随机数法<br>选择一个随机函数，把关键字的随机函数值作为它的哈希值。<br>通常当关键字的长度不等时用这种方法。</p></li><li><p>哈希碰撞<br>如果两个输入串的hash函数的值一样，则称这两个串是一个碰撞(Collision)。既然是把任意长度的字符串变成固定长度的字符串，所以必有一个输出串对应无穷多个输入串，碰撞是必然存在的。<br>一个优良的hash函数 f 应当满足以下三个条件：<br>（1）对于任意y，寻找x，使得f(x)=y，在计算上是不可行的。<br>（2）给定x1∈A,找x2∈B，，使得f(x1)=f(x2)，在计算上是不可能的，这也就是弱无碰撞性。<br>（3）寻找x1，x2，使得f(x1)=f(x2)，在计算上也是不可行的，这也就是强无碰撞性。<br>这样就称为安全保密的Hash函数，除了枚举外不可能有别的更快的方法。如第3条，根据生日定理，要想找到这样的x1，x2，理论上需要大约2^(n/2)的枚举次数。<br>因为前两条都能被破坏的hash函数太弱而被抛弃，几乎所有的hash函数的破解，都是指的破坏上面的第3条性质，即找到一个碰撞。在密码学上还有一个概念是理论破解，指的是提出一个算法，使得可以用低于理论值得枚举次数找到碰撞</p></li></ul><img src="/images/哈希碰撞.png" width="600" />将两个学生映射在同一下标下，这叫做哈希碰撞一般哈希碰撞有两个解决方法，拉链法和线性探测法<ul><li><ul><li>拉伸法<img src="/images/拉伸法.png" value ="拉伸法" width="600" />（数据规模是dataSize， 哈希表的大小为tableSize）将发生冲突的元素都存在列表中，这样就可以找到小王和小李拉伸法就是合理控制哈希表的大小，既不会造成资源的浪费，又不会增加查询时间</li></ul></li><li><ul><li>线性探测法<br><img src="/images/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B%E6%B3%95.png" alt="线性探测法"><br>线性探测法要满足tableSize大于dateSize，利用空格解决哈希碰撞的问题，如果冲突位置放置了小李，就要在下一位置放置小王。</li></ul></li></ul><blockquote><p>参考<a href="https://blog.csdn.net/YOUYOU0710/article/details/108761052">什么是hash？什么是hash碰撞？怎么处理hash碰撞？</a><br>参考<a href="https://www.cnblogs.com/lgg20/p/15910890.html">哈希碰撞和哈希冲突</a><br>参考<a href="https://programmercarl.com/%E5%93%88%E5%B8%8C%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E5%93%88%E5%B8%8C%E8%A1%A8">哈希表</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针</title>
      <link href="/2022/10/26/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
      <url>/2022/10/26/%E5%8F%8C%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-双指针操作数组"><a href="#简介-双指针操作数组" class="headerlink" title="简介 双指针操作数组"></a>简介 双指针操作数组</h1><span id="more"></span><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>双指针能通过一个快指针和慢指针在一个for循环下完成两个for循环的工作，能减少程序的时间和空间，对于删除，查找，排序元素的优化有很大的作用。<br><b>定义慢快指针：</b><br>1.快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组<br>2.慢指针：指向更新 新数组下标的位置</p><h2 id="双指针查找元素"><a href="#双指针查找元素" class="headerlink" title="双指针查找元素"></a>双指针查找元素</h2><p>双指针每次循环都从两边开始，减少运行时间</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">int</span> length <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span>           <span class="token keyword">return</span> i<span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//数组的开始和结尾一起查找</span>           <span class="token keyword">return</span> length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="双指针移除元素"><a href="#双指针移除元素" class="headerlink" title="双指针移除元素"></a>双指针移除元素</h2><p>数组中的删除是用覆盖完成的，双指针能在一个for循环中完成操作</p><iframe src="https://tva1.sinaimg.cn/large/008eGmZEly1gntrds6r59g30du09mnpd.gif" width="502" height = "350" framebordor = "0"></iframe><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 相向双指针方法，确保了移动最少元素* 时间复杂度：O(n)* 空间复杂度：O(1)*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">removeElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//返回数组的删除后的长度，数组发生了改变</span>        <span class="token comment" spellcheck="true">// 快慢指针</span>    <span class="token keyword">int</span> slowIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> fastIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> fastIndex <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> fastIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>fastIndex<span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//相等时，下次循环fastIndex会比slowIndex大</span>            nums<span class="token punctuation">[</span>slowIndex<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fastIndex<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//利用一直赋值的方法</span>            slowIndex<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> slowIndex<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="翻转字符串"><a href="#翻转字符串" class="headerlink" title="翻转字符串"></a>翻转字符串</h2><p>将字符串的前后顺序进行颠倒</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">removeElement</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//返回数组的删除后的长度，数组发生了改变</span>    <span class="token keyword">int</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">char</span> t <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         arr<span class="token punctuation">[</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> slowIndex<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="替换字符串"><a href="#替换字符串" class="headerlink" title="替换字符串"></a>替换字符串</h2><p>将字符替换成指定的字符，首先要扩容填充之后的大小，要从后面进行填充<br>下面将“ ”转为123</p><iframe src="https://tva1.sinaimg.cn/large/e6c9d24ely1go6qmevhgpg20du09m4qp.gif" width="502" height = "350" framebordor = "0"></iframe><pre class="line-numbers language-c"><code class="language-c"> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//统计空格数量</span>   <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span>       num<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//新的数组大小</span>   <span class="token keyword">int</span> newLength <span class="token operator">=</span> length<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>num<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//新数组的长度</span>   <span class="token keyword">char</span><span class="token operator">*</span> newArr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span>newLength<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> newLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//i是左侧的指针 j是右侧的指针</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span>        newArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将不是空格的字符添加给新数组</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>       newArr<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'3'</span><span class="token punctuation">;</span>       newArr<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'2'</span><span class="token punctuation">;</span>       newArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   newArr<span class="token punctuation">[</span>newLength<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考<a href ="https://programmercarl.com/">代码随想录</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 查找 </tag>
            
            <tag> 移除 </tag>
            
            <tag> 翻转 </tag>
            
            <tag> 替换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找</title>
      <link href="/2022/10/26/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
      <url>/2022/10/26/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-二分法查找数据"><a href="#简介-二分法查找数据" class="headerlink" title="简介 二分法查找数据"></a>简介 二分法查找数据</h1><span id="more"></span><ul><li>思路</li></ul><p>二分查找适用于有序列表，当数组中含有重复元素时，可能会返回的下标不是唯一的。可看教程<a href = "https://www.bilibili.com/video/BV1fA4y1o715/?vd_source=580cd891d54084c6f0158e0c631311d8" target = "_blank">二分法</a></p><ul><li>写法<br>定义target在一个的区间内，用区间的的范围查找target，边界值的取值是二分法的核心</li></ul><ul><li><ul><li>写法一：while(start&lt; end) [start,end)区间 if(nums[(start+end)/2]&gt;=target),令end=(start+end)/2 , if(nums[(start+end)/2]&lt;=target),令start=(start+end)/2+1 注意等号的取值<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> end <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">></span>nums<span class="token punctuation">[</span>end<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">||</span>target<span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> index<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>start<span class="token operator">&lt;</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">int</span> mid<span class="token operator">=</span> <span class="token punctuation">(</span>start<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">)</span>            end<span class="token operator">=</span>mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>             start<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//nums[mid]==target</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><ul><li>写法二：while(start&lt;=end)，要用&lt;=，因为start==end也是会产生target [start,end]区间 if(nums[(start+end)/2]&gt;target),令end=(start+end)/2-1 , if(nums[(start+end)/2]&lt; target) , 令start=(start+end)/2+1 注意等号的取值<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> end <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">></span>nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token operator">||</span>target<span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> index<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>start<span class="token operator">&lt;=</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                index <span class="token operator">=</span>mid<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">)</span>            end<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>             start<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> index<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><blockquote><p>参考<a href ="https://www.programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html#_704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE" target ="_blank" >二分查找</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS（一）</title>
      <link href="/2022/10/22/CSS%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2022/10/22/CSS%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-基础选择器、字体、文本"><a href="#简介-基础选择器、字体、文本" class="headerlink" title="简介 基础选择器、字体、文本"></a>简介 基础选择器、字体、文本</h1><span id="more"></span><ul><li>介绍<br>CSS主要有两部分组成：选择器以及一条或几条声明，放在style标签中,style标签放在head标枪中,可以参考<a href="https://www.w3school.com.cn/cssref/css_selectors.asp" target = "_blank">CSS选择器</a><h2 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h2></li><li>标签选择器<pre class="line-numbers language-css"><code class="language-css">&lt;head>&lt;style>  <span class="token comment" spellcheck="true">/*标签选择器不能差异化设置*/</span>  <span class="token selector">p </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*p和{之间要有一个空格*/</span>      <span class="token comment" spellcheck="true">/*将p标签的属性改为设的值*/</span>      <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*：和属性值之间要有一个空格*/</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>&lt;/head>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>类选择器<pre class="line-numbers language-css"><code class="language-css">&lt;head>&lt;style>  <span class="token comment" spellcheck="true">/*目标标签添加class="red"*/</span>  <span class="token selector"><span class="token class">.red</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*类前面加一个.*/</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>id选择器<pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;head>  &lt;style>      <span class="token id">#pink</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*前面加一个# id是唯一的 只能被调用一次*/</span>        <span class="token property">color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  &lt;/style>&lt;head>&lt;body>&lt;table>    &lt;p id = <span class="token string">"pink"</span>><span class="token number">123</span>&lt;/p><span class="token comment" spellcheck="true">/*添加类*/</span>&lt;/table>&lt;/body><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>通配符选择器<pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;head>&lt;style>  * </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*将所有的标签都改属性值*/</span>    <span class="token property">color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>&lt;/style>&lt;head><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h2><p>CSS font用于更改字体</p><ul><li><p>字体系列</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'宋体'</span>,serif<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*font-family改字体系列 可写多个字体*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>字体大小</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*font-size改字体大小 别忘了px*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>字体粗细</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">font-wight</span><span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*font-weight改字体粗细  700加粗 400变细*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>字体样式</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*倾斜*/</span><span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*直立*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>font的复合属性</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*font: font-style font-weught font-size/lin-height fpnt-family; 语法规范不能颠倒顺序*/</span> <span class="token comment" spellcheck="true">/*不需要的行可以省略，但是font-size font-*family不能省略*/</span><span class="token property">font</span><span class="token punctuation">:</span> italic <span class="token number">700</span> <span class="token number">16</span>px/<span class="token number">28</span>px <span class="token string">'Microsoft yahei'</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*将font属性写在一行，减少代码*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h2></li><li><p>文本颜色</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ff6600</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*十六进制改颜色,#开头，不需要记鼠标放在"#ff6600"*/</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">250</span>,<span class="token number">0</span>,<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*三基色表示颜色*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>对齐文本</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*相对于文本的盒子居中对齐*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>left</td><td>左对齐（默认）</td></tr><tr><td>right</td><td>右对齐</td></tr><tr><td>center</td><td>居中对齐</td></tr></tbody></table></li><li><p>装饰文本</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">text-decoration</span><span class="token punctuation">:</span> line-through<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*x修饰文本的样式 加删除线*/</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>none</td><td>默认，没有下划线，最常用</td></tr><tr><td>underline</td><td>下划线，链接a自带下划线</td></tr><tr><td>overline</td><td>上划线</td></tr><tr><td>line-through</td><td>删除线</td></tr></tbody></table></li><li><p>首行缩进</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*text-indent只会首行缩进，输入负值会向左缩进*/</span><span class="token property">text-indent</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*输入一个数值，px像素*/</span><span class="token property">text-indent</span><span class="token punctuation">:</span> <span class="token number">2</span>em<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**em表示当前文字的单位距离*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>行间距</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">26</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*行间距改变上下行的距离*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h2></li><li><p>内部样式表<br>内部样式表是写在html页面内部，将css代码抽出，单独放在style标签中，控制整个html页面</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;style>p </span><span class="token punctuation">{</span>   <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#160545</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>行内样式表<br>行内样式表写在标签里，仅仅对该标签进行修改，用于属性较少的情况，使用较少</p><pre class="line-numbers language-css"><code class="language-css">&lt;p style=<span class="token string">"color: #165452;font: 54px sans-serif;"</span>>有点意思&lt;/p><span class="token comment" spellcheck="true">/*stylel里放要修改的的属性*/</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>外部样式表<br>外部样式表，将css单独写在一个css文件里，再把css文件引入到html界面中，用于样式较多的情况，完全实现样式和结构分离，可控制多个页面，实际开发常用</p></li></ul><p>1.新建一个css文件，将css代码写在文件里<br>2.在html页面中，使用<link>标签引入到其中</p><pre class="line-numbers language-css"><code class="language-css">&lt;link rel=<span class="token string">"stylesheet"</span> href=<span class="token string">"style.css"</span>><span class="token comment" spellcheck="true">/*放在head标签下，css文件要和html在同一目录之下*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Chrome调试工具"><a href="#Chrome调试工具" class="headerlink" title="Chrome调试工具"></a>Chrome调试工具</h2><ul><li>打开调试工具<br>打开Chrome浏览器，点击F12或者点击右键选择检查</li><li>使用Chrome调试工具</li></ul><ol><li><font color = "red"><b>Ctrl+滚轮</b></font>可以放大开发者代码大小</li><li>左边是html结构，右边是CSS样式</li><li>右边CSS样式可以直接改动数值和看属性值</li><li><font color = "red"><b>Ctrl+0</b></font>恢复浏览器的大小</li><li>点击元素，发现没有样式引入，可能是类名或样式引入错误</li><li>如果样式前面出现<font color ="red"><b>黄色警告</b></font>，则可能是属性书写错误<br><font color = "red"><b>注意：在浏览器上修改，必须将修改的内容复制到源码里，否则浏览器刷新，会恢复原貌<br></b></font></li></ol>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5</title>
      <link href="/2022/10/19/HTML5/"/>
      <url>/2022/10/19/HTML5/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-HTML5的基本内容"><a href="#简介-HTML5的基本内容" class="headerlink" title="简介  HTML5的基本内容"></a>简介  HTML5的基本内容</h1><span id="more"></span><h2 id="标签的类型"><a href="#标签的类型" class="headerlink" title="标签的类型"></a>标签的类型</h2><h3 id="根标签"><a href="#根标签" class="headerlink" title="根标签"></a>根标签</h3><pre><code>&lt;html&gt;网页内容&lt;/html&gt;</code></pre><p>制作网页时，内容要都在根标签里面</p><h3 id="html标签的子标签"><a href="#html标签的子标签" class="headerlink" title="html标签的子标签"></a>html标签的子标签</h3><pre><code>&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;</code></pre><p>放在html标签中<br><br>head标签的内容不会出现在网页中，设置网页的属性，看不见<br><br>body标签的内容会出现在网页中,能看见</p><ul><li>head标签的子标签title<pre><code>&lt;title&gt;网页标题&lt;/title&gt;</code></pre>搜索引擎点击后，超链接的页面标题</li></ul><h3 id="解析类型标签"><a href="#解析类型标签" class="headerlink" title="解析类型标签"></a>解析类型标签</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>告诉网页以html5解析网页，html5应用广泛，放在html标签之前</p><h3 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h3><p>meta标签放在head标签中</p><pre class="line-numbers language-html"><code class="language-html">&lt;meta charset ="utf-8">&lt;meta name = "keywords" content = "html,前端">&lt;meta http-equiv = "refresh" content ="3;url = https://www.baidu.com/"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>meta标签放在head标签中<br>http-equiv 设置转到指定网页的时间，地址<br>name设置属性，content告诉搜索引擎网页的关键字</p><ul><li>name不同属性的设置：<table><thead><tr><th>标签</th><th>作用</th></tr></thead><tbody><tr><td>charset</td><td>网页字符集</td></tr><tr><td>kewords</td><td>网页搜索的关键字</td></tr><tr><td>discription</td><td>网页的描述</td></tr><tr><td>http-equiv</td><td>设置转到的网页</td></tr><tr><td>keywords</td><td>网页搜索的关键字</td></tr><tr><td>discription</td><td>网页的描述 显示在搜索引擎界面</td></tr></tbody></table></li></ul><h3 id="排版标签"><a href="#排版标签" class="headerlink" title="排版标签"></a>排版标签</h3><ul><li><p>头部标签<br>放在body标签中</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>某一部分的头部部分</p></li><li><p>主要主体标签<br>放在body标签中</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>主体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>网页的主体部分，一个网页只能有一个main标签</p></li><li><p> 底部标签<br>放在body标签中</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>底部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>导航标签<br>放在body标签中</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>导航<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>便于查找网页内容</p></li><li><p>边框标签<br>放在body标签中</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span>导航<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>放在网页的边栏部分</p><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--table表示表格，width和height限定表格的大小，border表示行距--></span>&lt;table align="center" width ="500" height ="250" border="1" >  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- tr表示每一行 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>排名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- th表格头部 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>名字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- td表格主体 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>x西游记<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span> <span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性名</th><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>align</td><td>left、certer、right</td><td>规定表格对周围元素的对齐方式</td></tr><tr><td>border</td><td>1 or “”</td><td>规定单元格是否有边框</td></tr><tr><td>cellpadding</td><td>像素值</td><td>规定单元格与其内容之间的空白</td></tr><tr><td>width</td><td>像素值或百分比</td><td>规定表格宽度</td></tr></tbody></table><h3 id="文章的标签"><a href="#文章的标签" class="headerlink" title="文章的标签"></a>文章的标签</h3></li><li><p>文章标签</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>导航<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>放在body标签中</p></li><li><p>语义化标签</p><table><thead><tr><th>标签</th><th>作用</th></tr></thead><tbody><tr><td>em</td><td>语气加重，斜体</td></tr><tr><td>strong</td><td>强调，加粗</td></tr><tr><td>blobkquote</td><td>引用标签</td></tr></tbody></table></li><li><p>分组标签</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hgroup</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hgroup</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将有关的的标签放在hgroup中</p></li><li><p> 标题标签 </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>****<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内容****放在标签中间，第二个标签加/与第一个标签进行区分，<br>h1表示一级标签，h2则表示二级标签，h1-h6</p></li><li><p> 段落标签</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>$$$<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>与标题标签用法相同,表示一个段落</p><h2 id="标签的属性"><a href="#标签的属性" class="headerlink" title="标签的属性"></a>标签的属性</h2></li><li><p> 标签属性的分类<br><a href = "https://blog.csdn.net/u013519551/article/details/52525855" target = "_blank">标签属性分类</a>转自<strong>独家记忆0408</p></li><li><p> 标签属性的使用</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>font-style</td><td>规定字体样子</td></tr><tr><td>font-variant</td><td>规定字体异体</td></tr><tr><td>font-weight</td><td>规定字体粗细</td></tr><tr><td>font-size/line-height</td><td>规定字体尺寸和行高</td></tr><tr><td>font-family</td><td>规定字体系列</td></tr><tr><td>caption</td><td>定义被标题控件（比如按钮、下拉列表等）使用的字体</td></tr><tr><td>icon</td><td>定义被图标标记使用的字体</td></tr><tr><td>menu</td><td>定义被下拉列表使用的字体</td></tr><tr><td>message-box</td><td>定义被对话框使用的字体</td></tr><tr><td>small-caption    caption</td><td>字体的小型版本</td></tr><tr><td>status-bar</td><td>定义被窗口状态栏使用的字体</td></tr></tbody></table><pre class="line-numbers language-html"><code class="language-html">&lt;font color = "yellow" size ='3'>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>color设置“内容”的颜色，属性值yellow放在””中,属性之间用空格隔开</p><h2 id="块元素和行内元素"><a href="#块元素和行内元素" class="headerlink" title="块元素和行内元素"></a>块元素和行内元素</h2></li><li><p>介绍<br>块元素：宏观展示，大多数都能放，用了会换行<br>行内元素：对一行内的元素，进行添加修饰，不会换行<br>行内元素一般可放在块元素中，而块元素很少放在行内元素中，用错了浏览器会自动修正</p></li><li><p> 分类<br>块元素</p><table><thead><tr><th>元素</th><th>标签</th></tr></thead><tbody><tr><td>行内元素</td><td>em,trong,p,a</td></tr><tr><td>块元素</td><td>blockquote,h</td></tr></tbody></table></li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li><p>无序列表<br>ul表示列表标签<br>li表示列表的项</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>结构<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>表现<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8.png"></p></li><li><p>有序列表<br>ol表示列表标签<br>li表示列表的项</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>结构<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>表现<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8.png"></p></li><li><p>定义列表<br>dl表示定义列表<br>dt表示要下定义的东西<br>dd表示下的定义</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>结构<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--被定义的对象--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>结构是...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>结构能..<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="表单案例"><a href="#表单案例" class="headerlink" title="表单案例"></a>表单案例</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &lt;table width = "600">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--第一行元素--></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            &lt;input type="radio" name="sex" value="nan" checked ="checked" id="man"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--第二行--></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>生日<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--下拉表单元素这里只测试几个--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--下拉表单元素--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">selected</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>--请选择年份--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2015<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2015<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2016<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2016<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--下拉表单元素--></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">selected</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>--请选择月份--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>11<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--下拉表单元素--></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">selected</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>--请选择日--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>11<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>所在地区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>爱好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            &lt;input type="checkbox" name = "love" id="qiu"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>qiu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>打球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            &lt;input type="checkbox" name = "love" id="sleep"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sleep<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>睡觉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span> 个人介绍<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>个人经历<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上传文件1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>重置<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E8%A1%A8%E5%8D%95%E5%9F%9F%E6%A1%88%E4%BE%8B.png"></p><ul><li><p>form的主要的属性 </p><table><thead><tr><th>属性</th><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>action</td><td>url地址</td><td>用于接收表单数据的服务器url地址</td></tr><tr><td>method</td><td>get/post</td><td>用于设置表单提交的方式</td></tr><tr><td>name</td><td>名称</td><td>表单域的名称</td></tr></tbody></table></li></ul><h3 id="表单控件-input输入表单元素"><a href="#表单控件-input输入表单元素" class="headerlink" title="表单控件-input输入表单元素"></a>表单控件-input输入表单元素</h3><ul><li><p>type属性及其描述</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>button</td><td>定义可点击的按钮</td></tr><tr><td>checkbox</td><td>定义复选框</td></tr><tr><td>file</td><td>定义输入字段和“浏览”按钮，供文件上传</td></tr><tr><td>hidden</td><td>定义隐藏的输入字段</td></tr><tr><td>image</td><td>定义图像的形式的提交按钮</td></tr><tr><td>password</td><td>定义密码字段，字段被掩码</td></tr><tr><td>radio</td><td>定义单选按钮</td></tr><tr><td>reset</td><td>定义重置按钮，会清除表单的搜有数据</td></tr><tr><td>submit</td><td>定义提交按钮，把表单数据提交给服务器</td></tr><tr><td>text</td><td>定义单行输入字段</td></tr></tbody></table></li><li><ul><li>label标签<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>for的属性值与id的属性值相同，浏览器点击“女”会直接转到相应的元素上，</li></ul></li><li><p>input中除type外的标签属性</p><table><thead><tr><th>属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>自定义</td><td>定义input元素的名称</td></tr><tr><td>value</td><td>自定义</td><td>规定input元素的值</td></tr><tr><td>checked</td><td>checked</td><td>决定input元素的默认值</td></tr><tr><td>maxlength</td><td>正整数</td><td>规定字段的字符最大长度</td></tr></tbody></table></li></ul><h3 id="表单控件-select下拉表单元素"><a href="#表单控件-select下拉表单元素" class="headerlink" title="表单控件-select下拉表单元素"></a>表单控件-select下拉表单元素</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token punctuation">></span></span>籍贯:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--选项名称--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token punctuation">></span></span>山东<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--选项--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        &lt;option selected ="selected">火星<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/select%E4%B8%8B%E6%8B%89%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0.png"></p><h3 id="表单控件-textarea文本域元素"><a href="#表单控件-textarea文本域元素" class="headerlink" title="表单控件-textarea文本域元素"></a>表单控件-textarea文本域元素</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token punctuation">></span></span>    今日反馈：<span class="token comment" spellcheck="true">&lt;!--文本域的名称--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--123表示文本域的默认文本值---></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/textarea%E8%A1%A8%E5%8D%95%E6%96%87%E6%9C%AC%E5%9F%9F%E5%85%83%E7%B4%A0.png"></p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><ul><li> 介绍<br>超链接路径分为相对路径和绝对路径<br>打开同一目录下的网页，用相对路径<br>打开外部网页，用绝对路径</li><li>网页跳转<pre class="line-numbers language-html"><code class="language-html">&lt;a href = "https://www12.baidu.com/" target = "_blank">超链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>href填网址，既可是绝对路径，也可是相对路径  target填是否打开新的网页，_blank代表打开，默认不打开</li><li> 超链接相互跳转<pre class="line-numbers language-html"><code class="language-html">&lt;a id = "top" href = "#bottom" target = "_blank">超链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>&lt;a id = "bottom" href = "#top" target = "_blank">超链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>为超链接赋给一个id，href填入#+id，即可到达该网页指定超链接的位置<br>href填入#，则默认返回该网页顶部，填入”javascrip:;”则不会跳转到任何界面</li></ul><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><ul><li><p>图片分类</p><table><thead><tr><th>图片类型</th><th>特点</th><th>用途</th></tr></thead><tbody><tr><td>jpg</td><td>支持的颜色比较丰富，不支持透明效果，不支持动图</td><td>一般用于显示照片</td></tr><tr><td>gif</td><td>支持颜色比较少，支持简单透明，支持动图</td><td>动图</td></tr><tr><td>png</td><td>支持颜色丰富，支持复杂透明，不支持动图</td><td>网页</td></tr><tr><td>base64</td><td>通过字符的形式引入图片</td><td>加载速度快</td></tr></tbody></table></li><li><p>用法</p><pre class="line-numbers language-html"><code class="language-html">&lt;img src = "https://tse3-mm.cn.bing.net/th/id/OIP-C.Rq5h9rKa8uBoUxtGTCCVRQHaKd?w=130&amp;h=184&amp;c=7&amp;r=0&amp;o=5&amp;dpr=1.3&amp;pid=1.7" width = "800" alt = "风景">&lt;img src = "./img.gif" alt = "1"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>src填本地图片的路径，图片要和网页在同一目录下，也可填图片网址<br>width设置图片的大小<br>alt对图片进行命名，一般不会在网页上显示，而会便于搜素引擎查找</p></li></ul><h2 id="内联框架"><a href="#内联框架" class="headerlink" title="内联框架"></a>内联框架</h2><ul><li>介绍<br>引入别的网页在自己的网页中，放在一个指定大小的框架中</li><li>用法<pre class="line-numbers language-html"><code class="language-html">&lt;iframe src ="https://www.baidu.com" width = "800" height = "600" framebordor = "0"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>src放网址，width和height设置大小，framebordor边框设置</li></ul><h2 id="音频、视频"><a href="#音频、视频" class="headerlink" title="音频、视频"></a>音频、视频</h2><h3 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">contrals</span><span class="token punctuation">></span></span>    &lt;source src = "./scorce/ji.mp3" >    &lt;embed src = "./scorce/ji.mp3" type = "audio/mp3 " width = "400" height = "300"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>contrals是否允许用户控制播放<br>sourse用于windows9以上的浏览器<br>embed用于windows8以下的浏览器</p><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">contrals</span><span class="token punctuation">></span></span>    &lt;source src = "./scorce/ji.mp4" >    &lt;embed src = "./scorce/ji.mp4" type = "audio/mp4 " width = "400" height = "300"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>contrals是否允许用户控制播放<br>sourse用于windows9以上的浏览器<br>embed用于windows8以下的浏览器</p><h3 id="第三方"><a href="#第三方" class="headerlink" title="第三方"></a>第三方</h3><iframe src="//player.bilibili.com/player.html?aid=77217003&bvid=BV1XJ411X7Ud&cid=132017557&page=26" scrolling="no" border="0"         frameborder="no" framespacing="0" allowfullscreen="true"> </iframe> <p>视频和音频一般较大，会占用外存和内存，可将自己的视频音频借用第三方网页进行打开，不会占用自己的网页空间<br>找到视频下的分享链接，复制代码即可  </p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL操作</title>
      <link href="/2022/10/11/MySQL%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/10/11/MySQL%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-操作MySQL"><a href="#简介-操作MySQL" class="headerlink" title="简介 操作MySQL"></a>简介 操作MySQL</h1><span id="more"></span><h1 id="MySQL语法"><a href="#MySQL语法" class="headerlink" title="MySQL语法"></a>MySQL语法</h1><ul><li><p> 创建数据库 以bjpowernode为例</p><pre><code>create database bjpowernode;</code></pre></li><li><p>使用bjpoernode的数据 以bjpowernode为例</p><pre><code>use bjpoernode;</code></pre></li><li><p>查看当前数据库的表格</p><pre><code>     show tables;</code></pre></li><li><p>初始化数据 复制在MySQL文件下resources文件下的bjpoernode.sql的路径 以bjpowernode为例</p><pre><code>      source D:\MySQL\resources\bjpoernode.sql</code></pre></li><li><p>删除数据库 以bjpowernode为例</p><pre><code>     drop database bjpowernode;</code></pre></li><li><p>查看表格结构 以dept为例</p><pre><code>     desc dept;</code></pre></li><li><p>查看表格数据 以dept为例</p><pre><code> select *from dept;</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL安装</title>
      <link href="/2022/10/11/MySQL%E5%AE%89%E8%A3%85/"/>
      <url>/2022/10/11/MySQL%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="简介-下载MySQL"><a href="#简介-下载MySQL" class="headerlink" title="简介 下载MySQL"></a>简介 下载MySQL</h1><span id="more"></span><h1 id="MySQL的下载"><a href="#MySQL的下载" class="headerlink" title="MySQL的下载"></a>MySQL的下载</h1><p>下载网址：<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p><p><img src="/images/MySQLdownload.png"></p><h1 id="MySQL的配置"><a href="#MySQL的配置" class="headerlink" title="MySQL的配置"></a>MySQL的配置</h1><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><ul><li> 打开电脑高级系统配置<br><img src="/images/%E9%85%8D%E7%BD%AEMySQL%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png"></li><li>复制MySQL的路径</li></ul><p><img src="/images/MySQL%E7%9A%84%E8%B7%AF%E5%BE%84.png" alt="复制路径"></p><ul><li>新建MySQL_HOME环境变量</li></ul><p><img src="/images/%E6%96%B0%E5%BB%BAMySQL%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="新建环境变量"></p><ul><li>编辑path，点击“新建”</li></ul><p><img src="/images/%E6%B7%BB%E5%8A%A0path.png" alt="新建环境变量"></p><ul><li>点击“确定”，保存设置，这样环境变量就配置完成了</li></ul><h2 id="新建MySQL的配置文件"><a href="#新建MySQL的配置文件" class="headerlink" title="新建MySQL的配置文件"></a>新建MySQL的配置文件</h2><ul><li> 在MySQL的文件目录下，新建一个文件“my.ini”，把以下的内容粘贴复制到文件里<pre class="line-numbers language-sql"><code class="language-sql"><span class="token punctuation">[</span>mysql<span class="token punctuation">]</span><span class="token keyword">default</span><span class="token operator">-</span>character<span class="token operator">-</span><span class="token keyword">set</span><span class="token operator">=</span>utf8<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>character<span class="token operator">-</span><span class="token keyword">set</span><span class="token operator">-</span>server<span class="token operator">=</span>utf8<span class="token keyword">default</span><span class="token operator">-</span>storage<span class="token operator">-</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">INNODB</span>sql_mode<span class="token operator">=</span>STRICT_TRANS_TABLES<span class="token punctuation">,</span>NO_ZERO_IN_DATE<span class="token punctuation">,</span>NO_ZERO_DATE<span class="token punctuation">,</span>ERROR_FOR_DIVISION_BY_ZERO<span class="token punctuation">,</span>NO_AUTO_CREATE_USER<span class="token punctuation">,</span>NO_ENGINE_SUBSTITUTION<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="初始化MySQL"><a href="#初始化MySQL" class="headerlink" title="初始化MySQL"></a>初始化MySQL</h2><ul><li>用管理员命令打开命令框，进入到mysqlt下的bin，并输入.\mysqld       –initialize-insecure </li></ul><p><img src="/images/%E7%94%9F%E6%88%90data.png" alt=".\mysqld  --initialize-insecure"></p><h2 id="注册MySQL服务"><a href="#注册MySQL服务" class="headerlink" title="注册MySQL服务"></a>注册MySQL服务</h2><ul><li>在命令行中输入mysqld -Install  </li></ul><p><img src="/images/%E6%B3%A8%E5%86%8CMySQL.png" alt="mysqld -Install"></p><h2 id="启动MySQL服务"><a href="#启动MySQL服务" class="headerlink" title="启动MySQL服务"></a>启动MySQL服务</h2><ul><li>输入 net start mysql<pre><code>net start mysql</code></pre><blockquote><p>参考<a href ="https://blog.csdn.net/weixin_42869365/article/details/83472466">MySQL下载与安装</a></p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
